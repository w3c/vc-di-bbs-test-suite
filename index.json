{
  "matrices": [
    {
      "title": "Data Integrity (bbs-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:3d3d097f-502f-4897-8e7d-493577f12371",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:038d6c66-b227-4e62-8d02-76ff6ebe2f9a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:729e0512-e374-43f7-841d-5bc04e5653d4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:3a2c47b5-2c08-46d0-b746-c6494933f4a2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:af11c560-27c3-4b80-8e56-2f3ad7661968",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:2033eccc-fa89-4bcb-82a4-eb7430513d7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:4bcd2309-e3cf-439d-9e12-e875272e53df",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:69fe8c4f-65c6-45a4-9781-0ab1b0d3dea0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:dfa2dd9b-8de6-45bf-bf27-d00d9f8e3f54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:fe383ef6-c0df-4dc1-9bdb-b8b062e88d2f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:bf5b7abf-19f4-477b-b396-18e1c3c7592f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:887dd6cc-cf97-4ff9-8d70-9481e9221593",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:4db8c4f3-9851-491b-93af-759e68374370",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:f8a5cefd-6c9e-4b86-b862-072a7ca0d0fe",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:d3eebaff-a545-45be-9853-49b7caa1fb1f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:68699cba-b017-4aae-84a6-3a8bb538024a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13090,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:2e476bc1-51cd-49e1-b356-bb5e9fb13ad6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 736,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YGj-ngH-eP01e1e5tCqKa",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:dd68a920-c241-4c17-a6b1-61841d9ec15b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P2LXW5xqDPa5iRXGX5uuO",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:b3ed8f28-55dc-49d7-b6ea-aa0247a5726e",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:3d3d097f-502f-4897-8e7d-493577f12371",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:038d6c66-b227-4e62-8d02-76ff6ebe2f9a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:729e0512-e374-43f7-841d-5bc04e5653d4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:3a2c47b5-2c08-46d0-b746-c6494933f4a2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:af11c560-27c3-4b80-8e56-2f3ad7661968",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:2033eccc-fa89-4bcb-82a4-eb7430513d7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:4bcd2309-e3cf-439d-9e12-e875272e53df",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:69fe8c4f-65c6-45a4-9781-0ab1b0d3dea0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:dfa2dd9b-8de6-45bf-bf27-d00d9f8e3f54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:fe383ef6-c0df-4dc1-9bdb-b8b062e88d2f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:bf5b7abf-19f4-477b-b396-18e1c3c7592f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:887dd6cc-cf97-4ff9-8d70-9481e9221593",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:4db8c4f3-9851-491b-93af-759e68374370",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:f8a5cefd-6c9e-4b86-b862-072a7ca0d0fe",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:d3eebaff-a545-45be-9853-49b7caa1fb1f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:68699cba-b017-4aae-84a6-3a8bb538024a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13090,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "34uAOIYfZ21Mlm_HG8NCR",
              "ctx": null,
              "_testId": "urn:uuid:2e476bc1-51cd-49e1-b356-bb5e9fb13ad6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 736,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "CHun1m52_GpHJy2USIYVe",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (issuers) VC Version 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:d199842c-53c8-416b-a52f-cadd545b7568",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:0e6dcb8d-5070-4628-825d-92111b4ce3c4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:6dd350de-5753-4e11-8dbe-092273cb516f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:7b585ff6-1fb3-446f-baa5-b2a0242499a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:a320c586-97ff-4253-bebc-857235d22470",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:6aa1bff9-55e0-4b9e-bae4-fe1633e2bbae",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:9f07ef4b-d252-4d2f-9e30-3b537dfcfb94",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:f847211a-7037-4890-842b-f394c7248429",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:a3dab109-df20-4673-a443-b8c68d219e9e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:65e8ba20-4f80-4e77-84a7-64e65df28d4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FsWLFRLmV7GCcJ-KsgnZa",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:8f2b6ad9-521a-4a76-9261-6ea6cc567a49"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "CHun1m52_GpHJy2USIYVe",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:2f91fbdb-ef98-4f1f-b1c0-7a5e35bad4c8",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "The cryptosuite property of the proof MUST be bbs-2023.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:d199842c-53c8-416b-a52f-cadd545b7568",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:0e6dcb8d-5070-4628-825d-92111b4ce3c4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:6dd350de-5753-4e11-8dbe-092273cb516f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The derived \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:7b585ff6-1fb3-446f-baa5-b2a0242499a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The verificationMethod property of the proof MUST be a URL.",
          "cells": [
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:a320c586-97ff-4253-bebc-857235d22470",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:6aa1bff9-55e0-4b9e-bae4-fe1633e2bbae",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:9f07ef4b-d252-4d2f-9e30-3b537dfcfb94",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:f847211a-7037-4890-842b-f394c7248429",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the HMAC key MUST be the same length as the digest size",
          "cells": [
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:a3dab109-df20-4673-a443-b8c68d219e9e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "-_uXSUwY9Qx0h9CXW9QRV",
              "ctx": null,
              "_testId": "urn:uuid:65e8ba20-4f80-4e77-84a7-64e65df28d4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P2LXW5xqDPa5iRXGX5uuO",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "columns": [],
      "rows": []
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:90bb9042-460b-4be2-b8de-838b6ee4af6b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:a954d74f-21fa-447a-9f81-0028df328d9e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:e62873b6-5001-4846-a83c-d5fd4dceeb7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:373591c2-6f31-4dfc-be42-388dd08b10cc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:eb5d92b8-6c25-4df5-bfcd-9a5fa1273291",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:8ae42499-a391-4f57-b3f9-ecf6688ea5d0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:62:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:7908dd74-a23a-43a6-9d01-93c511d6dbfd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:7fc3e6f9-abff-4d6d-94cd-c0eaa4625bf7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:19d31fdd-eac1-48c6-a0c5-1bdcaf9367ed",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:05 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:05 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:e5bf008a-cf65-4f65-87b6-c72d6a2cc8c0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:b29ed3fa-17bd-4e8f-9d90-9d897fc6b9bc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:0149183b-08a7-4fa3-8aa1-3b806fb6e847",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:9896b73c-c4e2-40ba-99bf-c68e4ae0233a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:3a956453-de7e-4857-a9a1-7f4660f5b917",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:129:9)"
              }
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:f827b4c6-40a1-448e-bbf7-8adabb13aa49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:138:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      credentials = await generateTestData({...testDataOptions, optionalTests});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1751,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "t158m-1HCEPCMyf9Q7RFE",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:eed9a397-e904-49f6-b698-d875ea23b7ac"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P2LXW5xqDPa5iRXGX5uuO",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:f733485a-8db5-44f9-9b9a-fc1529888a57",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:90bb9042-460b-4be2-b8de-838b6ee4af6b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:a954d74f-21fa-447a-9f81-0028df328d9e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:e62873b6-5001-4846-a83c-d5fd4dceeb7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:373591c2-6f31-4dfc-be42-388dd08b10cc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:eb5d92b8-6c25-4df5-bfcd-9a5fa1273291",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:8ae42499-a391-4f57-b3f9-ecf6688ea5d0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:62:7)"
              }
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:7908dd74-a23a-43a6-9d01-93c511d6dbfd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:7fc3e6f9-abff-4d6d-94cd-c0eaa4625bf7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:19d31fdd-eac1-48c6-a0c5-1bdcaf9367ed",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:05 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:05 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:e5bf008a-cf65-4f65-87b6-c72d6a2cc8c0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:b29ed3fa-17bd-4e8f-9d90-9d897fc6b9bc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:0149183b-08a7-4fa3-8aa1-3b806fb6e847",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:9896b73c-c4e2-40ba-99bf-c68e4ae0233a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:3a956453-de7e-4857-a9a1-7f4660f5b917",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:129:9)"
              }
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "CxLemWZkPEjVFrAXj7p1u",
              "ctx": null,
              "_testId": "urn:uuid:f827b4c6-40a1-448e-bbf7-8adabb13aa49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 07 Jul 2024 05:07:06 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:138:9)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (verifiers) VC 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ifKnIUQUVi5hZpRpaaASZ",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:73f64fad-07d1-4a82-b77a-3473f56ac6eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 465,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:2d4daae2-9bd1-41c4-9ab9-f53452c74239",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:2f3303b2-07ad-47a6-ae1e-0ba4ceebe8d2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 717,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:27c693b1-e0e0-4ef0-86ad-bb9c824bf2e4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMIHUslO1OlGV089kvw-C1GtTSmUVVsubvAMN2TqfLJq7kIjneKodHuLJYMOUgQFFu43TbCkj6jPWzLbcgWH8vPrzlSkFpM1hNoDNBewzD3EfUPhpoRnkALcezOXBQISG0azn43SRPFHxLIKs5Gbqkx_QLG4WfqcK-4VTTPPcVdxsDWElwOj1P_yHjAHCxDEYvhCHS1ivCYedvyOReRB1J1s7IXopu6RjuyNtttU_Vg3ADzbxssPh1Rqmw3zizae4hJTmIikL4wIbvMm-xtOJLocwy-bvzU0AuE3YJP6dE9K9QgyXC8mnyallQbh4-Ma_vwn6p4t37IX99vx6xSsjC37E4qs3hyf5Qe9qY9_nrfJEbLPBrMuOhm3qXAvzeHBYpzNX2YyHEpEdoATcrdZ9gxewAA8BCwIKAwQEDAUCBgEHAAgJCQgKDgsNDAMNBg4HDwWDFhcYGZg3AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCYYJxgoGCkYKhgrGCwYLRguGC8YMBgxGDIYMxg0GDUYNhg3QA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMIHUslO1OlGV089kvw-C1GtTSmUVVsubvAMN2TqfLJq7kIjneKodHuLJYMOUgQFFu43TbCkj6jPWzLbcgWH8vPrzlSkFpM1hNoDNBewzD3EfUPhpoRnkALcezOXBQISG0azn43SRPFHxLIKs5Gbqkx_QLG4WfqcK-4VTTPPcVdxsDWElwOj1P_yHjAHCxDEYvhCHS1ivCYedvyOReRB1J1s7IXopu6RjuyNtttU_Vg3ADzbxssPh1Rqmw3zizae4hJTmIikL4wIbvMm-xtOJLocwy-bvzU0AuE3YJP6dE9K9QgyXC8mnyallQbh4-Ma_vwn6p4t37IX99vx6xSsjC37E4qs3hyf5Qe9qY9_nrfJEbLPBrMuOhm3qXAvzeHBYpzNX2YyHEpEdoATcrdZ9gxewAA8BCwIKAwQEDAUCBgEHAAgJCQgKDgsNDAMNBg4HDwWDFhcYGZg3AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCYYJxgoGCkYKhgrGCwYLRguGC8YMBgxGDIYMxg0GDUYNhg3QA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2670
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:71:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:bec50c1d-afa5-4857-9039-f67ab37f56a1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KhEGNK_nSdETuAcnmQl5-aXUOXsJrGMUwgnwVohpYfnixHW-YZH8AMhq7dJQ-XhTaKLtSAt5X2UY5DeW-zRv8yvpqoVPmZI6wIBqNQ6J_oWoao_NALhro0rrDCygi9ab5hxionWR6LlNRuPSrtgCfro127t12m1jfVhlT5GjqRPI5G-_8Ar-gCfj-MMD2L7XgEbjNSZWlW4gLpPOGj1HoFzXa2lrSQIS4fQbvcXH3mjO0pLUnlPwm7euGK1z17bBkB0X78oG2wDHLfE9aX2zewAas4bC0XSRv82dBpQA3dLasKxxs89kHG3z_81l_nW2EgWkOAbceAPRbgqEKNi97ZUUHBUZ6G-71dSSKsvyNhvUUDEzU-_9cCzyndqUUMl_FA-KHLczY0BP781b3cbTQVJjc7IyPN9ts7gcYYasRRaBKk0zW9F1RQl8-VHwkriHWsCeujHzx89Pbpf4265ROvfkLex0fkGD5TMowUuUs0Canekt7BOM6Nqw_ndWgaUBDZIfmXRNDCLXikKVn1LG1QTQ84xxbAfI8kmc81fSTz8wZHf5SkFwQXUSl8Hv_bysWabh6ziw283kSrWS8b1SuybffYXOW1Pugm1CxYNg9pdXJoVMASl4IqXugeMIuMEZ3kTwu8kwbeaNKymIACPa4Jz0g2Ma7OiRDQC85rYvB5X_HWKgW4_JdE49cFMU0Oj7WAFVv0OISsWoNeEVBPPt2f5lho7VGwzcLvUPXwVKKOCKmsYThRx-XAymK_NeTR06i7lj9HE91Pdg1ehg-xHYaBWdzblxAIkVNYq_TbtvKyRYMrberJZDNIXwdgxCDp7LzHcnm32i0As9w7X572MzkiTndjGCNNf7FvHMzYIQAHoXsm6mdQrWWwoDY0d1xL1S8iZr7iw5UJd_D3XUpjBoKJic3ErFt6B5zNkFmzwK3cKgPPqbBKHJJf0N4fQBBFpgmVCeLQ5gXcKRD1_OT5FxcGP0r_KjzeNW3Jzpw0IOk4eDApFUcAzARyscwwVvJ5UJm7asWWxjTSbRyaZOAUcyDA2Jb67SILKeCTKQ_LqTeJCt5hUGov4_aqRBPF_TS_tuCfbuNcRklGPmFwOJDc_iFzShoDrmOruFf-OC_bB9DP2cZMLSPBV4ZLdtz-h-j_kbXqRJIfBEECl6hCnzIj4WfovKjzBqHJ_on2m5MSTtgTdtyPr2JArpOB52YB_CFG6vT01faMlg5XwAzx02TV_QEAC-2QP2HBmrevAEH67s0WZSK5kEBWJvtBe7xcuOJ0udYaopGqLIcYeidNM8L0GYNurAAQBAgIPAwwEDQUGBgEHBQgACQ4KCYMYGxgcGB6YIgABAgMEBQwNDhAREhUWFxgYGBkYGhgbGBwYHRggGCEYIxgoGCkYKhgrGCwYLRguGDUYNhg3QA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KhEGNK_nSdETuAcnmQl5-aXUOXsJrGMUwgnwVohpYfnixHW-YZH8AMhq7dJQ-XhTaKLtSAt5X2UY5DeW-zRv8yvpqoVPmZI6wIBqNQ6J_oWoao_NALhro0rrDCygi9ab5hxionWR6LlNRuPSrtgCfro127t12m1jfVhlT5GjqRPI5G-_8Ar-gCfj-MMD2L7XgEbjNSZWlW4gLpPOGj1HoFzXa2lrSQIS4fQbvcXH3mjO0pLUnlPwm7euGK1z17bBkB0X78oG2wDHLfE9aX2zewAas4bC0XSRv82dBpQA3dLasKxxs89kHG3z_81l_nW2EgWkOAbceAPRbgqEKNi97ZUUHBUZ6G-71dSSKsvyNhvUUDEzU-_9cCzyndqUUMl_FA-KHLczY0BP781b3cbTQVJjc7IyPN9ts7gcYYasRRaBKk0zW9F1RQl8-VHwkriHWsCeujHzx89Pbpf4265ROvfkLex0fkGD5TMowUuUs0Canekt7BOM6Nqw_ndWgaUBDZIfmXRNDCLXikKVn1LG1QTQ84xxbAfI8kmc81fSTz8wZHf5SkFwQXUSl8Hv_bysWabh6ziw283kSrWS8b1SuybffYXOW1Pugm1CxYNg9pdXJoVMASl4IqXugeMIuMEZ3kTwu8kwbeaNKymIACPa4Jz0g2Ma7OiRDQC85rYvB5X_HWKgW4_JdE49cFMU0Oj7WAFVv0OISsWoNeEVBPPt2f5lho7VGwzcLvUPXwVKKOCKmsYThRx-XAymK_NeTR06i7lj9HE91Pdg1ehg-xHYaBWdzblxAIkVNYq_TbtvKyRYMrberJZDNIXwdgxCDp7LzHcnm32i0As9w7X572MzkiTndjGCNNf7FvHMzYIQAHoXsm6mdQrWWwoDY0d1xL1S8iZr7iw5UJd_D3XUpjBoKJic3ErFt6B5zNkFmzwK3cKgPPqbBKHJJf0N4fQBBFpgmVCeLQ5gXcKRD1_OT5FxcGP0r_KjzeNW3Jzpw0IOk4eDApFUcAzARyscwwVvJ5UJm7asWWxjTSbRyaZOAUcyDA2Jb67SILKeCTKQ_LqTeJCt5hUGov4_aqRBPF_TS_tuCfbuNcRklGPmFwOJDc_iFzShoDrmOruFf-OC_bB9DP2cZMLSPBV4ZLdtz-h-j_kbXqRJIfBEECl6hCnzIj4WfovKjzBqHJ_on2m5MSTtgTdtyPr2JArpOB52YB_CFG6vT01faMlg5XwAzx02TV_QEAC-2QP2HBmrevAEH67s0WZSK5kEBWJvtBe7xcuOJ0udYaopGqLIcYeidNM8L0GYNurAAQBAgIPAwwEDQUGBgEHBQgACQ4KCYMYGxgcGB6YIgABAgMEBQwNDhAREhUWFxgYGBkYGhgbGBwYHRggGCEYIxgoGCkYKhgrGCwYLRguGDUYNhg3QA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2671
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:8a0b8ef3-c1bc-4c1b-98bd-249e8f4ef5fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkIAIhtUZrwmtEKr3J1xo-aR_lNgLjWqJ_zFDKgi9jYicHuZEzhffD8aayqAIgOqjfa5uEzRjWWQjIKZtILGeKbv7SkA8OaL3zvb3vTRND6QM-_tPshsD9XdAn41oC2goMKgnsghLoVChjv1yWDFW4W7tyRQ8oHfbKNYNrSvXEmrggqgep2D5enXvQyhTBOydhx85p4_9P6-6wI9arssfIMj_pW3HAoEGRDbVXrk3oTo8JgjtbQmVBw_2lwmyI1sJjn2R6fPA9GwzD4iaiivlkC5kAkkI1uvEPhCE-pgcp7q6ZYZv1mTioovQ1L2la0TgfVmhN0XEGwlJhnt7soLM8QxzMIJIs8HHRQWoBgdtf-pEBLQfNm-yUhZ7X6-SJhcESfbRc-J0ytDrRG6buWLTSVJEzk9FNvL6DJvPdK37RYysxA6PTio2Pfl-vsuZNu8BHFtA9jd6VSLK2NDh-TfrqErcT-I74w4jbe8Czm8G00nqWAwHrD6WMMuMo4tJcLfmBZsAAcisZS2-XCqeQWoEPERktYXVYhiJ0_K0r4JiZqlG4NxjYQx4WnocnjaiPwIKrU_94xcBxH0R7XpXxdhhZd3ZoaSYfuXuz8mW0n_xfKX3UcjD7Zya2DOk_aP0sfZQl8kx0gvNKxESd7AvFmARzwhzjkbAK-_37EVqdSlHKqBhuEmIte2Ud2JldZNAxNJbT2BTxBhBGDV4m9x8n7t2ICeTk96jtiYsZg1mGJKqRIDKDXNo4KYlBYRQGjJrLQpDV_mhTRBkZ_cbZXqsBuP_ZDlDrp6R8cvdjdYh0fIFbJNQSU_EobVtLqe9iDE6g143G1BhYIhhLwt6AWeZn4hCLzXPC4z41Y7ND9OsG2z50W18F-7gULhZ6238xq1CGAl-Xd4e6Jtr4KUt3WdUs_kcp_FcSUTOAbNN-0EauXMnLcZKtwTlXbg3QeeH97UUWb0lblJAx0mDTxDOJgHSv3JfV47IMJgQY6IMuT4DhN4d-xVkUi4IUIN8eHFelDG_Mp-vKx-s8_NZG8cmd7JP_-y6YYZsaz1YhzO7_mraDpjopa2KXezg0_ZYTrQsouS3xF7c4B1hTFnAcy-YAC53CDL1butON1K6KmnR-OKFmJ9KRCTLQeLRTUAdj1ZiQYGydkj0TqyWEBcqnn77FaM-H1p3Il9tASZZfuUiAPrAKUrzQKF0F6AK0WBmqIhRX-f-4dW4DVUDIYUGeyA-xL-tMWR4X4jHwjRf2HhsAVIX8YpiJjTcJwWkJ3AtkhcbLCauChbBm8bB0ifRyK6a3usl048J6YMyGtwTSUfYuHVmhaMRr3G7PA52Sxzx5JdxFcAj8fxu6XFgBMoFdLzfnEu9YCOl42GX4v8vrIB_xL0nXIuge0GWa9-3tmfJdNxWbxbPf7PLorvGH2cuQL-AiCgC-V6jN-AXVUGvKTp-HjwWY5Brh_fml78wybOh4cCyK3c2Hpmq7lVHbYS1NKXgs-dUnlVYWlf62S85XU5Kd4zA7omLq_SkRZ5bkMXMhNq9Pil-_9VzLUC2Atoj_cNot3B6dy78KYupAAoBBAIPAwYEAgUBBgkHAwgAgwMEBpgcAAECAwQFBhgYGBkYGhgdGB4YHxggGCEYIhgjGCQYJRgmGCcYKBgsGC0YLhg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkIAIhtUZrwmtEKr3J1xo-aR_lNgLjWqJ_zFDKgi9jYicHuZEzhffD8aayqAIgOqjfa5uEzRjWWQjIKZtILGeKbv7SkA8OaL3zvb3vTRND6QM-_tPshsD9XdAn41oC2goMKgnsghLoVChjv1yWDFW4W7tyRQ8oHfbKNYNrSvXEmrggqgep2D5enXvQyhTBOydhx85p4_9P6-6wI9arssfIMj_pW3HAoEGRDbVXrk3oTo8JgjtbQmVBw_2lwmyI1sJjn2R6fPA9GwzD4iaiivlkC5kAkkI1uvEPhCE-pgcp7q6ZYZv1mTioovQ1L2la0TgfVmhN0XEGwlJhnt7soLM8QxzMIJIs8HHRQWoBgdtf-pEBLQfNm-yUhZ7X6-SJhcESfbRc-J0ytDrRG6buWLTSVJEzk9FNvL6DJvPdK37RYysxA6PTio2Pfl-vsuZNu8BHFtA9jd6VSLK2NDh-TfrqErcT-I74w4jbe8Czm8G00nqWAwHrD6WMMuMo4tJcLfmBZsAAcisZS2-XCqeQWoEPERktYXVYhiJ0_K0r4JiZqlG4NxjYQx4WnocnjaiPwIKrU_94xcBxH0R7XpXxdhhZd3ZoaSYfuXuz8mW0n_xfKX3UcjD7Zya2DOk_aP0sfZQl8kx0gvNKxESd7AvFmARzwhzjkbAK-_37EVqdSlHKqBhuEmIte2Ud2JldZNAxNJbT2BTxBhBGDV4m9x8n7t2ICeTk96jtiYsZg1mGJKqRIDKDXNo4KYlBYRQGjJrLQpDV_mhTRBkZ_cbZXqsBuP_ZDlDrp6R8cvdjdYh0fIFbJNQSU_EobVtLqe9iDE6g143G1BhYIhhLwt6AWeZn4hCLzXPC4z41Y7ND9OsG2z50W18F-7gULhZ6238xq1CGAl-Xd4e6Jtr4KUt3WdUs_kcp_FcSUTOAbNN-0EauXMnLcZKtwTlXbg3QeeH97UUWb0lblJAx0mDTxDOJgHSv3JfV47IMJgQY6IMuT4DhN4d-xVkUi4IUIN8eHFelDG_Mp-vKx-s8_NZG8cmd7JP_-y6YYZsaz1YhzO7_mraDpjopa2KXezg0_ZYTrQsouS3xF7c4B1hTFnAcy-YAC53CDL1butON1K6KmnR-OKFmJ9KRCTLQeLRTUAdj1ZiQYGydkj0TqyWEBcqnn77FaM-H1p3Il9tASZZfuUiAPrAKUrzQKF0F6AK0WBmqIhRX-f-4dW4DVUDIYUGeyA-xL-tMWR4X4jHwjRf2HhsAVIX8YpiJjTcJwWkJ3AtkhcbLCauChbBm8bB0ifRyK6a3usl048J6YMyGtwTSUfYuHVmhaMRr3G7PA52Sxzx5JdxFcAj8fxu6XFgBMoFdLzfnEu9YCOl42GX4v8vrIB_xL0nXIuge0GWa9-3tmfJdNxWbxbPf7PLorvGH2cuQL-AiCgC-V6jN-AXVUGvKTp-HjwWY5Brh_fml78wybOh4cCyK3c2Hpmq7lVHbYS1NKXgs-dUnlVYWlf62S85XU5Kd4zA7omLq_SkRZ5bkMXMhNq9Pil-_9VzLUC2Atoj_cNot3B6dy78KYupAAoBBAIPAwYEAgUBBgkHAwgAgwMEBpgcAAECAwQFBhgYGBkYGhgdGB4YHxggGCEYIhgjGCQYJRgmGCcYKBgsGC0YLhg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2672
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:82:13)"
              }
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:47631d4a-7034-4207-85c6-1a88b67e270a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:33:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:95:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:0df1a90e-7a21-43a0-b22e-42dced1ecd7f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:050d3a8a-39b6-463c-b6ed-218e483bacb2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:56b00f5e-dd78-4f4b-98fb-1d39db920997",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 473,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:ad006555-910d-40da-ab21-f3e74b034820",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:e9a3d4a3-ec01-44f2-a94d-c62781a847d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:fba67bf9-2e7f-4f2a-b296-635d6681dc10",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:70c76147-258c-4c51-a7f7-5df39228b736",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            // intentionally modify `credentialSubject` ID\n            credential.credentialSubject.id = 'urn:invalid';\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:b7aea490-214f-41f5-96f0-51b385584ea9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:068c3373-9d8b-4adc-8cbc-47e63ec556a4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:33:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:181:11)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Gzq-5OmhcHXZnG0cykeDr",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:3d23b045-4509-49da-99d5-ec9a5e0ab4e5"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ifKnIUQUVi5hZpRpaaASZ",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:4052c6be-8fae-4a4e-861c-4d92b99bcbdb",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with a bbs-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:73f64fad-07d1-4a82-b77a-3473f56ac6eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 465,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:2d4daae2-9bd1-41c4-9ab9-f53452c74239",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:2f3303b2-07ad-47a6-ae1e-0ba4ceebe8d2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 717,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:27c693b1-e0e0-4ef0-86ad-bb9c824bf2e4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMIHUslO1OlGV089kvw-C1GtTSmUVVsubvAMN2TqfLJq7kIjneKodHuLJYMOUgQFFu43TbCkj6jPWzLbcgWH8vPrzlSkFpM1hNoDNBewzD3EfUPhpoRnkALcezOXBQISG0azn43SRPFHxLIKs5Gbqkx_QLG4WfqcK-4VTTPPcVdxsDWElwOj1P_yHjAHCxDEYvhCHS1ivCYedvyOReRB1J1s7IXopu6RjuyNtttU_Vg3ADzbxssPh1Rqmw3zizae4hJTmIikL4wIbvMm-xtOJLocwy-bvzU0AuE3YJP6dE9K9QgyXC8mnyallQbh4-Ma_vwn6p4t37IX99vx6xSsjC37E4qs3hyf5Qe9qY9_nrfJEbLPBrMuOhm3qXAvzeHBYpzNX2YyHEpEdoATcrdZ9gxewAA8BCwIKAwQEDAUCBgEHAAgJCQgKDgsNDAMNBg4HDwWDFhcYGZg3AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCYYJxgoGCkYKhgrGCwYLRguGC8YMBgxGDIYMxg0GDUYNhg3QA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMIHUslO1OlGV089kvw-C1GtTSmUVVsubvAMN2TqfLJq7kIjneKodHuLJYMOUgQFFu43TbCkj6jPWzLbcgWH8vPrzlSkFpM1hNoDNBewzD3EfUPhpoRnkALcezOXBQISG0azn43SRPFHxLIKs5Gbqkx_QLG4WfqcK-4VTTPPcVdxsDWElwOj1P_yHjAHCxDEYvhCHS1ivCYedvyOReRB1J1s7IXopu6RjuyNtttU_Vg3ADzbxssPh1Rqmw3zizae4hJTmIikL4wIbvMm-xtOJLocwy-bvzU0AuE3YJP6dE9K9QgyXC8mnyallQbh4-Ma_vwn6p4t37IX99vx6xSsjC37E4qs3hyf5Qe9qY9_nrfJEbLPBrMuOhm3qXAvzeHBYpzNX2YyHEpEdoATcrdZ9gxewAA8BCwIKAwQEDAUCBgEHAAgJCQgKDgsNDAMNBg4HDwWDFhcYGZg3AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCYYJxgoGCkYKhgrGCwYLRguGC8YMBgxGDIYMxg0GDUYNhg3QA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2670
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:71:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:bec50c1d-afa5-4857-9039-f67ab37f56a1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KhEGNK_nSdETuAcnmQl5-aXUOXsJrGMUwgnwVohpYfnixHW-YZH8AMhq7dJQ-XhTaKLtSAt5X2UY5DeW-zRv8yvpqoVPmZI6wIBqNQ6J_oWoao_NALhro0rrDCygi9ab5hxionWR6LlNRuPSrtgCfro127t12m1jfVhlT5GjqRPI5G-_8Ar-gCfj-MMD2L7XgEbjNSZWlW4gLpPOGj1HoFzXa2lrSQIS4fQbvcXH3mjO0pLUnlPwm7euGK1z17bBkB0X78oG2wDHLfE9aX2zewAas4bC0XSRv82dBpQA3dLasKxxs89kHG3z_81l_nW2EgWkOAbceAPRbgqEKNi97ZUUHBUZ6G-71dSSKsvyNhvUUDEzU-_9cCzyndqUUMl_FA-KHLczY0BP781b3cbTQVJjc7IyPN9ts7gcYYasRRaBKk0zW9F1RQl8-VHwkriHWsCeujHzx89Pbpf4265ROvfkLex0fkGD5TMowUuUs0Canekt7BOM6Nqw_ndWgaUBDZIfmXRNDCLXikKVn1LG1QTQ84xxbAfI8kmc81fSTz8wZHf5SkFwQXUSl8Hv_bysWabh6ziw283kSrWS8b1SuybffYXOW1Pugm1CxYNg9pdXJoVMASl4IqXugeMIuMEZ3kTwu8kwbeaNKymIACPa4Jz0g2Ma7OiRDQC85rYvB5X_HWKgW4_JdE49cFMU0Oj7WAFVv0OISsWoNeEVBPPt2f5lho7VGwzcLvUPXwVKKOCKmsYThRx-XAymK_NeTR06i7lj9HE91Pdg1ehg-xHYaBWdzblxAIkVNYq_TbtvKyRYMrberJZDNIXwdgxCDp7LzHcnm32i0As9w7X572MzkiTndjGCNNf7FvHMzYIQAHoXsm6mdQrWWwoDY0d1xL1S8iZr7iw5UJd_D3XUpjBoKJic3ErFt6B5zNkFmzwK3cKgPPqbBKHJJf0N4fQBBFpgmVCeLQ5gXcKRD1_OT5FxcGP0r_KjzeNW3Jzpw0IOk4eDApFUcAzARyscwwVvJ5UJm7asWWxjTSbRyaZOAUcyDA2Jb67SILKeCTKQ_LqTeJCt5hUGov4_aqRBPF_TS_tuCfbuNcRklGPmFwOJDc_iFzShoDrmOruFf-OC_bB9DP2cZMLSPBV4ZLdtz-h-j_kbXqRJIfBEECl6hCnzIj4WfovKjzBqHJ_on2m5MSTtgTdtyPr2JArpOB52YB_CFG6vT01faMlg5XwAzx02TV_QEAC-2QP2HBmrevAEH67s0WZSK5kEBWJvtBe7xcuOJ0udYaopGqLIcYeidNM8L0GYNurAAQBAgIPAwwEDQUGBgEHBQgACQ4KCYMYGxgcGB6YIgABAgMEBQwNDhAREhUWFxgYGBkYGhgbGBwYHRggGCEYIxgoGCkYKhgrGCwYLRguGDUYNhg3QA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KhEGNK_nSdETuAcnmQl5-aXUOXsJrGMUwgnwVohpYfnixHW-YZH8AMhq7dJQ-XhTaKLtSAt5X2UY5DeW-zRv8yvpqoVPmZI6wIBqNQ6J_oWoao_NALhro0rrDCygi9ab5hxionWR6LlNRuPSrtgCfro127t12m1jfVhlT5GjqRPI5G-_8Ar-gCfj-MMD2L7XgEbjNSZWlW4gLpPOGj1HoFzXa2lrSQIS4fQbvcXH3mjO0pLUnlPwm7euGK1z17bBkB0X78oG2wDHLfE9aX2zewAas4bC0XSRv82dBpQA3dLasKxxs89kHG3z_81l_nW2EgWkOAbceAPRbgqEKNi97ZUUHBUZ6G-71dSSKsvyNhvUUDEzU-_9cCzyndqUUMl_FA-KHLczY0BP781b3cbTQVJjc7IyPN9ts7gcYYasRRaBKk0zW9F1RQl8-VHwkriHWsCeujHzx89Pbpf4265ROvfkLex0fkGD5TMowUuUs0Canekt7BOM6Nqw_ndWgaUBDZIfmXRNDCLXikKVn1LG1QTQ84xxbAfI8kmc81fSTz8wZHf5SkFwQXUSl8Hv_bysWabh6ziw283kSrWS8b1SuybffYXOW1Pugm1CxYNg9pdXJoVMASl4IqXugeMIuMEZ3kTwu8kwbeaNKymIACPa4Jz0g2Ma7OiRDQC85rYvB5X_HWKgW4_JdE49cFMU0Oj7WAFVv0OISsWoNeEVBPPt2f5lho7VGwzcLvUPXwVKKOCKmsYThRx-XAymK_NeTR06i7lj9HE91Pdg1ehg-xHYaBWdzblxAIkVNYq_TbtvKyRYMrberJZDNIXwdgxCDp7LzHcnm32i0As9w7X572MzkiTndjGCNNf7FvHMzYIQAHoXsm6mdQrWWwoDY0d1xL1S8iZr7iw5UJd_D3XUpjBoKJic3ErFt6B5zNkFmzwK3cKgPPqbBKHJJf0N4fQBBFpgmVCeLQ5gXcKRD1_OT5FxcGP0r_KjzeNW3Jzpw0IOk4eDApFUcAzARyscwwVvJ5UJm7asWWxjTSbRyaZOAUcyDA2Jb67SILKeCTKQ_LqTeJCt5hUGov4_aqRBPF_TS_tuCfbuNcRklGPmFwOJDc_iFzShoDrmOruFf-OC_bB9DP2cZMLSPBV4ZLdtz-h-j_kbXqRJIfBEECl6hCnzIj4WfovKjzBqHJ_on2m5MSTtgTdtyPr2JArpOB52YB_CFG6vT01faMlg5XwAzx02TV_QEAC-2QP2HBmrevAEH67s0WZSK5kEBWJvtBe7xcuOJ0udYaopGqLIcYeidNM8L0GYNurAAQBAgIPAwwEDQUGBgEHBQgACQ4KCYMYGxgcGB6YIgABAgMEBQwNDhAREhUWFxgYGBkYGhgbGBwYHRggGCEYIxgoGCkYKhgrGCwYLRguGDUYNhg3QA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2671
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:8a0b8ef3-c1bc-4c1b-98bd-249e8f4ef5fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkIAIhtUZrwmtEKr3J1xo-aR_lNgLjWqJ_zFDKgi9jYicHuZEzhffD8aayqAIgOqjfa5uEzRjWWQjIKZtILGeKbv7SkA8OaL3zvb3vTRND6QM-_tPshsD9XdAn41oC2goMKgnsghLoVChjv1yWDFW4W7tyRQ8oHfbKNYNrSvXEmrggqgep2D5enXvQyhTBOydhx85p4_9P6-6wI9arssfIMj_pW3HAoEGRDbVXrk3oTo8JgjtbQmVBw_2lwmyI1sJjn2R6fPA9GwzD4iaiivlkC5kAkkI1uvEPhCE-pgcp7q6ZYZv1mTioovQ1L2la0TgfVmhN0XEGwlJhnt7soLM8QxzMIJIs8HHRQWoBgdtf-pEBLQfNm-yUhZ7X6-SJhcESfbRc-J0ytDrRG6buWLTSVJEzk9FNvL6DJvPdK37RYysxA6PTio2Pfl-vsuZNu8BHFtA9jd6VSLK2NDh-TfrqErcT-I74w4jbe8Czm8G00nqWAwHrD6WMMuMo4tJcLfmBZsAAcisZS2-XCqeQWoEPERktYXVYhiJ0_K0r4JiZqlG4NxjYQx4WnocnjaiPwIKrU_94xcBxH0R7XpXxdhhZd3ZoaSYfuXuz8mW0n_xfKX3UcjD7Zya2DOk_aP0sfZQl8kx0gvNKxESd7AvFmARzwhzjkbAK-_37EVqdSlHKqBhuEmIte2Ud2JldZNAxNJbT2BTxBhBGDV4m9x8n7t2ICeTk96jtiYsZg1mGJKqRIDKDXNo4KYlBYRQGjJrLQpDV_mhTRBkZ_cbZXqsBuP_ZDlDrp6R8cvdjdYh0fIFbJNQSU_EobVtLqe9iDE6g143G1BhYIhhLwt6AWeZn4hCLzXPC4z41Y7ND9OsG2z50W18F-7gULhZ6238xq1CGAl-Xd4e6Jtr4KUt3WdUs_kcp_FcSUTOAbNN-0EauXMnLcZKtwTlXbg3QeeH97UUWb0lblJAx0mDTxDOJgHSv3JfV47IMJgQY6IMuT4DhN4d-xVkUi4IUIN8eHFelDG_Mp-vKx-s8_NZG8cmd7JP_-y6YYZsaz1YhzO7_mraDpjopa2KXezg0_ZYTrQsouS3xF7c4B1hTFnAcy-YAC53CDL1butON1K6KmnR-OKFmJ9KRCTLQeLRTUAdj1ZiQYGydkj0TqyWEBcqnn77FaM-H1p3Il9tASZZfuUiAPrAKUrzQKF0F6AK0WBmqIhRX-f-4dW4DVUDIYUGeyA-xL-tMWR4X4jHwjRf2HhsAVIX8YpiJjTcJwWkJ3AtkhcbLCauChbBm8bB0ifRyK6a3usl048J6YMyGtwTSUfYuHVmhaMRr3G7PA52Sxzx5JdxFcAj8fxu6XFgBMoFdLzfnEu9YCOl42GX4v8vrIB_xL0nXIuge0GWa9-3tmfJdNxWbxbPf7PLorvGH2cuQL-AiCgC-V6jN-AXVUGvKTp-HjwWY5Brh_fml78wybOh4cCyK3c2Hpmq7lVHbYS1NKXgs-dUnlVYWlf62S85XU5Kd4zA7omLq_SkRZ5bkMXMhNq9Pil-_9VzLUC2Atoj_cNot3B6dy78KYupAAoBBAIPAwYEAgUBBgkHAwgAgwMEBpgcAAECAwQFBhgYGBkYGhgdGB4YHxggGCEYIhgjGCQYJRgmGCcYKBgsGC0YLhg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkIAIhtUZrwmtEKr3J1xo-aR_lNgLjWqJ_zFDKgi9jYicHuZEzhffD8aayqAIgOqjfa5uEzRjWWQjIKZtILGeKbv7SkA8OaL3zvb3vTRND6QM-_tPshsD9XdAn41oC2goMKgnsghLoVChjv1yWDFW4W7tyRQ8oHfbKNYNrSvXEmrggqgep2D5enXvQyhTBOydhx85p4_9P6-6wI9arssfIMj_pW3HAoEGRDbVXrk3oTo8JgjtbQmVBw_2lwmyI1sJjn2R6fPA9GwzD4iaiivlkC5kAkkI1uvEPhCE-pgcp7q6ZYZv1mTioovQ1L2la0TgfVmhN0XEGwlJhnt7soLM8QxzMIJIs8HHRQWoBgdtf-pEBLQfNm-yUhZ7X6-SJhcESfbRc-J0ytDrRG6buWLTSVJEzk9FNvL6DJvPdK37RYysxA6PTio2Pfl-vsuZNu8BHFtA9jd6VSLK2NDh-TfrqErcT-I74w4jbe8Czm8G00nqWAwHrD6WMMuMo4tJcLfmBZsAAcisZS2-XCqeQWoEPERktYXVYhiJ0_K0r4JiZqlG4NxjYQx4WnocnjaiPwIKrU_94xcBxH0R7XpXxdhhZd3ZoaSYfuXuz8mW0n_xfKX3UcjD7Zya2DOk_aP0sfZQl8kx0gvNKxESd7AvFmARzwhzjkbAK-_37EVqdSlHKqBhuEmIte2Ud2JldZNAxNJbT2BTxBhBGDV4m9x8n7t2ICeTk96jtiYsZg1mGJKqRIDKDXNo4KYlBYRQGjJrLQpDV_mhTRBkZ_cbZXqsBuP_ZDlDrp6R8cvdjdYh0fIFbJNQSU_EobVtLqe9iDE6g143G1BhYIhhLwt6AWeZn4hCLzXPC4z41Y7ND9OsG2z50W18F-7gULhZ6238xq1CGAl-Xd4e6Jtr4KUt3WdUs_kcp_FcSUTOAbNN-0EauXMnLcZKtwTlXbg3QeeH97UUWb0lblJAx0mDTxDOJgHSv3JfV47IMJgQY6IMuT4DhN4d-xVkUi4IUIN8eHFelDG_Mp-vKx-s8_NZG8cmd7JP_-y6YYZsaz1YhzO7_mraDpjopa2KXezg0_ZYTrQsouS3xF7c4B1hTFnAcy-YAC53CDL1butON1K6KmnR-OKFmJ9KRCTLQeLRTUAdj1ZiQYGydkj0TqyWEBcqnn77FaM-H1p3Il9tASZZfuUiAPrAKUrzQKF0F6AK0WBmqIhRX-f-4dW4DVUDIYUGeyA-xL-tMWR4X4jHwjRf2HhsAVIX8YpiJjTcJwWkJ3AtkhcbLCauChbBm8bB0ifRyK6a3usl048J6YMyGtwTSUfYuHVmhaMRr3G7PA52Sxzx5JdxFcAj8fxu6XFgBMoFdLzfnEu9YCOl42GX4v8vrIB_xL0nXIuge0GWa9-3tmfJdNxWbxbPf7PLorvGH2cuQL-AiCgC-V6jN-AXVUGvKTp-HjwWY5Brh_fml78wybOh4cCyK3c2Hpmq7lVHbYS1NKXgs-dUnlVYWlf62S85XU5Kd4zA7omLq_SkRZ5bkMXMhNq9Pil-_9VzLUC2Atoj_cNot3B6dy78KYupAAoBBAIPAwYEAgUBBgkHAwgAgwMEBpgcAAECAwQFBhgYGBkYGhgdGB4YHxggGCEYIhgjGCQYJRgmGCcYKBgsGC0YLhg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 2672
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:47:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:82:13)"
              }
            }
          ]
        },
        {
          "id": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:47631d4a-7034-4207-85c6-1a88b67e270a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:33:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:95:11)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:0df1a90e-7a21-43a0-b22e-42dced1ecd7f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:050d3a8a-39b6-463c-b6ed-218e483bacb2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:56b00f5e-dd78-4f4b-98fb-1d39db920997",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 473,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:ad006555-910d-40da-ab21-f3e74b034820",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:e9a3d4a3-ec01-44f2-a94d-c62781a847d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:fba67bf9-2e7f-4f2a-b296-635d6681dc10",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:70c76147-258c-4c51-a7f7-5df39228b736",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            // intentionally modify `credentialSubject` ID\n            credential.credentialSubject.id = 'urn:invalid';\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:b7aea490-214f-41f5-96f0-51b385584ea9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "OH_mLxl9ta8Zkd-8UrY19",
              "ctx": null,
              "_testId": "urn:uuid:068c3373-9d8b-4adc-8cbc-47e63ec556a4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:33:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:181:11)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: ['/credentialSubject/id'],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "e7Z2kuUNTP9beudRUGcut",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20449,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 497,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P2LXW5xqDPa5iRXGX5uuO",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:c8ef7aa4-d4af-470c-b82b-dc8f30d018b7",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "e7Z2kuUNTP9beudRUGcut",
              "ctx": null,
              "_testId": "urn:uuid:ad0a41ab-4bb1-4097-823e-e6b47e8852df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-di-bbs-test-suite",
    "subtitle": "Interoperability test suite for BBS Data Integrity cryptosuite.",
    "github": "https://github.com/w3c/vc-di-bbs-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-bbs-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity BBS Interoperability Report 1.0",
  "stats": [
    "Tests passed 49/59 83%",
    "Tests failed 10/59 17%",
    "Failures 10",
    "Tests skipped 1",
    "Total tests 60"
  ]
}