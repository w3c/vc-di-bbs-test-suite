{
  "matrices": [
    {
      "title": "Data Integrity (bbs-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:06720a2e-e988-4df4-9336-4eb75c510275",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b9d3e539-438a-4ee9-949b-3fbee716795e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:c54d1e96-7861-40df-8124-90a59f2bab60",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:46afa3cc-9dec-4b0f-821d-30d400eb2518",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b23a4998-799b-4bd3-ac25-f48d978dc4f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:221ee52c-6d12-4aa0-8f95-8023b7f73556",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:e6b1769f-ffe0-492f-9190-7ad005b787a1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b9792c8b-11cb-4212-9d51-19c2e50d3d69",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:f3b1fa5b-fbfd-4c4f-aafd-d381dbfe6a1c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:0d0827ca-561e-4085-b4c6-c9c58060414b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:87dd1b10-7715-490b-b3a7-b7c91b216d42",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:413777e7-f4cd-4ff0-bc16-54c1da262da8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:bb27c21a-2684-41b1-9bcc-fd68ca12e91f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:c5060d45-f8a8-416d-820c-a565037ebc48",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:6a633eb1-6d00-465a-90a2-852b61bca124",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:0a6be0aa-c62f-4a2d-98ad-5a439971b2fe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 851,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BtS8PZtJUrBmZkgQ3n-KR",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:967a4e9f-8227-4f83-996b-ce1727ca477a"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:664f8d83-d8dd-4c81-af75-aa5c67f7738e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:745d1ccf-3ba6-4616-9cb9-c424047cd87e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:5cffa905-e6e4-43a3-8638-248f33f541d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:d247832a-3b5e-4f11-bf00-8edeca42a2ed",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:2e582cbd-ef51-4a93-ad58-ffdcc21aba37",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:b14b41b6-84b1-4783-ba26-21526995847d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:6dc790d1-b427-4578-8b25-ecc907d1b746",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:7654cb3a-00c1-46f5-934c-1a560066e3b0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:b7e957f9-b99f-4716-b5d5-4b82a630bc60",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:3f758347-538a-478e-b64e-2b8fcdb7c20a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:bca3fd24-51a5-4508-b40f-8ddc2f6b7439",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:ca319402-9acf-4848-8b8f-381baf67f950",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:3ac28921-d9c0-471e-b76e-bcb7920de4b2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 416,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:f5aa4dd5-57b9-4c42-9828-9b93e9886d49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:ad3acebd-563a-4a08-b854-56bdb088bdd8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:8cb4f135-c625-4d4f-b0d0-ab67432d432f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 465,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BtS8PZtJUrBmZkgQ3n-KR",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:8e3befc8-9cce-4e62-b923-57ee109a7ce3"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6929d4ee-290a-4e91-a434-9d801195c2dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:8b3a8cf3-d696-4cf8-a20d-8607045e5c85",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:583254b5-d3bf-4af7-b094-8f99d581483c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:74f70ffa-1a82-4213-8585-d165660c385d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8258,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:aedddb3b-a969-4a2a-b35b-bea1b9207eb8",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:0a058ea3-df7a-4709-81ff-0eee8789f85e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:532c28a6-0aa4-4b86-a4af-800dad98edfa",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:e44ae26c-d266-4155-a69b-c466ccd8abeb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:434f3a23-be64-496c-b9d7-f6a1246c0b2d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8262,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:11bbd547-6e93-40d1-a97b-17119dce6f9a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6fadd921-46e3-4293-b397-9461f304470d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:11e47039-3dc9-4650-a2f9-7ee7dfd2dd13",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6c9eb402-1837-4b96-a5d2-9ed83243e42d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 874,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:7da4cd26-af2b-46c5-af61-2a63f7272f20",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 418,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:63c58bf3-c73a-4e9f-b37d-47321c107b1d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:69d9e73e-9d20-4e89-8cb6-7c09ae00319e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1197,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BtS8PZtJUrBmZkgQ3n-KR",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:2c8c2b11-1810-45db-83ca-e790f0c6b24b"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:03a88549-4226-4783-a268-f37be976346e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:f19dd963-aa80-448b-84c2-38fc810a5dd1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:2f139a32-ce58-48b5-a297-025852d360c6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:da0d5db1-1dcb-48c7-9b3d-d46b7dc8c14d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:3330716d-827a-49ba-9762-be1f57b66fef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:0d7bf043-ffa2-4fbb-827a-8e9be0b32b00",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:77abd1ba-473e-48aa-8835-b68a4e9ae04c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:e967f86e-dfae-4f8c-a594-ba10c48c2698",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:05c0c095-021b-4ab4-adb3-7ef92ee159ae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:024303c0-8cf5-464d-884d-6d16f8ad491e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:dcc73f3e-3ba0-45fa-985f-5879e47bdc98",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:ff4cdb9d-859f-48a2-9187-2d8f57fa59e9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:0cf8fc04-0cfa-42cf-a502-1ad03635d404",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:095de66e-6935-4c7d-9a2e-930cb6e1246d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:9bf79adf-09db-4968-a775-41b1a0be4813",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:9d58fa53-05be-4f34-a643-2ef3e7d85b1b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BtS8PZtJUrBmZkgQ3n-KR",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:3a6f967b-ee3e-485d-b6a0-ffae968ffa29"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:41567d1f-956b-4b8b-8294-9b762922621f",
              "cell": {
                "columnId": "Trential",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:3d89d928-2bab-4582-8fb7-67a2e384ac32",
              "cell": {
                "columnId": "Trential",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:64f82144-2cfa-4538-b5f0-6b0c7c50d984",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:fde6934b-fa45-4322-939c-4ce03cb36b7d",
              "cell": {
                "columnId": "Trential",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:7da00d89-c5bf-4700-8bc2-2c01774bfb77",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:b4aa5d28-39b0-4ae3-80d9-cf853a0eefd8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:4a9011b3-5bd4-4ecf-a5ba-23d44afb318a",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:ce021b4a-88aa-4319-af9e-8eddc499ec2d",
              "cell": {
                "columnId": "Trential",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:f2b6fc9e-7720-43d7-a76b-0d6782201c91",
              "cell": {
                "columnId": "Trential",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:56cea621-0f47-40fe-92a2-ba599e2f9645",
              "cell": {
                "columnId": "Trential",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:49e29ef2-7f57-4605-87d0-3d7405f060ad",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:0a4208b0-6939-4e8a-bd68-60ce1d62f566",
              "cell": {
                "columnId": "Trential",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:0409591b-f794-432e-a31b-e0d7bad96ed4",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1158,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:aa173ddf-3807-4205-bac6-f0b916493945",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12768,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:8a8699b6-6fc0-434e-9a8a-e4636b1b97b8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:d082a70b-1b99-4caf-ab3b-c4856c78314b",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1766,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BtS8PZtJUrBmZkgQ3n-KR",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:70db33d6-31dc-49a7-a229-35f01b017d94"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-r2WQ2brUrRP4R3vOknrv",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:edf8f3d0-a259-45b5-b608-190f7bcb01d9",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:06720a2e-e988-4df4-9336-4eb75c510275",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:664f8d83-d8dd-4c81-af75-aa5c67f7738e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6929d4ee-290a-4e91-a434-9d801195c2dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:03a88549-4226-4783-a268-f37be976346e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:41567d1f-956b-4b8b-8294-9b762922621f",
              "cell": {
                "columnId": "Trential",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b9d3e539-438a-4ee9-949b-3fbee716795e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:745d1ccf-3ba6-4616-9cb9-c424047cd87e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:8b3a8cf3-d696-4cf8-a20d-8607045e5c85",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:f19dd963-aa80-448b-84c2-38fc810a5dd1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:3d89d928-2bab-4582-8fb7-67a2e384ac32",
              "cell": {
                "columnId": "Trential",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:c54d1e96-7861-40df-8124-90a59f2bab60",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:5cffa905-e6e4-43a3-8638-248f33f541d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:583254b5-d3bf-4af7-b094-8f99d581483c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:2f139a32-ce58-48b5-a297-025852d360c6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:64f82144-2cfa-4538-b5f0-6b0c7c50d984",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific type of proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:46afa3cc-9dec-4b0f-821d-30d400eb2518",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:d247832a-3b5e-4f11-bf00-8edeca42a2ed",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:74f70ffa-1a82-4213-8585-d165660c385d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8258,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:da0d5db1-1dcb-48c7-9b3d-d46b7dc8c14d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:fde6934b-fa45-4322-939c-4ce03cb36b7d",
              "cell": {
                "columnId": "Trential",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b23a4998-799b-4bd3-ac25-f48d978dc4f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:2e582cbd-ef51-4a93-ad58-ffdcc21aba37",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:aedddb3b-a969-4a2a-b35b-bea1b9207eb8",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:3330716d-827a-49ba-9762-be1f57b66fef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:7da00d89-c5bf-4700-8bc2-2c01774bfb77",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:221ee52c-6d12-4aa0-8f95-8023b7f73556",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:b14b41b6-84b1-4783-ba26-21526995847d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:0a058ea3-df7a-4709-81ff-0eee8789f85e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:0d7bf043-ffa2-4fbb-827a-8e9be0b32b00",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:b4aa5d28-39b0-4ae3-80d9-cf853a0eefd8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:e6b1769f-ffe0-492f-9190-7ad005b787a1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:6dc790d1-b427-4578-8b25-ecc907d1b746",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:532c28a6-0aa4-4b86-a4af-800dad98edfa",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:77abd1ba-473e-48aa-8835-b68a4e9ae04c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:4a9011b3-5bd4-4ecf-a5ba-23d44afb318a",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If specified (proof.cryptosuite), its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:b9792c8b-11cb-4212-9d51-19c2e50d3d69",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:7654cb3a-00c1-46f5-934c-1a560066e3b0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:e44ae26c-d266-4155-a69b-c466ccd8abeb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:e967f86e-dfae-4f8c-a594-ba10c48c2698",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:ce021b4a-88aa-4319-af9e-8eddc499ec2d",
              "cell": {
                "columnId": "Trential",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:f3b1fa5b-fbfd-4c4f-aafd-d381dbfe6a1c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:b7e957f9-b99f-4716-b5d5-4b82a630bc60",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:434f3a23-be64-496c-b9d7-f6a1246c0b2d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8262,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:05c0c095-021b-4ab4-adb3-7ef92ee159ae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:f2b6fc9e-7720-43d7-a76b-0d6782201c91",
              "cell": {
                "columnId": "Trential",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:0d0827ca-561e-4085-b4c6-c9c58060414b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:3f758347-538a-478e-b64e-2b8fcdb7c20a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:11bbd547-6e93-40d1-a97b-17119dce6f9a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:024303c0-8cf5-464d-884d-6d16f8ad491e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:56cea621-0f47-40fe-92a2-ba599e2f9645",
              "cell": {
                "columnId": "Trential",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:87dd1b10-7715-490b-b3a7-b7c91b216d42",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:bca3fd24-51a5-4508-b40f-8ddc2f6b7439",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6fadd921-46e3-4293-b397-9461f304470d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:dcc73f3e-3ba0-45fa-985f-5879e47bdc98",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:49e29ef2-7f57-4605-87d0-3d7405f060ad",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:413777e7-f4cd-4ff0-bc16-54c1da262da8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:ca319402-9acf-4848-8b8f-381baf67f950",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:11e47039-3dc9-4650-a2f9-7ee7dfd2dd13",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:ff4cdb9d-859f-48a2-9187-2d8f57fa59e9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:0a4208b0-6939-4e8a-bd68-60ce1d62f566",
              "cell": {
                "columnId": "Trential",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:bb27c21a-2684-41b1-9bcc-fd68ca12e91f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:3ac28921-d9c0-471e-b76e-bcb7920de4b2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 416,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:6c9eb402-1837-4b96-a5d2-9ed83243e42d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 874,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:0cf8fc04-0cfa-42cf-a502-1ad03635d404",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:0409591b-f794-432e-a31b-e0d7bad96ed4",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1158,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
          "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
          "cells": [
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:c5060d45-f8a8-416d-820c-a565037ebc48",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:f5aa4dd5-57b9-4c42-9828-9b93e9886d49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:7da4cd26-af2b-46c5-af61-2a63f7272f20",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 418,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:095de66e-6935-4c7d-9a2e-930cb6e1246d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:aa173ddf-3807-4205-bac6-f0b916493945",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12768,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:6a633eb1-6d00-465a-90a2-852b61bca124",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:ad3acebd-563a-4a08-b854-56bdb088bdd8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:63c58bf3-c73a-4e9f-b37d-47321c107b1d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:9bf79adf-09db-4968-a775-41b1a0be4813",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:8a8699b6-6fc0-434e-9a8a-e4636b1b97b8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "BVqHvkUIApMUpdqpeXkoI",
              "ctx": null,
              "_testId": "urn:uuid:0a6be0aa-c62f-4a2d-98ad-5a439971b2fe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "DbI5ExtE_lXU2uzE-UY14",
              "ctx": null,
              "_testId": "urn:uuid:8cb4f135-c625-4d4f-b0d0-ab67432d432f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "vDmzwpDiZCVmii-1RmmfH",
              "ctx": null,
              "_testId": "urn:uuid:69d9e73e-9d20-4e89-8cb6-7c09ae00319e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "tqqikJsYhm2LVGGViGGOi",
              "ctx": null,
              "_testId": "urn:uuid:9d58fa53-05be-4f34-a643-2ef3e7d85b1b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "H-_7Sjg7DkwVIU45t48i9",
              "ctx": null,
              "_testId": "urn:uuid:d082a70b-1b99-4caf-ab3b-c4856c78314b",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:55198a5b-6fec-4b1b-a119-9547387c4e89",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:d91db4af-36dd-41ee-a5a7-f9c0add06cb7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:0acc65ae-dfa8-4ff3-9f14-698503157589",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:74c948af-298f-4b65-a3ed-d34ce0af9f1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:d6081eb2-b9fa-4476-8ea0-409664a97acb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:e815df50-c9cf-4ff8-99a3-1a6701650e9b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:df3248e9-f33a-46bd-a897-95050494439c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:67a1a2a3-25b6-46b3-bd91-ded05b4fab99",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:e5a870c1-3d79-41bd-89a3-22b55a123630",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:59d06ba3-308d-4bbf-98a9-79fb367574a8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:c91ebe4b-93cd-43cc-b62e-8142bc655976",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:bedbe880-b498-427d-81ae-80c07a459ebd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 480,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Tcu6VCywo54vVZ0Se-X1N",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:a3bfeec6-39f9-46aa-82b4-7f267c9ee985"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:40350ee4-d043-4f8e-938a-5decab22c0a6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:29900e0e-3616-45c6-ab6f-aea5167a5922",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:7fadb5a9-ae77-4901-89d7-16c6ba63b154",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:a6b4830c-8686-4aa8-953a-665ad9959a4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 254,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:f3018de3-3467-472e-b45d-a3d484e5be2d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:48559375-858e-4e94-b10f-eb5e5349dded",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:725bffb8-e297-4f50-8ca0-c12447367d97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:159e5439-80dc-4ea7-b2dd-52fd6264a908",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:8b4af828-e9fa-415c-b368-57b6e1bf83c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:2eed0585-3596-482a-ba5e-db346201dff3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:577ff91d-cd57-417c-bdcb-75bcaa0674aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:09a44a74-37cf-4a83-a9a0-31b914ea7849",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 365,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Tcu6VCywo54vVZ0Se-X1N",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:543a3ee0-adfe-487d-9d1d-eca63795a91b"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:fba8b27a-51d8-4c9a-8683-1fd2ec822750",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:6daadc66-145c-41f1-bc2c-fe3fec44ca97",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:dbaaa60f-9b8c-4d73-8956-53db5c4d3be0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:7435308c-7f5d-4675-a1d2-32219dc2101a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:81f2c38b-7588-49e7-9129-08a3b8e6562b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:369d3319-3432-47af-9ca0-530f75a2af99",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:2213297c-73a6-46d4-abd0-e979011732e9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:6524c04e-0b21-4839-84a1-f1175ae61190",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:f89cb19f-71bf-4bc1-a50a-aeae91338bb5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:d8b6e560-4b72-4fb2-b9e8-5e0767518e73",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:8a375b07-1540-4d6f-8bb4-42c1d6045a3c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:419b4257-2e3c-4f0c-a797-f50f00f8c345",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 885,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Tcu6VCywo54vVZ0Se-X1N",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:b86d7915-c0b5-4fb7-a8f6-beac7698398d"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:2c5e12ea-3d8f-4678-8b26-d49191412dbe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:938202c3-b7ea-4626-8b96-4919903804b0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:e00cebdb-ed5b-4ac1-954b-a3a170561228",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:f00c806f-b8a4-4286-a5fb-2441623bfefc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:651186fe-4a74-4222-9c73-777cc1bc8393",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:ced87361-1269-4b9b-adaa-2eb3546d2914",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:3032c30e-b946-455c-8075-aecd298066cf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:0ce13596-dda4-42c2-990b-4d0683bcd135",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:d8fc0f8f-79d9-4416-865c-445775c59dfb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:28203a75-198b-43dc-b7ea-2054e1e79eab",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:d65ae46d-407a-4d06-bbe6-8de5dbbc83f3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:b2324f72-fb4c-4104-8d0e-2acf4d86c7e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15258,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Tcu6VCywo54vVZ0Se-X1N",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:149adc6e-c10d-46ad-9ed5-4d0814e697b7"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:a5cf5b22-1fbb-4ea3-8c6b-632bd4de936d",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:390a357b-5b5f-406b-89b4-50f617c6d0b3",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:3c53a935-6850-446a-bb98-550af8325b16",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4ca186e1-186d-4f5d-acfa-56643f3c73d5",
              "cell": {
                "columnId": "Trential",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4e11c7fb-4328-4210-a437-f374c23884e4",
              "cell": {
                "columnId": "Trential",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:0c07524b-db3b-4e2b-8bbd-c8fd16fa0a81",
              "cell": {
                "columnId": "Trential",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4e7cb660-4895-4829-a1f3-6234038f1028",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:1eef1721-4eda-422b-ae87-97049827f0b0",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:3d0887cb-40c4-44e7-9d3a-68bbe9278791",
              "cell": {
                "columnId": "Trential",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:1fe1656d-7111-4933-ba9a-64662695e625",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:d444230f-a700-4b8f-b1f2-3baacf811228",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:bb3cacbb-9975-4e36-991d-0b3db94d309a",
              "cell": {
                "columnId": "Trential",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1088,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Tcu6VCywo54vVZ0Se-X1N",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:ce533598-e560-4b80-9c11-69935f773e02"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "4Fo63F9XJJ9xci7UNp5nI",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:c21b692f-51a3-4924-9ae8-cdbdd8938ea3",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "The cryptosuite property of the proof MUST be bbs-2023.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:55198a5b-6fec-4b1b-a119-9547387c4e89",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:40350ee4-d043-4f8e-938a-5decab22c0a6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:fba8b27a-51d8-4c9a-8683-1fd2ec822750",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:2c5e12ea-3d8f-4678-8b26-d49191412dbe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:a5cf5b22-1fbb-4ea3-8c6b-632bd4de936d",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:d91db4af-36dd-41ee-a5a7-f9c0add06cb7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:29900e0e-3616-45c6-ab6f-aea5167a5922",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:6daadc66-145c-41f1-bc2c-fe3fec44ca97",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:938202c3-b7ea-4626-8b96-4919903804b0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:390a357b-5b5f-406b-89b4-50f617c6d0b3",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:0acc65ae-dfa8-4ff3-9f14-698503157589",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:7fadb5a9-ae77-4901-89d7-16c6ba63b154",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:dbaaa60f-9b8c-4d73-8956-53db5c4d3be0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:e00cebdb-ed5b-4ac1-954b-a3a170561228",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:3c53a935-6850-446a-bb98-550af8325b16",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:74c948af-298f-4b65-a3ed-d34ce0af9f1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:a6b4830c-8686-4aa8-953a-665ad9959a4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 254,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:7435308c-7f5d-4675-a1d2-32219dc2101a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:f00c806f-b8a4-4286-a5fb-2441623bfefc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4ca186e1-186d-4f5d-acfa-56643f3c73d5",
              "cell": {
                "columnId": "Trential",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The verificationMethod property of the proof MUST be a URL.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:d6081eb2-b9fa-4476-8ea0-409664a97acb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:f3018de3-3467-472e-b45d-a3d484e5be2d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:81f2c38b-7588-49e7-9129-08a3b8e6562b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:651186fe-4a74-4222-9c73-777cc1bc8393",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4e11c7fb-4328-4210-a437-f374c23884e4",
              "cell": {
                "columnId": "Trential",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:e815df50-c9cf-4ff8-99a3-1a6701650e9b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:48559375-858e-4e94-b10f-eb5e5349dded",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:369d3319-3432-47af-9ca0-530f75a2af99",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:ced87361-1269-4b9b-adaa-2eb3546d2914",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:0c07524b-db3b-4e2b-8bbd-c8fd16fa0a81",
              "cell": {
                "columnId": "Trential",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:df3248e9-f33a-46bd-a897-95050494439c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:725bffb8-e297-4f50-8ca0-c12447367d97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:2213297c-73a6-46d4-abd0-e979011732e9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:3032c30e-b946-455c-8075-aecd298066cf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:4e7cb660-4895-4829-a1f3-6234038f1028",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:67a1a2a3-25b6-46b3-bd91-ded05b4fab99",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:159e5439-80dc-4ea7-b2dd-52fd6264a908",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:6524c04e-0b21-4839-84a1-f1175ae61190",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:0ce13596-dda4-42c2-990b-4d0683bcd135",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:1eef1721-4eda-422b-ae87-97049827f0b0",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the HMAC key MUST be the same length as the digest size",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
          "cells": [
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:e5a870c1-3d79-41bd-89a3-22b55a123630",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:8b4af828-e9fa-415c-b368-57b6e1bf83c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:f89cb19f-71bf-4bc1-a50a-aeae91338bb5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:d8fc0f8f-79d9-4416-865c-445775c59dfb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:3d0887cb-40c4-44e7-9d3a-68bbe9278791",
              "cell": {
                "columnId": "Trential",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:59d06ba3-308d-4bbf-98a9-79fb367574a8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:2eed0585-3596-482a-ba5e-db346201dff3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:d8b6e560-4b72-4fb2-b9e8-5e0767518e73",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:28203a75-198b-43dc-b7ea-2054e1e79eab",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:1fe1656d-7111-4933-ba9a-64662695e625",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:c91ebe4b-93cd-43cc-b62e-8142bc655976",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:577ff91d-cd57-417c-bdcb-75bcaa0674aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:8a375b07-1540-4d6f-8bb4-42c1d6045a3c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:d65ae46d-407a-4d06-bbe6-8de5dbbc83f3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:d444230f-a700-4b8f-b1f2-3baacf811228",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
          "cells": [
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "ZtgdmGEWTGqU8QIrn7EHA",
              "ctx": null,
              "_testId": "urn:uuid:bedbe880-b498-427d-81ae-80c07a459ebd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "o2Wn46Wh6wwFsqY3D-okw",
              "ctx": null,
              "_testId": "urn:uuid:09a44a74-37cf-4a83-a9a0-31b914ea7849",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "MyWfqNM4iddcLrXJomSKE",
              "ctx": null,
              "_testId": "urn:uuid:419b4257-2e3c-4f0c-a797-f50f00f8c345",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "dYUBumrw4Jz7Eq7aQzp_O",
              "ctx": null,
              "_testId": "urn:uuid:b2324f72-fb4c-4104-8d0e-2acf4d86c7e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tagjbAcLmfP-MSqQr6cUV",
              "ctx": null,
              "_testId": "urn:uuid:bb3cacbb-9975-4e36-991d-0b3db94d309a",
              "cell": {
                "columnId": "Trential",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:21076799-07f4-49e7-b04f-eb77a1258caa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:684c7836-541d-41ca-8500-0e68b29a898b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:92073f18-e6d1-4a54-a54b-a4c8e3217047",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:b8c98355-22bc-4149-858a-19ae27f6f2aa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:71f03532-6a16-402b-839d-21a2f303e173",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:3509f04a-89d4-48dd-b8d2-7e1bd09bcd53",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:7c8f54ab-52f2-495b-adfd-d69b73700fb8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:28a1a5a1-9c5d-42d1-9a04-8ce7dc6b45e1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:587c7948-3fa8-48c8-8f7a-925b58833cbe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:0f614c8e-d614-4a7f-9d4e-46544e8ec61c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:e8a40af6-562d-420f-8d6f-3a78def4d105",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:f6aa6480-bdc4-4cbc-9269-9f4fe67574fd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 317,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RR7X-TdFebM8LctD3-i1p",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:101f7ce6-62e0-4660-84dd-e709f77fbe4c"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:32189534-68a1-47b8-849f-6d9772ce9ded",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:f1061888-6834-4445-a359-4c6769bb7fcf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:d56eb414-c9f1-4a18-b72e-ebb6873c9212",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:345ea014-33c7-4e26-8de0-5d5ac48c7b4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:0f5207dd-537f-4f33-9562-5b97242efc54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:33e845fe-1b05-4bef-86e0-12490e2fc39f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:21c33613-e05c-4613-8de7-944b4e422504",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:e5fd9ecb-69cd-4026-83a4-395839772df7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:2c3fcbf1-1697-4711-9884-72f2f07e0feb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:b7c53721-980b-47c8-9f4d-6b53ccd1cbe2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:6c1f6208-2190-4e1d-8eac-98b8403b8d0e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:eb2b3be8-6d56-4ed8-a797-1e9eddefd6fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RR7X-TdFebM8LctD3-i1p",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:c7134273-dcfb-4e2b-b053-b7b019b4946a"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:6c8a2181-cca6-48d9-95f6-4cb8bd0199ee",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:50d681a7-f8e9-444a-beec-67092b55a5fd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:886a1376-9a50-441a-a200-ecdb0645b07e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:5819f535-d0a1-44bc-949d-de555adb1d42",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:55880c73-ca1e-452b-b132-e286c84982d9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:afa2ae07-491b-462f-8eef-afb0c2dcc99d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:d0729548-44f9-47ad-bc8f-9a58690af889",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:f0378d03-01fe-4597-896d-04e898445ace",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:c018679d-24b5-48e9-b6ff-c1aacb96e744",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:873aa81f-b012-4e41-ae13-e999c14f6f17",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:37a7bca0-91b0-4ae0-9bd1-6123c2578037",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:b08d21b0-7a85-4c4b-9a60-141dd729d9b3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 272,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RR7X-TdFebM8LctD3-i1p",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:8d2b0c66-f35b-4984-82b0-7138ff01abf3"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:b4c53baf-7508-43f1-9639-bf7c7ce51927",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:7bd70f31-1490-468d-976e-f6e37c618ab7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:ca99b0ff-6c71-475b-bfef-0c1c7f7533ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:d99b9e4d-e856-42fc-be96-b8fc0c2a2a60",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:2e3a7e7b-c4fa-455a-9687-0ab589b2fb20",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:bec8bc6b-1890-4767-ba6e-397ef08b442c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:11493319-52bb-4518-91fa-c0c7dd5c17c4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:0a04406e-bc06-421e-9a73-82443cf1f2ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:79064a33-662a-4c87-9eb0-8298274b6ce1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:caf25f19-6b24-4820-a1b7-384ed1b8f712",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:36b98dce-d109-4122-a319-420c65345d94",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:d4950413-b6d4-40e5-bd06-581840120394",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RR7X-TdFebM8LctD3-i1p",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:d78a4606-6c73-4672-a9a9-b17bfc9f121b"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:d4780ac0-2846-46a4-a292-ac78ef460533",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:2992199e-99ac-42a5-a7d6-f598e15d5d2e",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:fe512c0d-3507-463b-8a24-27b4f6dae364",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:b688a216-b537-4742-906e-90319b1ffb59",
              "cell": {
                "columnId": "Trential",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:00075974-5c77-4d36-9e63-c90651568443",
              "cell": {
                "columnId": "Trential",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:e99a5719-7500-4bbf-9baa-baffb9e1b648",
              "cell": {
                "columnId": "Trential",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:5d8d7651-d680-43a0-b772-3da6499153c5",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:c9cb3b06-a66f-4f02-915b-7be2956b34b2",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:b09a2714-6a99-4545-b342-0c3631c3c903",
              "cell": {
                "columnId": "Trential",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:266f560c-38af-41d9-8071-5280c60aa285",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:4434cb9c-3c5d-43c8-b1fd-89d9a2bb9a6f",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:03e93a53-9dbd-4af5-bc9d-4797e6120188",
              "cell": {
                "columnId": "Trential",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1120,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RR7X-TdFebM8LctD3-i1p",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:891a1cfc-f039-431d-be16-a2b2b0bbd3fa"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "4Fo63F9XJJ9xci7UNp5nI",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:bfe1e8e1-f86c-4f29-8c53-0bcd649336e8",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "The cryptosuite property of the proof MUST be bbs-2023.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:21076799-07f4-49e7-b04f-eb77a1258caa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:32189534-68a1-47b8-849f-6d9772ce9ded",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:6c8a2181-cca6-48d9-95f6-4cb8bd0199ee",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:b4c53baf-7508-43f1-9639-bf7c7ce51927",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:d4780ac0-2846-46a4-a292-ac78ef460533",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:684c7836-541d-41ca-8500-0e68b29a898b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:f1061888-6834-4445-a359-4c6769bb7fcf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:50d681a7-f8e9-444a-beec-67092b55a5fd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:7bd70f31-1490-468d-976e-f6e37c618ab7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:2992199e-99ac-42a5-a7d6-f598e15d5d2e",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:92073f18-e6d1-4a54-a54b-a4c8e3217047",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:d56eb414-c9f1-4a18-b72e-ebb6873c9212",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:886a1376-9a50-441a-a200-ecdb0645b07e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:ca99b0ff-6c71-475b-bfef-0c1c7f7533ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:fe512c0d-3507-463b-8a24-27b4f6dae364",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:b8c98355-22bc-4149-858a-19ae27f6f2aa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:345ea014-33c7-4e26-8de0-5d5ac48c7b4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:5819f535-d0a1-44bc-949d-de555adb1d42",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:d99b9e4d-e856-42fc-be96-b8fc0c2a2a60",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:b688a216-b537-4742-906e-90319b1ffb59",
              "cell": {
                "columnId": "Trential",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 251,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The verificationMethod property of the proof MUST be a URL.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:71f03532-6a16-402b-839d-21a2f303e173",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:0f5207dd-537f-4f33-9562-5b97242efc54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:55880c73-ca1e-452b-b132-e286c84982d9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:2e3a7e7b-c4fa-455a-9687-0ab589b2fb20",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:00075974-5c77-4d36-9e63-c90651568443",
              "cell": {
                "columnId": "Trential",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:3509f04a-89d4-48dd-b8d2-7e1bd09bcd53",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:33e845fe-1b05-4bef-86e0-12490e2fc39f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:afa2ae07-491b-462f-8eef-afb0c2dcc99d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:bec8bc6b-1890-4767-ba6e-397ef08b442c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:e99a5719-7500-4bbf-9baa-baffb9e1b648",
              "cell": {
                "columnId": "Trential",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:7c8f54ab-52f2-495b-adfd-d69b73700fb8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:21c33613-e05c-4613-8de7-944b4e422504",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:d0729548-44f9-47ad-bc8f-9a58690af889",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:11493319-52bb-4518-91fa-c0c7dd5c17c4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:5d8d7651-d680-43a0-b772-3da6499153c5",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:28a1a5a1-9c5d-42d1-9a04-8ce7dc6b45e1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:e5fd9ecb-69cd-4026-83a4-395839772df7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:f0378d03-01fe-4597-896d-04e898445ace",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:0a04406e-bc06-421e-9a73-82443cf1f2ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:c9cb3b06-a66f-4f02-915b-7be2956b34b2",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the HMAC key MUST be the same length as the digest size",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
          "cells": [
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:587c7948-3fa8-48c8-8f7a-925b58833cbe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:2c3fcbf1-1697-4711-9884-72f2f07e0feb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:c018679d-24b5-48e9-b6ff-c1aacb96e744",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:79064a33-662a-4c87-9eb0-8298274b6ce1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:b09a2714-6a99-4545-b342-0c3631c3c903",
              "cell": {
                "columnId": "Trential",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:0f614c8e-d614-4a7f-9d4e-46544e8ec61c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:b7c53721-980b-47c8-9f4d-6b53ccd1cbe2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:873aa81f-b012-4e41-ae13-e999c14f6f17",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:caf25f19-6b24-4820-a1b7-384ed1b8f712",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:266f560c-38af-41d9-8071-5280c60aa285",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:e8a40af6-562d-420f-8d6f-3a78def4d105",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:6c1f6208-2190-4e1d-8eac-98b8403b8d0e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:37a7bca0-91b0-4ae0-9bd1-6123c2578037",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:36b98dce-d109-4122-a319-420c65345d94",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:4434cb9c-3c5d-43c8-b1fd-89d9a2bb9a6f",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
          "cells": [
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "fC7HUY54jk-XTJVtP5x0t",
              "ctx": null,
              "_testId": "urn:uuid:f6aa6480-bdc4-4cbc-9269-9f4fe67574fd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "xomNJHijDfZc75QNKd4Py",
              "ctx": null,
              "_testId": "urn:uuid:eb2b3be8-6d56-4ed8-a797-1e9eddefd6fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "tmXyslPBR_1A9dcoUIKMB",
              "ctx": null,
              "_testId": "urn:uuid:b08d21b0-7a85-4c4b-9a60-141dd729d9b3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "FrI2RicCtOWykorx04Y8g",
              "ctx": null,
              "_testId": "urn:uuid:d4950413-b6d4-40e5-bd06-581840120394",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lNJlsH4jjfxW-AcIj3Lq-",
              "ctx": null,
              "_testId": "urn:uuid:03e93a53-9dbd-4af5-bc9d-4797e6120188",
              "cell": {
                "columnId": "Trential",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "CredenceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:9aa09b3f-68e0-4c26-b444-ea0c87721dc7",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22080,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 628,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:701c8792-bd1b-40f7-9aa7-d3da70e477be",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:3542ff8c-5411-4331-8ce3-b2bbb4edd3ce",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:b821d77f-c925-4849-9d86-9a71d2a5d191",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:baaee273-4703-40da-910b-2319aecf7feb",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:b2332840-4bb5-44fa-a314-6fbf69245e96",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:716d4420-38cb-4d0c-aa84-9d473e0386f5",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:075775cd-37ed-4825-80ee-e11770dc631a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:1e5f6149-b7c8-44b0-9b81-d29d405c8967",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 371,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:000aa93c-1da3-4d46-aa04-16ace5347d53",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:cae91280-9fba-4c25-a55a-ef8c701319e4",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:00a63e04-fa9c-42ed-8213-223668dea275",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"CredenceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"CredenceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:bc0dc7f6-ca98-48ba-b457-bc0b77074ad8"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:72e46212-47d7-4aaf-a733-26212d13e501",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 688,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:bd42dea4-0d23-4e22-a499-3042e8d0c52a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25066,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:f20d2cf7-64bd-40c9-9666-4e1e00061a49",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:df6ba1dd-98c0-43a9-b82f-a99cf899bcc4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:6d4f33c3-9ffd-460d-88d5-ff7a67075e8c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:af8119d8-7e1a-45ee-860a-63925ccd3a73",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:f1e1b94f-f004-4fc0-b08a-e670c4d2b76b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:ac62434c-cd63-4c92-a853-c0e465cf70f8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:9b5028c4-1bd9-4f89-b15a-fcf20bb3f7cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:93134803-1756-4be9-9329-e3ec43ff06ae",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:de7858ef-4cfa-4134-8896-efa225fc7186",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:eb86d918-031b-4c43-aa79-7e1301ba24a9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:6c672bb2-681a-4266-8cf0-57a94a3e9c33"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:2f7ccafd-44c7-4585-9633-d327cac1a940",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:e3f25bf4-f1f9-428c-8c21-441324e5f89a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:7a997423-4e32-4ff7-a0dc-3938ee220fea",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 139,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:b22c4588-9d3e-4c49-9113-bf6f8592db4d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 278,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:0d25a41b-c50f-4788-9fbd-30b2e722bf98",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:79f8cedf-0503-4e48-acbb-2726e3631416",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:eea46f9a-9b93-4156-9c40-9bce49c63b08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:57fa5312-12f3-4506-a82f-a6370dc8ad6d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:5528e145-98db-4fc0-b1f5-db4ccbb29cf5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:3f16eb1f-971a-40ad-992b-4d45effa1354",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:60b65708-15c5-4f9a-b68f-ccf9b55c92c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:69c82f35-de95-4c5f-ae4c-0119360113b1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:1219f944-5ebb-487f-bb5d-5c6a51c4e989"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:e70d97e4-3ee1-49f4-b87d-9de81f06b18f",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:5a17194d-bbe8-480b-8020-d34bc868e705",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:f53f713b-2b0e-4c1a-9a7a-5e19aabe4468",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:00af40bc-190f-4bc3-b666-1202bc00cb4c",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 460,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:c0382bf7-3ade-499f-a04f-90f39c41d784",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:51fba8de-d962-4e75-b43c-f220105ef674",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28675,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:c5c609c4-d37f-4097-ab50-509a71934af2",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:ec44f248-8976-46a0-90f8-369de6c77148",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:55a84442-c92f-47ca-8564-235af63c0941",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:d67a048f-0fb6-4723-ad08-86e24c74a0e0",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:d11a74e6-46a1-4cf3-a4c7-f1df5a75c46d",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29283,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:ae795f87-42f3-4f37-9430-1c44f3696c9f",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29401,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Netis\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:777368f0-6a94-41e2-a74e-7f2817b041c6"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:8e5784f5-d93c-47c3-af86-d49e256ebdf4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:c517d16d-0d20-46fe-9e62-dde990d2396a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:1bce7eaa-d34c-4792-8981-a173ca1faca0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30031,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:d4dd96c1-91e7-4fb9-981f-61e02b49fa19",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 401,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:5a288a8b-91c2-42fe-846f-99cc9a9df811",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:0e3fd1e0-17e5-4698-ade8-b7989997d907",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:4c7ef87f-9aac-4ee6-8a37-8d072c5ce327",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:48d2db21-9ddb-425c-b5ba-678738a194c3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:183b37c1-a643-4d4c-8ec1-61e17de00c34",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 304,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:f2cb3461-d08b-4e61-b881-ccd9983d28f9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:5b5d91b9-14f7-49ac-9096-c9040bef8ab0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:1b6be04b-d3ff-487c-ab46-d22e8b510619",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29521,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:f46ad819-fb7c-432b-9265-7d49e4c20499"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:ab246793-2dca-490e-9010-9d9c8538edc6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31450,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:b6e45138-ebb3-49e7-9e3a-55d11ca96adf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:b3adf13f-07a5-4096-9a5e-ab0641999db1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:a76f65ef-6bce-4b13-908c-07048e9f5531",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:25acc072-5772-4a25-b9f7-1d04580877c2",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:00e986ff-8af9-4c7a-9989-4c60926df5c7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:faa18bb8-5c6d-42db-a1c4-dd08e7103b7b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:9ac2d256-5522-401b-afc1-d81d1edf1344",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:43685a23-9c41-490b-8a58-b92c7c80c8d9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:dc8287ab-e98f-4af6-bdaa-2515e584dfaa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:88f92c69-0de8-4af3-9444-945ec5ffce10",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:46ad932e-b69e-4708-afac-ffe30951cd5f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:d00e5190-ed04-4bf3-8216-18f6e3793cc7"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:d819dbb9-099d-4366-9d63-b652406bf4a9",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2604,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f7bda1bf-7b27-4890-809c-acbd029d7eda",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:b1244c79-1e26-4752-9d18-b805293f295b",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 446,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:4d211130-4e90-49f6-aa73-f64ceba1724d",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 884,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:24c57a82-1210-4361-bedd-dd7444c47c3c",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f470180a-0e71-4492-9087-2bf4b5e75add",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36358,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:57489683-7f64-4940-932e-14b47d447c2c",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:83d8a8c9-1211-4a4a-b661-8cb33a6b9a52",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:6a31bb9d-bbe3-4a17-b28b-66b27e3816e9",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4761,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f6431086-107e-460e-b13f-db69674ab9b3",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:253730ca-8764-4d39-bc90-e4687f795c4a",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 216,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f524a277-20df-42e3-9aca-0168d01a5277",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:af27aff3-1b1f-4e17-9c49-39a14ffb70ad"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (bbs-2023 verifiers) VC 1.1\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "wMT5S1jXSqkP8YT0PWkII",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20061,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 2017,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-r2WQ2brUrRP4R3vOknrv",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0cb9e87f-e9ec-42a0-8c10-cd5b69c921fa",
      "columns": [
        "CredenceID",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:9aa09b3f-68e0-4c26-b444-ea0c87721dc7",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22080,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 628,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:72e46212-47d7-4aaf-a733-26212d13e501",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 688,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:2f7ccafd-44c7-4585-9633-d327cac1a940",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:e70d97e4-3ee1-49f4-b87d-9de81f06b18f",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:8e5784f5-d93c-47c3-af86-d49e256ebdf4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:ab246793-2dca-490e-9010-9d9c8538edc6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31450,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:d819dbb9-099d-4366-9d63-b652406bf4a9",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2604,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:701c8792-bd1b-40f7-9aa7-d3da70e477be",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:bd42dea4-0d23-4e22-a499-3042e8d0c52a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25066,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:e3f25bf4-f1f9-428c-8c21-441324e5f89a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:5a17194d-bbe8-480b-8020-d34bc868e705",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:c517d16d-0d20-46fe-9e62-dde990d2396a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:b6e45138-ebb3-49e7-9e3a-55d11ca96adf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f7bda1bf-7b27-4890-809c-acbd029d7eda",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:3542ff8c-5411-4331-8ce3-b2bbb4edd3ce",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:f20d2cf7-64bd-40c9-9666-4e1e00061a49",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:7a997423-4e32-4ff7-a0dc-3938ee220fea",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 139,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:f53f713b-2b0e-4c1a-9a7a-5e19aabe4468",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:1bce7eaa-d34c-4792-8981-a173ca1faca0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30031,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:b3adf13f-07a5-4096-9a5e-ab0641999db1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:b1244c79-1e26-4752-9d18-b805293f295b",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 446,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:b821d77f-c925-4849-9d86-9a71d2a5d191",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:df6ba1dd-98c0-43a9-b82f-a99cf899bcc4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:b22c4588-9d3e-4c49-9113-bf6f8592db4d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 278,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:00af40bc-190f-4bc3-b666-1202bc00cb4c",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 460,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:d4dd96c1-91e7-4fb9-981f-61e02b49fa19",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 401,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:a76f65ef-6bce-4b13-908c-07048e9f5531",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:4d211130-4e90-49f6-aa73-f64ceba1724d",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 884,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:baaee273-4703-40da-910b-2319aecf7feb",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:6d4f33c3-9ffd-460d-88d5-ff7a67075e8c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:0d25a41b-c50f-4788-9fbd-30b2e722bf98",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:c0382bf7-3ade-499f-a04f-90f39c41d784",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:5a288a8b-91c2-42fe-846f-99cc9a9df811",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:25acc072-5772-4a25-b9f7-1d04580877c2",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:24c57a82-1210-4361-bedd-dd7444c47c3c",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:b2332840-4bb5-44fa-a314-6fbf69245e96",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:af8119d8-7e1a-45ee-860a-63925ccd3a73",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:79f8cedf-0503-4e48-acbb-2726e3631416",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:51fba8de-d962-4e75-b43c-f220105ef674",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28675,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:0e3fd1e0-17e5-4698-ade8-b7989997d907",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:00e986ff-8af9-4c7a-9989-4c60926df5c7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f470180a-0e71-4492-9087-2bf4b5e75add",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36358,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:716d4420-38cb-4d0c-aa84-9d473e0386f5",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:f1e1b94f-f004-4fc0-b08a-e670c4d2b76b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:eea46f9a-9b93-4156-9c40-9bce49c63b08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:c5c609c4-d37f-4097-ab50-509a71934af2",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:4c7ef87f-9aac-4ee6-8a37-8d072c5ce327",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:faa18bb8-5c6d-42db-a1c4-dd08e7103b7b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:57489683-7f64-4940-932e-14b47d447c2c",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:075775cd-37ed-4825-80ee-e11770dc631a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:ac62434c-cd63-4c92-a853-c0e465cf70f8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:57fa5312-12f3-4506-a82f-a6370dc8ad6d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:ec44f248-8976-46a0-90f8-369de6c77148",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:48d2db21-9ddb-425c-b5ba-678738a194c3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:9ac2d256-5522-401b-afc1-d81d1edf1344",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:83d8a8c9-1211-4a4a-b661-8cb33a6b9a52",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:1e5f6149-b7c8-44b0-9b81-d29d405c8967",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 371,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:9b5028c4-1bd9-4f89-b15a-fcf20bb3f7cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:5528e145-98db-4fc0-b1f5-db4ccbb29cf5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:55a84442-c92f-47ca-8564-235af63c0941",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:183b37c1-a643-4d4c-8ec1-61e17de00c34",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 304,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:43685a23-9c41-490b-8a58-b92c7c80c8d9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:6a31bb9d-bbe3-4a17-b28b-66b27e3816e9",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4761,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:000aa93c-1da3-4d46-aa04-16ace5347d53",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:93134803-1756-4be9-9329-e3ec43ff06ae",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:3f16eb1f-971a-40ad-992b-4d45effa1354",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:d67a048f-0fb6-4723-ad08-86e24c74a0e0",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:f2cb3461-d08b-4e61-b881-ccd9983d28f9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:dc8287ab-e98f-4af6-bdaa-2515e584dfaa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f6431086-107e-460e-b13f-db69674ab9b3",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:cae91280-9fba-4c25-a55a-ef8c701319e4",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:de7858ef-4cfa-4134-8896-efa225fc7186",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:60b65708-15c5-4f9a-b68f-ccf9b55c92c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:d11a74e6-46a1-4cf3-a4c7-f1df5a75c46d",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29283,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:5b5d91b9-14f7-49ac-9096-c9040bef8ab0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:88f92c69-0de8-4af3-9444-945ec5ffce10",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:253730ca-8764-4d39-bc90-e4687f795c4a",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 216,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "wL7kZ6US7xFGpL7rzYYSc",
              "ctx": null,
              "_testId": "urn:uuid:00a63e04-fa9c-42ed-8213-223668dea275",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "NIbcsA1O0LuZjtTbEgS1s",
              "ctx": null,
              "_testId": "urn:uuid:eb86d918-031b-4c43-aa79-7e1301ba24a9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GNI-8Tn2Pk0BvWJWh_Kga",
              "ctx": null,
              "_testId": "urn:uuid:69c82f35-de95-4c5f-ae4c-0119360113b1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xvgi7501k1xgTF8CxI-lY",
              "ctx": null,
              "_testId": "urn:uuid:ae795f87-42f3-4f37-9430-1c44f3696c9f",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29401,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "OLI6r0OC1Goxx9NtT-Ypw",
              "ctx": null,
              "_testId": "urn:uuid:1b6be04b-d3ff-487c-ab46-d22e8b510619",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03276l-DoRNRLRJ7RqyZL",
              "ctx": null,
              "_testId": "urn:uuid:46ad932e-b69e-4708-afac-ffe30951cd5f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xIsh7D6Pjt59t4mWZcdSo",
              "ctx": null,
              "_testId": "urn:uuid:f524a277-20df-42e3-9aca-0168d01a5277",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "CredenceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:32d653f4-055b-46cd-8f2b-5caa9f778512",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:08af57df-3c68-4ed1-8296-605ed473b53b",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:5fbdc40b-e53d-41ef-a348-1636441f14b8",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:828f940a-2b2d-4b92-a0be-d1a9dfd2aedf",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:1df1890e-ece9-4109-949d-10e54d27761c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:2a8672e5-6dad-4020-ae4c-de36833ccac8",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:f1d1293d-5bb8-40f0-bc70-b54c47a29cf4",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:3310fc6c-870a-4ed4-ae06-b1c05fc4272c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:06e4f5df-2305-43c0-aaa6-f70ca9098104",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 373,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:0181e9ae-aac5-42e9-a462-cae164656543",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45520,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:2c4f3288-aaeb-4a2c-a041-7e88c86c6e6e",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:675f823c-e7a8-4fa4-a2f5-5a03335e6165",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"CredenceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"CredenceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:d1f2a932-7955-4f33-a8d8-30342d65864a"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:e17c63d6-51c4-4b73-ad37-cf097cfdc04e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:90b5d727-1364-4b1e-b4ec-b5bc04f3bc1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:d1838d06-2390-4345-b94a-66aae8dc28fc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:8c2a28ec-1eac-45a9-9949-9514849754e3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:56a8df54-47da-4121-bbdd-d9f2b8bd1679",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:ebb5261a-cc56-41d5-b109-b1ceafc6998f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:78c0bdbc-7c10-4a2d-9465-d467b36b81a9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:6d8c2886-8f1f-40d5-a0ae-f1e243340115",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:ddbd0f80-9c81-409b-bbdd-df1a874d71fd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:cb084252-27d2-4df9-924f-78323cea76fb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:0620b7ea-5623-48f1-befc-993ccc0e76c7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:f7dfa1f6-2e49-4841-b945-84087a501e49",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:9c4987ee-84d5-4370-b041-6d7112323e1b"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:c4f7de59-043c-40f2-900e-29759530b637",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 504,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:20f80fff-a42a-4b64-a52e-0d829d21aee9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47153,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:7ad92254-e845-454c-a64e-a3019700baf1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:e7741480-a9c3-431a-898d-d6ab2c7dab10",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:18c44fb9-d7ad-48b0-b5b2-ff570b07f3b9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:c0d517ea-aa29-4848-b74e-cacbd613308b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47717,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:0f41252e-caa0-4b3e-9de4-1af9631b3180",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:f6ecf39a-83a1-48fd-9781-69833c489423",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:2521ad34-9eef-444c-b65e-9ad6a8316aaa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 429,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:ad46e493-2408-4f44-a793-ac3359147eb5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:e791fb8e-6603-4460-8950-e6d9c66e2ef4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:af4d20ff-6f16-4631-85d5-5bdcbcd3d108",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48545,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46647,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:9852b940-29df-42ab-83a9-28c5b9af18dd"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:3b97c455-d67f-4d3f-bd79-c7ac9147e475",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 368,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:33b21bcb-7636-44d6-8cbb-f24c265887b7",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:51c2e34e-b175-49b0-808b-62df715d8466",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:9fa34e4d-3a93-4de7-b3ee-474da781576e",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49345,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 456,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:1124d471-ea76-4aa0-8fca-b9bf1c6b3f78",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:716c578e-d451-4fde-b1d5-5ce340631fb5",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:0eebedf9-75ce-4e35-8f62-208ce7194d0d",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:13e6a4d3-8844-473c-b7b1-1ad47dde666c",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:cd3fefab-7485-4dd4-b62d-6b673fcc07a5",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:ee0676e8-d3ec-45f7-9f2d-496decf87504",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50406,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:bbe24edb-a871-488c-8ed7-4524d341afaf",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:926153aa-eb3e-4162-9432-5f07873afb83",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Netis\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:5569252a-9b65-4c53-b51d-060b5099c2e1"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:5c258e1d-8cd6-4716-943c-2d312167a3dc",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50766,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 419,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:e57a8cb1-7110-4ceb-b7bd-ca3212614e4d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:5923a966-a186-45c4-95fb-0e923e24775e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:d536b6cf-1e3b-4180-8654-1ee6a0bc8f4c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:a6cc2b63-0736-4c13-9da4-dc9764427dbd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:2047d53f-fa61-4970-b0bc-770829d3e81b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:3793b9e2-3a3d-4809-af00-9db9ef92357b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:1ffa086c-3162-49ed-a06c-70bb6639e195",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:629f2dc5-a342-44de-aff9-75ddb22c4420",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 305,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:f9bdaeba-2848-4cd2-84c5-1963161f3807",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:05b8781b-9b69-4461-8c98-5986e18c817f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:7302342b-412f-4700-8202-e029a01b17be",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:4444b894-0761-432c-a63f-f6341180d36e"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:3bb0b76b-4f33-4b5b-9a77-4f42699dac67",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:2896d9cc-eca2-429a-aaaf-33519d677693",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:1d368e5d-ee5c-46dd-8caa-1e535597e969",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:8644e0de-2f68-44e3-9af5-9d65f41adca0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:d331388a-3159-4166-95f6-2815a6cf6ae9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:cf601f98-6421-488b-bbdd-1681731a9b73",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:69335123-fd8d-465f-9e8a-64e8d95e5a08",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:cdbf52b9-8cd0-4773-9b65-959f52386577",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:2a0ffaeb-1be0-40f9-81ad-9b8ecf94ff57",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:d9f40131-b6c5-4e52-8906-49505197d013",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:1c774b69-521d-4e01-a5d0-d48c46b7c67d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:6d80860e-7e80-472e-91a5-d0f546a58e71",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53212,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:1bc13e9e-808d-4ab5-95b1-226357e8ae5d"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:5a95bc0c-f000-408d-afc9-f1dab654cd55",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1190,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:ec325008-0931-41f5-a3f1-17f4f550ad8b",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:5162e00b-9d97-4bda-92f5-710fbaa36601",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 436,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:691d2f46-91f1-4333-9350-3dba6ed70e5e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 885,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:da4e71f3-2e9c-4d7d-adc0-8bc45beffe62",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:d185dc73-3182-4e37-ab22-0f49be9b652e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:10525c3c-ad1e-432e-93d1-70e0d6d0bf75",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:07103940-944b-4d8d-a214-85eea352fa35",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:52a3a32c-6e48-4e39-bb05-fb64fe7a7538",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2705,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:61fe72af-2093-467f-844a-dc6395502bc4",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 853,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:7c6b0355-e2e3-44b3-8e1d-615dbbd53914",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:f6973905-7e73-422e-b4dc-0c3023c62b39",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:89dae857-5d72-428e-9e30-87de6354e23f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (bbs-2023 verifiers) VC 2.0\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "vDmq4iRnepS6GT-PT1N2v",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 42002,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 2026,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-r2WQ2brUrRP4R3vOknrv",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:736b6ea4-580a-4bc2-9c80-2d75ec657381",
      "columns": [
        "CredenceID",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:32d653f4-055b-46cd-8f2b-5caa9f778512",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:e17c63d6-51c4-4b73-ad37-cf097cfdc04e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:c4f7de59-043c-40f2-900e-29759530b637",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 504,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:3b97c455-d67f-4d3f-bd79-c7ac9147e475",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 368,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:5c258e1d-8cd6-4716-943c-2d312167a3dc",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50766,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 419,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:3bb0b76b-4f33-4b5b-9a77-4f42699dac67",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:5a95bc0c-f000-408d-afc9-f1dab654cd55",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1190,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:08af57df-3c68-4ed1-8296-605ed473b53b",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:90b5d727-1364-4b1e-b4ec-b5bc04f3bc1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:20f80fff-a42a-4b64-a52e-0d829d21aee9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47153,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:33b21bcb-7636-44d6-8cbb-f24c265887b7",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:e57a8cb1-7110-4ceb-b7bd-ca3212614e4d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:2896d9cc-eca2-429a-aaaf-33519d677693",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:ec325008-0931-41f5-a3f1-17f4f550ad8b",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:5fbdc40b-e53d-41ef-a348-1636441f14b8",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:d1838d06-2390-4345-b94a-66aae8dc28fc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:7ad92254-e845-454c-a64e-a3019700baf1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:51c2e34e-b175-49b0-808b-62df715d8466",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:5923a966-a186-45c4-95fb-0e923e24775e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:1d368e5d-ee5c-46dd-8caa-1e535597e969",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:5162e00b-9d97-4bda-92f5-710fbaa36601",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 436,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:828f940a-2b2d-4b92-a0be-d1a9dfd2aedf",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:8c2a28ec-1eac-45a9-9949-9514849754e3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:e7741480-a9c3-431a-898d-d6ab2c7dab10",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:9fa34e4d-3a93-4de7-b3ee-474da781576e",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49345,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 456,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:d536b6cf-1e3b-4180-8654-1ee6a0bc8f4c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:8644e0de-2f68-44e3-9af5-9d65f41adca0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:691d2f46-91f1-4333-9350-3dba6ed70e5e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 885,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:1df1890e-ece9-4109-949d-10e54d27761c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:56a8df54-47da-4121-bbdd-d9f2b8bd1679",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:18c44fb9-d7ad-48b0-b5b2-ff570b07f3b9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:1124d471-ea76-4aa0-8fca-b9bf1c6b3f78",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:a6cc2b63-0736-4c13-9da4-dc9764427dbd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:d331388a-3159-4166-95f6-2815a6cf6ae9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:da4e71f3-2e9c-4d7d-adc0-8bc45beffe62",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:2a8672e5-6dad-4020-ae4c-de36833ccac8",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:ebb5261a-cc56-41d5-b109-b1ceafc6998f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:c0d517ea-aa29-4848-b74e-cacbd613308b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47717,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:716c578e-d451-4fde-b1d5-5ce340631fb5",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:2047d53f-fa61-4970-b0bc-770829d3e81b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:cf601f98-6421-488b-bbdd-1681731a9b73",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:d185dc73-3182-4e37-ab22-0f49be9b652e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:f1d1293d-5bb8-40f0-bc70-b54c47a29cf4",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:78c0bdbc-7c10-4a2d-9465-d467b36b81a9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:0f41252e-caa0-4b3e-9de4-1af9631b3180",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:0eebedf9-75ce-4e35-8f62-208ce7194d0d",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:3793b9e2-3a3d-4809-af00-9db9ef92357b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:69335123-fd8d-465f-9e8a-64e8d95e5a08",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:10525c3c-ad1e-432e-93d1-70e0d6d0bf75",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:3310fc6c-870a-4ed4-ae06-b1c05fc4272c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:6d8c2886-8f1f-40d5-a0ae-f1e243340115",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:f6ecf39a-83a1-48fd-9781-69833c489423",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:13e6a4d3-8844-473c-b7b1-1ad47dde666c",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:1ffa086c-3162-49ed-a06c-70bb6639e195",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:cdbf52b9-8cd0-4773-9b65-959f52386577",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:07103940-944b-4d8d-a214-85eea352fa35",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:06e4f5df-2305-43c0-aaa6-f70ca9098104",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 373,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:ddbd0f80-9c81-409b-bbdd-df1a874d71fd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:2521ad34-9eef-444c-b65e-9ad6a8316aaa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 429,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:cd3fefab-7485-4dd4-b62d-6b673fcc07a5",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:629f2dc5-a342-44de-aff9-75ddb22c4420",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 305,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:2a0ffaeb-1be0-40f9-81ad-9b8ecf94ff57",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:52a3a32c-6e48-4e39-bb05-fb64fe7a7538",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2705,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:0181e9ae-aac5-42e9-a462-cae164656543",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45520,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:cb084252-27d2-4df9-924f-78323cea76fb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:ad46e493-2408-4f44-a793-ac3359147eb5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:ee0676e8-d3ec-45f7-9f2d-496decf87504",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50406,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:f9bdaeba-2848-4cd2-84c5-1963161f3807",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:d9f40131-b6c5-4e52-8906-49505197d013",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:61fe72af-2093-467f-844a-dc6395502bc4",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 853,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:2c4f3288-aaeb-4a2c-a041-7e88c86c6e6e",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:0620b7ea-5623-48f1-befc-993ccc0e76c7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:e791fb8e-6603-4460-8950-e6d9c66e2ef4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:bbe24edb-a871-488c-8ed7-4524d341afaf",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:05b8781b-9b69-4461-8c98-5986e18c817f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:1c774b69-521d-4e01-a5d0-d48c46b7c67d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:7c6b0355-e2e3-44b3-8e1d-615dbbd53914",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "zfeRqcsj5P7tGgM6leHDo",
              "ctx": null,
              "_testId": "urn:uuid:675f823c-e7a8-4fa4-a2f5-5a03335e6165",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "39m578xH_AieEJYdOcfXj",
              "ctx": null,
              "_testId": "urn:uuid:f7dfa1f6-2e49-4841-b945-84087a501e49",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "03RI7Hn1jF3lkDu0h7Tdc",
              "ctx": null,
              "_testId": "urn:uuid:af4d20ff-6f16-4631-85d5-5bdcbcd3d108",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48545,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "z77BuDY78KXFtZw_Mfoel",
              "ctx": null,
              "_testId": "urn:uuid:926153aa-eb3e-4162-9432-5f07873afb83",
              "cell": {
                "columnId": "Netis",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "2WROxKAFJyo94n0ucCG9l",
              "ctx": null,
              "_testId": "urn:uuid:7302342b-412f-4700-8202-e029a01b17be",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "_0A2R3qXkSNXO6D1xOc_U",
              "ctx": null,
              "_testId": "urn:uuid:6d80860e-7e80-472e-91a5-d0f546a58e71",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53212,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "GeCvXmOGmK20YYGaPonQS",
              "ctx": null,
              "_testId": "urn:uuid:f6973905-7e73-422e-b4dc-0c3023c62b39",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (verifiers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "CredenceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:528d54b3-a037-449a-99be-d5452a1829f3",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 314,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:7e3229be-e5d1-44be-a6a4-5a37325e633b",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 450,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:779c938f-4d1c-43fb-b30a-64bf66008f79",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:2bf72cd5-c6a3-4a45-a4e7-64b088905808",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:50c455ef-e438-4ad9-8736-6f58605a740a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:67c0886f-73c2-49dd-a7ef-f0de167e04eb",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:cd7fee6b-5a68-4213-ab97-8071cfdd2cfd",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1208,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:de512296-a9c6-4e7e-88c5-e852e957ac8c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"CredenceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:9a54db83-0b21-4cda-b983-9dd5b9ac6d8d"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:657251d1-b4c4-4b0f-890a-73ca4cdd9bbc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:74d19262-67fa-4888-8a69-3010072bbca8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:bab447d7-9eb5-44d0-a134-29896a907803",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1095,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:8518b663-66b5-457c-a378-9abb37e2e81b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:89b0f287-af99-4c67-bd98-80653c143ef3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:9e49feea-1da0-4ad4-906f-fd7afaf83820",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 712,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:4b949b64-f8c0-4e5e-98a7-e0ad7721d0ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1937,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:3f3a6e73-af32-42c8-b868-da5fa7b4348b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:096e4f75-8257-4081-b502-e43377382eef"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:a76f4fba-27bc-4b97-81ab-d1afc12d1913",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:21349eb1-fe85-4f9b-be31-9a0fe13c27c8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:05dd5b7b-7ecf-4264-9668-04faf7293a38",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:ed3e9ef0-876a-4a51-b9b1-a280d44674b4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:7c926d0d-dc97-429c-8646-f5b31bf41bca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:ee9cda3c-226c-4c5b-9d25-7d2379fedfc1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:f14ca4e8-b66f-423f-90c4-68aa70d6b075",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:f3f361be-b813-4d80-a851-896d5802b3d6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:ee4a378b-b262-44e6-8983-d860478fe2d4"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:ed8ecc7c-20ef-445c-aa25-f757fa577d54",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 377,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:71ef5d2f-a47a-477c-8a6a-728865c98e2c",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 692,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:7c16fc57-097f-459e-8278-11bf8f6f01df",
              "cell": {
                "columnId": "Netis",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:7964dc6a-30bb-4c6e-9652-afdcb58b0d85",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 354,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:db49182b-379e-4f45-b78d-8d63321a08cc",
              "cell": {
                "columnId": "Netis",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:1c7479af-4526-4a67-a75c-dee0aa370453",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71874,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:9fa2b560-aa36-4331-9cc8-fb25c600a03a",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:494ba06a-fbb1-4d49-86db-eef4d2116920",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:9e54af6f-a7b8-4904-b8b0-2bf19899507c"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:612b5fc3-927b-4525-9a7e-67148981ac7f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 576,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:29a65178-d1fc-4de1-b583-bd9f195088e3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1555,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:1bdc54be-a3ec-4e67-97ff-062220c9a5dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 488,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:ece45fa6-90ac-46b8-8fbf-0b48bbeb773e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75916,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:2fc4b35e-30e9-42f9-b1f8-0cf2defd1223",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 352,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:d5387a7e-fa08-4f4a-a579-575ed283b137",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:92f05515-b922-41f2-8547-43b5425c1c55",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2985,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:0a6b4b6d-80a4-4d2b-9bf6-723302503731",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80673,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:2bd32822-645b-4a2a-a0d2-f6f80090e278"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:2e65ea39-c3ad-402b-9eaa-c2c0aa0e5779",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:9800b033-34c8-4a82-8556-ebe6a9d5fd28",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:e0bdd015-42de-47ba-afbb-8fca433693c0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:f519e9a1-3dc9-452f-987b-86349ac0a619",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:e1069b8a-57b5-49b7-b1e3-f8a186559b6b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:4a62e2cc-2689-4295-b26e-9ab924870a28",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:ffa3a83e-ed1f-472c-bbd9-c8bd6c237a66",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:05f85c69-57e8-40af-a6e7-042237eef345",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:8349ddeb-4fd9-4e62-8bd2-d18d56697dd9"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:771ef2f3-2cdf-4c5a-863a-d9525588909e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81465,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 927,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:029e0718-ca04-4990-a8e3-fe9170752378",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1324,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:b4efce78-bae6-4621-a410-6b1d11ec51ff",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83717,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:996f08b2-8355-4dd0-a13f-b73ad7527160",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1335,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:8676a759-9cc2-4dcc-b545-52d9b9dad7aa",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:4a2947db-9db0-4b2c-aeb3-3f60bc6e9990",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2639,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:5690beab-bc90-4249-88a9-64a20e6812dd",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 91302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8001,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:b65774db-abd5-4dbe-a032-8c3ef7862703",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "2wg20hHG7Zo5PLY6WeYN4",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:b368436e-d866-47ca-9d05-3bed340a9c06"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "vbMRenCAyjtC3K_n_4AK0",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:7d3d643c-d238-44f8-a50b-55ad54da132b",
      "columns": [
        "CredenceID",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:528d54b3-a037-449a-99be-d5452a1829f3",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 314,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:657251d1-b4c4-4b0f-890a-73ca4cdd9bbc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:a76f4fba-27bc-4b97-81ab-d1afc12d1913",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:ed8ecc7c-20ef-445c-aa25-f757fa577d54",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 377,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:612b5fc3-927b-4525-9a7e-67148981ac7f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 576,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:2e65ea39-c3ad-402b-9eaa-c2c0aa0e5779",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:771ef2f3-2cdf-4c5a-863a-d9525588909e",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81465,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 927,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:7e3229be-e5d1-44be-a6a4-5a37325e633b",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 450,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:74d19262-67fa-4888-8a69-3010072bbca8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:21349eb1-fe85-4f9b-be31-9a0fe13c27c8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:71ef5d2f-a47a-477c-8a6a-728865c98e2c",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 692,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:29a65178-d1fc-4de1-b583-bd9f195088e3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1555,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:9800b033-34c8-4a82-8556-ebe6a9d5fd28",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:029e0718-ca04-4990-a8e3-fe9170752378",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1324,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
          "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:779c938f-4d1c-43fb-b30a-64bf66008f79",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:bab447d7-9eb5-44d0-a134-29896a907803",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1095,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:05dd5b7b-7ecf-4264-9668-04faf7293a38",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:7c16fc57-097f-459e-8278-11bf8f6f01df",
              "cell": {
                "columnId": "Netis",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:1bdc54be-a3ec-4e67-97ff-062220c9a5dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 488,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:e0bdd015-42de-47ba-afbb-8fca433693c0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:b4efce78-bae6-4621-a410-6b1d11ec51ff",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83717,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3390,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
          "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:2bf72cd5-c6a3-4a45-a4e7-64b088905808",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:8518b663-66b5-457c-a378-9abb37e2e81b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:ed3e9ef0-876a-4a51-b9b1-a280d44674b4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:7964dc6a-30bb-4c6e-9652-afdcb58b0d85",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 354,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:ece45fa6-90ac-46b8-8fbf-0b48bbeb773e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75916,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:f519e9a1-3dc9-452f-987b-86349ac0a619",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:996f08b2-8355-4dd0-a13f-b73ad7527160",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1335,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:50c455ef-e438-4ad9-8736-6f58605a740a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:89b0f287-af99-4c67-bd98-80653c143ef3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:7c926d0d-dc97-429c-8646-f5b31bf41bca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:db49182b-379e-4f45-b78d-8d63321a08cc",
              "cell": {
                "columnId": "Netis",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:2fc4b35e-30e9-42f9-b1f8-0cf2defd1223",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 352,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:e1069b8a-57b5-49b7-b1e3-f8a186559b6b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:8676a759-9cc2-4dcc-b545-52d9b9dad7aa",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:67c0886f-73c2-49dd-a7ef-f0de167e04eb",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:9e49feea-1da0-4ad4-906f-fd7afaf83820",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 712,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:ee9cda3c-226c-4c5b-9d25-7d2379fedfc1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:1c7479af-4526-4a67-a75c-dee0aa370453",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71874,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:d5387a7e-fa08-4f4a-a579-575ed283b137",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:4a62e2cc-2689-4295-b26e-9ab924870a28",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:4a2947db-9db0-4b2c-aeb3-3f60bc6e9990",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2639,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:cd7fee6b-5a68-4213-ab97-8071cfdd2cfd",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1208,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:4b949b64-f8c0-4e5e-98a7-e0ad7721d0ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1937,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:f14ca4e8-b66f-423f-90c4-68aa70d6b075",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:9fa2b560-aa36-4331-9cc8-fb25c600a03a",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:92f05515-b922-41f2-8547-43b5425c1c55",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 77687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2985,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:ffa3a83e-ed1f-472c-bbd9-c8bd6c237a66",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:5690beab-bc90-4249-88a9-64a20e6812dd",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 91302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8001,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "61JfujChSkKsvRcXwVI39",
              "ctx": null,
              "_testId": "urn:uuid:de512296-a9c6-4e7e-88c5-e852e957ac8c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "PSlvuTeLhqPqN8ucvCu8T",
              "ctx": null,
              "_testId": "urn:uuid:3f3a6e73-af32-42c8-b868-da5fa7b4348b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "2QgNLjeHu3umBIC5A1pU3",
              "ctx": null,
              "_testId": "urn:uuid:f3f361be-b813-4d80-a851-896d5802b3d6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "ij3vRlgV50MX6Io1KKPAo",
              "ctx": null,
              "_testId": "urn:uuid:494ba06a-fbb1-4d49-86db-eef4d2116920",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "0wWiwfO4LRypG23TKml3V",
              "ctx": null,
              "_testId": "urn:uuid:0a6b4b6d-80a4-4d2b-9bf6-723302503731",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80673,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "v87OvSndaDuVA5RGQFcfc",
              "ctx": null,
              "_testId": "urn:uuid:05f85c69-57e8-40af-a6e7-042237eef345",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "STOmdkd9h59D3fUHnBaIP",
              "ctx": null,
              "_testId": "urn:uuid:b65774db-abd5-4dbe-a032-8c3ef7862703",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "CredenceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:6c684381-e628-44c3-b798-5ae304f884b2",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:47c6145f-f368-4f5e-8376-6b78d5334148",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 360,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:11ab89e4-238c-44a0-8524-f71d4e0a111e",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:1c287c2f-151c-4193-be1c-867be440aa1a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:121e5755-cc0b-40a1-b312-a322edfa27ef",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:013ebaad-00b1-47a1-950d-2cc07f73656c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:df6c49ca-e6e1-4bf1-b16b-abc73b658799",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1214,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:59fb2010-a45b-44c0-a324-b295d6eb509f",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"CredenceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:b345e149-c91c-4842-940c-f72ea811e67b"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:1b4bef0a-b036-4cd1-a1c6-a401b6a06512",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:09715b6c-3cc9-4241-a1c4-9762e464b2af",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:6537c36b-e61f-484e-924c-6b45dcc9f767",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:ff60ce00-1707-4f71-98af-a594b15c8f3b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102811,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:12291700-d765-4a49-9b92-8f22d6d96f2a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:3c485a6c-cd3f-4ffd-8464-68a88d7adae7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 426,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:0998b05a-1527-4f50-ac19-30d2f8cc6e52",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1023,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:7f3e3106-6457-41e0-8aa7-65fedb3d3efa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:0d27f50c-996d-4301-bd59-b952a4884ee2"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:f7b35c02-2b99-4a83-9777-bdc31474c5a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:8ffee0c4-f2d1-4cb2-9440-853d7b0aff09",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:00665462-a8c7-41e3-823f-ab691b2a9ba4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:5f051011-619c-4398-b3a9-3e44f6fc0cb6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:ef0f1a9c-fe53-4814-8fbd-1699590aae24",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:caae3b77-8b2c-41f6-9c5c-8c05e4668f6a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:096f9eca-1c23-4e66-b64a-8702616931ae",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1017,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:5c08d426-f6e1-43c7-80dd-9a4bf37f89db",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:f0dc22f1-1f4e-4d32-9756-a2f15bb8b1da"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:848ecba5-d7fd-4983-9160-6eaab98f12a2",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 351,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:2a0b8c9f-9dce-43dd-b9d9-a930a1aaef7a",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 608,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:bfa243ef-42e7-4e3c-9343-232017a7071a",
              "cell": {
                "columnId": "Netis",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:fa4e9a80-e15c-4610-b5bc-67dcc15ee189",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:d97aff51-8232-4137-9c7e-2b3efe0f8168",
              "cell": {
                "columnId": "Netis",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:a6bcf025-a811-4266-ab05-ecd876983a10",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:7c5dc6ea-39c7-4059-bba4-ae148f57a98d",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:c24dfbfb-051e-418c-811f-e7b41fee73c4",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:d3365509-3d43-41e0-9105-ccc4348ceb6e"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:7ea1f5ff-3a1e-4737-877e-9666d37e86a7",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:251861b7-9375-468a-9133-4201fbc7614e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 562,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:d7ab6dbd-5e56-473b-ab6a-684682093f7a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:9fafe7eb-0bf7-4d23-8193-969c26a9015f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 327,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:d49e425c-4d09-48b7-8897-9e907a33c314",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:122c7951-b45c-4074-9d46-4d6e0ce70dd2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:71c0ab59-55aa-414a-a5f2-271ac758348e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:273e62da-7e8d-4675-ad30-681a1f6abd9d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:0ac1fe66-314f-4095-8a4b-26cb07fa94c3"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:325c8823-39ad-4391-9c1b-27f9f6494c31",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:78d2d0c5-4184-4802-8bd6-ff0d9b682fc5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:430c27af-693c-4cec-9c50-366d474178e6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:87877301-f2c3-4799-86c6-90d357891618",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:166e87fd-0ae4-41db-ae3a-d64ad0201796",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113147,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:0f2f9c14-d8bf-4ad8-a796-4cc33a65ebe1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:d8b45f17-138c-4540-83d1-c5ffa97c8154",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:11fcc327-269a-4c44-ab60-7cace986549a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:bb97bfe3-d11b-4519-ae23-bdaec16114b9"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:65b83626-5826-48bf-ac25-d227a7362fd7",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 891,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:5eac3693-48f4-4432-bcf4-04457d1788db",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 114415,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1328,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:74aa3f92-1354-4e04-91e9-e45ceebd8bc3",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 115743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2068,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:22c648b8-c9ae-4881-84f9-48c4e9320de1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:7af0e8a7-33eb-4e1b-a6fa-881886fddb9e",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 223,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:2d909159-8132-4a4d-862e-ff5e09614591",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2351,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:c5e8adf8-a817-41b2-9c39-806e6d17c70b",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6622,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:fbff888c-6adf-4b99-b9c6-a6080bc6a61c",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 128327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "sr4ozNtYKNMK6wVKHpfYC",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:ba55c76e-f937-4489-b279-8d83327280ed"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "vbMRenCAyjtC3K_n_4AK0",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:886ca246-2f0c-4a6f-97e8-bb249f20f23c",
      "columns": [
        "CredenceID",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:6c684381-e628-44c3-b798-5ae304f884b2",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:1b4bef0a-b036-4cd1-a1c6-a401b6a06512",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:f7b35c02-2b99-4a83-9777-bdc31474c5a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:848ecba5-d7fd-4983-9160-6eaab98f12a2",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 351,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:7ea1f5ff-3a1e-4737-877e-9666d37e86a7",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:325c8823-39ad-4391-9c1b-27f9f6494c31",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:65b83626-5826-48bf-ac25-d227a7362fd7",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 891,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:47c6145f-f368-4f5e-8376-6b78d5334148",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 360,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:09715b6c-3cc9-4241-a1c4-9762e464b2af",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:8ffee0c4-f2d1-4cb2-9440-853d7b0aff09",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:2a0b8c9f-9dce-43dd-b9d9-a930a1aaef7a",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 608,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:251861b7-9375-468a-9133-4201fbc7614e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 562,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:78d2d0c5-4184-4802-8bd6-ff0d9b682fc5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:5eac3693-48f4-4432-bcf4-04457d1788db",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 114415,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1328,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
          "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:11ab89e4-238c-44a0-8524-f71d4e0a111e",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:6537c36b-e61f-484e-924c-6b45dcc9f767",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:00665462-a8c7-41e3-823f-ab691b2a9ba4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:bfa243ef-42e7-4e3c-9343-232017a7071a",
              "cell": {
                "columnId": "Netis",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:d7ab6dbd-5e56-473b-ab6a-684682093f7a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:430c27af-693c-4cec-9c50-366d474178e6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:74aa3f92-1354-4e04-91e9-e45ceebd8bc3",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 115743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2068,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
          "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:1c287c2f-151c-4193-be1c-867be440aa1a",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:ff60ce00-1707-4f71-98af-a594b15c8f3b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102811,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:5f051011-619c-4398-b3a9-3e44f6fc0cb6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:fa4e9a80-e15c-4610-b5bc-67dcc15ee189",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:9fafe7eb-0bf7-4d23-8193-969c26a9015f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 327,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:87877301-f2c3-4799-86c6-90d357891618",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:22c648b8-c9ae-4881-84f9-48c4e9320de1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1318,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:121e5755-cc0b-40a1-b312-a322edfa27ef",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:12291700-d765-4a49-9b92-8f22d6d96f2a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:ef0f1a9c-fe53-4814-8fbd-1699590aae24",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:d97aff51-8232-4137-9c7e-2b3efe0f8168",
              "cell": {
                "columnId": "Netis",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:d49e425c-4d09-48b7-8897-9e907a33c314",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:166e87fd-0ae4-41db-ae3a-d64ad0201796",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113147,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cbor),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:7af0e8a7-33eb-4e1b-a6fa-881886fddb9e",
              "cell": {
                "columnId": "Trential",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 223,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:013ebaad-00b1-47a1-950d-2cc07f73656c",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:3c485a6c-cd3f-4ffd-8464-68a88d7adae7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 426,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:caae3b77-8b2c-41f6-9c5c-8c05e4668f6a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:a6bcf025-a811-4266-ab05-ecd876983a10",
              "cell": {
                "columnId": "Netis",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:122c7951-b45c-4074-9d46-4d6e0ce70dd2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:0f2f9c14-d8bf-4ad8-a796-4cc33a65ebe1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:2d909159-8132-4a4d-862e-ff5e09614591",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2351,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:df6c49ca-e6e1-4bf1-b16b-abc73b658799",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1214,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:0998b05a-1527-4f50-ac19-30d2f8cc6e52",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1023,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:096f9eca-1c23-4e66-b64a-8702616931ae",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1017,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:7c5dc6ea-39c7-4059-bba4-ae148f57a98d",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:71c0ab59-55aa-414a-a5f2-271ac758348e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:d8b45f17-138c-4540-83d1-c5ffa97c8154",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:c5e8adf8-a817-41b2-9c39-806e6d17c70b",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6622,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "6trQoC_Ba8dIffc-KE-5b",
              "ctx": null,
              "_testId": "urn:uuid:59fb2010-a45b-44c0-a324-b295d6eb509f",
              "cell": {
                "columnId": "CredenceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "spyeRQzwQ8kXUUBsiRmj4",
              "ctx": null,
              "_testId": "urn:uuid:7f3e3106-6457-41e0-8aa7-65fedb3d3efa",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "P0ZU2V2vjZsbx1y02S0QD",
              "ctx": null,
              "_testId": "urn:uuid:5c08d426-f6e1-43c7-80dd-9a4bf37f89db",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "jQnxDM945FL-mt2q1Xiiu",
              "ctx": null,
              "_testId": "urn:uuid:c24dfbfb-051e-418c-811f-e7b41fee73c4",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "chGWWQzy1WrFh_WC5yjRm",
              "ctx": null,
              "_testId": "urn:uuid:273e62da-7e8d-4675-ad30-681a1f6abd9d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 112700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "9ACWjyexlZ5UalcTCSCYP",
              "ctx": null,
              "_testId": "urn:uuid:11fcc327-269a-4c44-ab60-7cace986549a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 113494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "apZAzb7eDIDMg_QMilhWI",
              "ctx": null,
              "_testId": "urn:uuid:fbff888c-6adf-4b99-b9c6-a6080bc6a61c",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 128327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: [\n          '/credentialSubject/id',\n          '/credentialSubject/driverLicense/issuingAuthority'\n        ],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Urgny8PJKjBaRcnLDaSyY",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 128550,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1042,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: [\n          '/credentialSubject/id',\n          '/credentialSubject/driverLicense/issuingAuthority'\n        ],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Urgny8PJKjBaRcnLDaSyY",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 129592,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 904,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: [\n          '/credentialSubject/id',\n          '/credentialSubject/driverLicense/issuingAuthority'\n        ],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Urgny8PJKjBaRcnLDaSyY",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 130497,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 444,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: [\n          '/credentialSubject/id',\n          '/credentialSubject/driverLicense/issuingAuthority'\n        ],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Urgny8PJKjBaRcnLDaSyY",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 130940,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 512,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: [\n          '/credentialSubject/id',\n          '/credentialSubject/driverLicense/issuingAuthority'\n        ],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Urgny8PJKjBaRcnLDaSyY",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 131452,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1450,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-r2WQ2brUrRP4R3vOknrv",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:4e80b856-f9ba-435f-82a7-6c052ed5f8a7",
      "columns": [
        "CredenceID",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "CredenceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:3734309a-7131-4fd6-8b96-c957c19d5563",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "CredenceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 132903,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"id\":\"urn:uuid:07329543-d54a-4ace-aa25-156ba973b146\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "id": "urn:uuid:07329543-d54a-4ace-aa25-156ba973b146",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.credenceid.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "problemDetails": [
                      "Invalid Verifiable Credential JSON- PARSING_ERROR"
                    ],
                    "credential": {
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      },
                      "verifiableCredential": {
                        "credentialSubject": {
                          "driverLicense": {
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6",
                        "proof": {
                          "proofValue": "u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA",
                          "proofPurpose": "assertionMethod",
                          "id": "urn:uuid:07329543-d54a-4ace-aa25-156ba973b146",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                          "cryptosuite": "bbs-2023"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "id": "@id",
                                "type": "@type",
                                "expirationDate": "urn:example:expiration"
                              }
                            },
                            "@protected": true,
                            "driverLicense": {
                              "@type": "@id",
                              "@id": "urn:example:driverLicense"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec"
                      }
                    },
                    "verified": false,
                    "results": {
                      "validUntil": [],
                      "credentialSchema": [],
                      "validFrom": [],
                      "proof": [],
                      "credentialStatus": []
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:904fa8a6-f076-49ce-abef-6d2cd4020627",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 133110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 549,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:443bf9c5-420e-4a3d-a7c3-d49ad625fbca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 133659,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:c0ae7a91-fbbc-4533-a3b1-54948a411e84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 134065,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"id\":\"urn:uuid:07329543-d54a-4ace-aa25-156ba973b146\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "id": "urn:uuid:07329543-d54a-4ace-aa25-156ba973b146",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:aaa77409-5838-4cb8-ad86-b9e3d44b8c81",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 134442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"id\":\"urn:uuid:07329543-d54a-4ace-aa25-156ba973b146\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "id": "urn:uuid:07329543-d54a-4ace-aa25-156ba973b146",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `CBOR deserialization failed: Semantic(None, \"Invalid value for `bbs_proof` property, expected byte array\")``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:b3bc87ff-a7c5-4443-8225-8f328e787ac8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 134557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"id\":\"urn:uuid:07329543-d54a-4ace-aa25-156ba973b146\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:9f539f74-0a9f-4c07-adfe-f0e0d16ec1d6",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "id": "urn:uuid:07329543-d54a-4ace-aa25-156ba973b146",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec#zUC7LefkJ2MJtULzRQfCMhJa5rcYad7XAn3nsSyk657q5AFpbmn9yk4QSh2BaaqvSeS5irGhf76iLkpGeWiDzM4AaNTjfy4uvpnCi2ALsW7ma3d41sHvcgyRPucBBdrUM9Nhcec",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwkABai0abYk2ibQYcjN1N25Tc2AD4WqXxL1K5k1d0hzybxEVBmQq3SKG-b2qE4r8ilynyVctVmQuwV2RZEFs3ErjLmBslmG-no6l2cFbK53hRfY7JI6S4Qp7KP66M4XfLrJdqcRysrgdQXlbNSOzitmwOJU92dDhk20KzLMvuN_OSpfSTER2Ptz_7ZVsiuc1mZRjz8bBHk6C4C6q0A23T9p76LsfuAPb63JAmKF6ad3VMkJVhUACtwozEP52UaAJAWD8mGjHhdtsnW1xj8552pBZU4RnLkGXMCFcVsm1znqzrIL84wGitbRJkkn4kRD-pWUpZAIvfI2ZxtUrEmOozbvWi8dZvpcQ1JWooCWOV0YcEXiafEDHVxilpgo-gar7XOHW80oNTLK4rZTTSPmiPoz2NOS9Dhqzd4fvdofXqR-n42Af9mwnqDPB3Ir_ygDkaazu25cKJeVFpRG6zxX739kx7QoGW7HIuV9WvSzHazkyhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:1657fdc8-0134-4598-8cf1-94fc8a29d409",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 134603,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2402,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "CredenceID should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:efe9ceda-ba97-4724-8929-29661ae413b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "CredenceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 137005,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"created\":\"2024-12-08T19:07:41.835Z\",\"verificationMethod\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "created": "2024-12-08T19:07:41.835Z",
                          "verificationMethod": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.credenceid.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "problemDetails": [
                      "Invalid Verifiable Credential JSON- PARSING_ERROR"
                    ],
                    "credential": {
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      },
                      "verifiableCredential": {
                        "credentialSubject": {
                          "driverLicense": {
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2",
                        "proof": {
                          "proofValue": "u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA",
                          "created": "2024-12-08T19:07:41.835Z",
                          "proofPurpose": "assertionMethod",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                          "cryptosuite": "bbs-2023"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "id": "@id",
                                "type": "@type",
                                "expirationDate": "urn:example:expiration"
                              }
                            },
                            "@protected": true,
                            "driverLicense": {
                              "@type": "@id",
                              "@id": "urn:example:driverLicense"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ"
                      }
                    },
                    "verified": false,
                    "results": {
                      "validUntil": [],
                      "credentialSchema": [],
                      "validFrom": [],
                      "proof": [],
                      "credentialStatus": []
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:110c71c0-e8c9-4fb2-bc93-d8c89fbcf870",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 137127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:cd8c5e0a-9262-4116-847d-58da729eea16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 137439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:97418a19-dc17-4054-a342-dcf69736b2be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 137850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"created\":\"2024-12-08T19:07:41.835Z\",\"verificationMethod\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "created": "2024-12-08T19:07:41.835Z",
                          "verificationMethod": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:2040df9d-8a21-42dd-913a-1292275595b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 137972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"created\":\"2024-12-08T19:07:41.835Z\",\"verificationMethod\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "created": "2024-12-08T19:07:41.835Z",
                          "verificationMethod": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `CBOR deserialization failed: Semantic(None, \"Invalid value for `bbs_proof` property, expected byte array\")``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:21e3f2cf-aca2-4fcb-901d-46854a422c5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 138088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"created\":\"2024-12-08T19:07:41.835Z\",\"verificationMethod\":\"did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:66ca8139-a1c1-4f28-9ff9-b14bb3a427d2",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "created": "2024-12-08T19:07:41.835Z",
                          "verificationMethod": "did:key:zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ#zUC7DerdEmfZ8f4pFajXgGwJoMkV1ofMTmEG5UoNvnWiPiLuGKNeqgRpLH2TV4Xe5mJ2cXV76gRN7LFQwapF1VFu6x2yrr5ci1mXqC1WNUrnHnLgvfZfMH7h6xP6qsf9EKRQrPQ",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwgH5_m1qOTDnY8Emzqzbo7rks0cqZtSsR_GJXJu1rWzdT0dtYeTkzmzb2cui1nagYpnVbmwdwiKvfdJwWnaY9F6ySdWzp5dGBQTvQDxyU3Whgc3EWMbbJqpO6JH56lJ0DoIR1R-Jn68tZOs-IKIopCaLT5MHVpS45RqxDdeCPoI80mVE0F24b2SbC5z3X-R2NKSUHmipGUVO2gzzgIklvXRZkoGd9t_L7hfMsGHhI3j1omkwtJx804u3gN7cvZDj4X1Qbd9adMDGULTxpDv74HVbOe0K0hAWN_2I9P-n7gCZOrNpfSQtEtJD6lM9DlZirNs7OJjr6d8tlreyGEEWtJoYCqD2Hhx9rO7Q26Zh8hVMZmjhABxHP2dwBrs3-WV_VI26wM1G-LZpoV7Kn80B7jgAQ8YGTJyfixFKDGWk9eXHTzb5xUOwpIY1QAIByjhk1CleUsMKn76TsXw1uWQN0Kh0CAn4HW3LUhUZODsBrkbGhAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:3d31374c-83b3-4fbd-a2dc-c21273d349f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 138129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1969,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Procivis One Core",
          "cells": [
            {
              "type": "test",
              "title": "CredenceID should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:3d136698-e06b-4553-aa97-976060899b59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "CredenceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.credenceid.com/credentials/verify",
                  "status": 500,
                  "data": {
                    "problemDetails": [
                      "Verification failed: org.json.JSONException: JSONObject[\"type\"] not found.\n\tat org.json.JSONObject.get(JSONObject.java:596)\n\tat org.json.JSONObject.getJSONArray(JSONObject.java:789)\n\tat com.android.identity.wallet.server.CredentialVerificationServlet.verifyCredential(CredentialVerificationServlet.kt:130)\n\tat com.android.identity.wallet.server.CredentialVerificationServlet.doPost(CredentialVerificationServlet.kt:46)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.filters.CorsFilter.handleNonCORS(CorsFilter.java:331)\n\tat org.apache.catalina.filters.CorsFilter.doFilter(CorsFilter.java:158)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:731)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:663)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"
                    ],
                    "credential": {
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      },
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      }
                    },
                    "verified": false,
                    "results": {
                      "validUntil": [],
                      "credentialSchema": [],
                      "validFrom": [],
                      "proof": [],
                      "credentialStatus": []
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:4905db72-f5bf-4f28-bbfe-954ca4a00da4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occurred in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should have required property '@context'",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "errors": [
                                  "Error: JSON pointer does not match the given document"
                                ]
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "missingProperty": "@context"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/required",
                            "schema": {
                              "description": "",
                              "title": "Verifiable Credential"
                            },
                            "value": {
                              "errors": [
                                "Error: JSON pointer does not match the given document"
                              ]
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should have required property '@context'\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "errors": [
                                  "Error: JSON pointer does not match the given document"
                                ]
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "errors"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "errors": [
                                "Error: JSON pointer does not match the given document"
                              ]
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "errors": [
                                  "Error: JSON pointer does not match the given document"
                                ]
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "errors": [
                                "Error: JSON pointer does not match the given document"
                              ]
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occurred in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:2f8d2776-ad0f-416b-b93e-59c68b9c66aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must have required property '@context'"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:39dca83e-4638-4d3d-abaf-0689625de96e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:c0111cd3-c379-4cb7-95d3-6a5ae68f76aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:53a9c04d-811b-459d-acab-fb2d49c102d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140462,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:9baac5b7-73e9-4af3-bb93-251ea8b8d014",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 140488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 896,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: verifiableCredential object sh… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"errors\":[\"Error: JSON pointer does not match the given document\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "errors": [
                          "Error: JSON pointer does not match the given document"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.trential.dev/indisi-vc/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "verifiableCredential object should contain `proof`"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: verifiableCredential object sh… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "CredenceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:2e7371a2-1217-4970-b3bb-5eaaf5eddb1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "CredenceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 141385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.credenceid.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "problemDetails": [
                      "Invalid Verifiable Credential JSON- PARSING_ERROR"
                    ],
                    "credential": {
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      },
                      "verifiableCredential": {
                        "credentialSubject": {
                          "driverLicense": {
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "proof": {
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA",
                          "proofPurpose": "assertionMethod",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "cryptosuite": "bbs-2023"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "id": "@id",
                                "type": "@type",
                                "expirationDate": "urn:example:expiration"
                              }
                            },
                            "@protected": true,
                            "driverLicense": {
                              "@type": "@id",
                              "@id": "urn:example:driverLicense"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X"
                      }
                    },
                    "verified": false,
                    "results": {
                      "validUntil": [],
                      "credentialSchema": [],
                      "validFrom": [],
                      "proof": [],
                      "credentialStatus": []
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:0af12e70-5c52-4b45-985a-39ebf081e7a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 141526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 407,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:303:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:272:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:260:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:e9f97377-1e65-4e26-b5cd-b819fb3a977e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 141933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [],
                    "warnings": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:ef1c67ef-7134-4cf5-9cb7-a54f9b7c22bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 142320,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:f081aa6d-cc4d-4428-9fad-09f6ca8dfaf1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 142447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `CBOR deserialization failed: Semantic(None, \"Invalid value for `bbs_proof` property, expected byte array\")``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:6b57c94d-e8f3-4654-8e44-526f6aba33dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 142562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:db9f58e2-5e06-44c4-88e1-f3eb24a2d7a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 142628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2977,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"bbs-2023\",\"verificationMethod\":\"did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:b94e9d38-bb73-4be2-8f99-85dc23206d56",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "bbs-2023",
                          "verificationMethod": "did:key:zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X#zUC7Ker8jsi8tkhwz9CN1MdmunYbgXg4B7iTWJoPFiPty3ZrFg8j3a5bBX1hozUZxck8C73UunuWBZBy7PtYDCe9XYqGjWzXRqyLFqxWGo5nGArAvndYVqSQJhULMJFq5KKgW2X",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQIQj0f3lLcDPCsXeipyjT1uYOiLy4owdbE9kNUlNKuxfm6E26C75Ldm_mluNx6QPw5ui39MsZ-Y_HX_8EvHt5omveBaUiv4Ats6rabbjgl1zO6UNGY5LqPolKTqgMhDPHaDlJ6uNEnIDJ8z9IOnp6p8WCwJ5YnLrVIbyfOGWrPSarvcGpP8SVEbZKfJtMW5NWjdQacnXId1K5xMTwY6779-SbuDroWnFu7ZBZPN5f9eOoQfdQAaIWMvIFSO9YGG_PNz9g1EleWSRARpoCSoDsaRzx8jw5j6asFHwZgByQ1ZT1PE--Dn37c63fB_-d_KS26sFeRMduHzRe0QG3oMzry8DkcmhsVYAXx2RkJcngAfx_5CfEmSZi4bdKLbBj-mppGNkkogIDK1Tg17lRnLZHfiNhf3MoPhCIXfA5o53R6ATwwsv-Qe3iJ8AZV35eI9JVtGWr0ZIXna4QEzs1g0tfPQcuTf-_uJ85dcsNLWEhWHPLkhhUwTSSkH0kY_RIab-Ea0HGXBYMhI2WhG-QlV_p7xIWPK4GnFs200bPyWcufVljdAtlU0HmRwNZvRoDwNnZt7Re6MpiJt-ebaPCliZp6AUfkB5rJZyElkiZ8V_Mvm1qM4ekrWJWyb0dJIsBFpZHnIV5PmlMYoIILixOdYM4b-fABKrYbcyhjs5ByINBZVZ4fCSgjZ0aFU6asw-_aJnuwyoQAAgwECBIQEBgcL2EBA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.trential.dev/indisi-vc/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "invalid proof"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            }
          ]
        },
        {
          "id": "Trential",
          "cells": [
            {
              "type": "test",
              "title": "CredenceID should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:3856ecc7-3a6c-4616-bfd4-76d79c2eb644",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "CredenceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 145607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.credenceid.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "problemDetails": [
                      "Invalid Verifiable Credential JSON- PARSING_ERROR"
                    ],
                    "credential": {
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      },
                      "verifiableCredential": {
                        "credentialSubject": {
                          "driverLicense": {
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105",
                        "proof": {
                          "proofValue": "u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA",
                          "proofPurpose": "assertionMethod",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                          "cryptosuite": "bbs-2023"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "id": "@id",
                                "type": "@type",
                                "expirationDate": "urn:example:expiration"
                              }
                            },
                            "@protected": true,
                            "driverLicense": {
                              "@type": "@id",
                              "@id": "urn:example:driverLicense"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR"
                      }
                    },
                    "verified": false,
                    "results": {
                      "validUntil": [],
                      "credentialSchema": [],
                      "validFrom": [],
                      "proof": [],
                      "credentialStatus": []
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:4f89acc4-0d85-401c-bfdf-7fe266679659",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 145726,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:d1e8023f-870b-4f8f-b3b3-4f5f527372f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 146042,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 407,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:54ec1a12-4c01-4238-83cd-6c7ebad8ee9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 146449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:5205f828-128b-4291-81e9-831f17dd7f4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 146572,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `CBOR deserialization failed: Semantic(None, \"Invalid value for `bbs_proof` property, expected byte array\")``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:68c2c0c7-2e72-4966-9ddf-edb7ee15d878",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 146685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"issuingAuthority\":\"VA\"}},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:f308ec92-b31a-4bf1-afab-8754ff5dd105",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "issuingAuthority": "VA"
                          }
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR#zUC7CXttUsbVYVwQCmuvaNePRj8kn8gY9EhfHrK9tJHssoL9PFqjHcStndAb1tHLgq5p563boFKGKCt4zHTtcCvdVogfb3HjL9oGAWjweioYC2m7svK6hHHh2Mj3mxw6bjQK9cR",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhdhAWQFwpq-pN_MFYPMz5CxSoeREt659-q-EMwCjF3rWQFv6TkPsoj6zceqKRhBiPkVY2DUJjJyCJqmU_Bxs7bbSwvaFEWGrzy2fC7thhsY39ETQ0h0SxHH6B6Xvwrem5gpUb2gzolYwbDCAnEMaoaKIalmqAOmd3dvKWfhLNyl3abDzkSELUZYS90xIBFLuJbHjihuBGW4haI5EqGtOXDRG13EzgUdqu_ezKSUqzJwCdw7KUS9jX_0y2PXLhBW6uoNWV2Ak9anFEhLEAUhtLp0uSWrw6C0j770L1Ige_PCcp3sEZ4iFqfEc3WBzGbmmWxNAxPtFVkOodN83w8l2wBjhmFaVykUkRaX0z6Np3V5v9bVSROACWc1HlhINJjSttG2WmiIt0926BKHdHPRxbjb0XZcL7yaYfIUkR6l-ExsK5u4cs6MNtDUIoS73k49l7ajE0n01NYBIrvjLgNsQ_UhSGm7CyJ1W5Zq81z5GdiS-9F2oTzihAACDAQIEhAABAgbYQEA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:56:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js:66:9)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "Urgny8PJKjBaRcnLDaSyY",
              "ctx": null,
              "_testId": "urn:uuid:04159dd2-cf32-4ef5-be18-79088b815100",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 146729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2272,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-bbs-test-suite",
    "subtitle": "Interoperability test suite for BBS Data Integrity cryptosuite.",
    "github": "https://github.com/w3c/vc-di-bbs-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-bbs-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity BBS Interoperability Report 1.0",
  "stats": [
    "Tests passed 483/515 93%",
    "Tests failed 32/515 7%",
    "Failures 32",
    "Tests skipped 30",
    "Total tests 545"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}