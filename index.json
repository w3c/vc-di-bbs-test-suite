{
  "matrices": [
    {
      "title": "Data Integrity (bbs-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:789fb805-c249-4c8f-90ce-b3d3de96b5a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:ba227aa9-82fa-44b4-a261-8af11a7abf04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:d90054b9-4a2b-411a-8331-027e4a3a21d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:c437f7b8-c0ef-45e3-a0ca-013787b6d0f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:f3deebfc-6ee3-42f6-b032-60583baf6046",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:72f296cb-09e5-4eea-9cf3-943afeb2d833",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:5e3d13a6-3de0-4deb-86f1-c51a2bf337c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:e3b111ce-1810-49dd-aff8-28b4929564f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:717aabbd-04e8-468f-b3ca-3a12ad44d2fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:2efc3982-fde2-43fb-9766-0ec1560f17d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:38a42cf5-73de-41b4-9954-b5e616dc1198",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:67a31701-7f90-4b9d-96cd-bd3038995c3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:0dfe3cf6-3997-418e-b4a7-6be3a00181ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:371ba128-d29e-451e-b05e-0edfcc1632a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:75958028-9543-4f88-af5a-a514eb920713",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 559,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "whXD0KzZI4PGeSXtUeSwb",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:5de81347-df54-487c-bc90-b583d4cab52c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ai4CLdEHMaaHCS17Dksw4",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:499201ad-a121-4e54-b624-40e15122e9a6",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:789fb805-c249-4c8f-90ce-b3d3de96b5a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:ba227aa9-82fa-44b4-a261-8af11a7abf04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:d90054b9-4a2b-411a-8331-027e4a3a21d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:c437f7b8-c0ef-45e3-a0ca-013787b6d0f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:f3deebfc-6ee3-42f6-b032-60583baf6046",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:72f296cb-09e5-4eea-9cf3-943afeb2d833",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:5e3d13a6-3de0-4deb-86f1-c51a2bf337c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:e3b111ce-1810-49dd-aff8-28b4929564f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:717aabbd-04e8-468f-b3ca-3a12ad44d2fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:2efc3982-fde2-43fb-9766-0ec1560f17d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:38a42cf5-73de-41b4-9954-b5e616dc1198",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:67a31701-7f90-4b9d-96cd-bd3038995c3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:0dfe3cf6-3997-418e-b4a7-6be3a00181ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:371ba128-d29e-451e-b05e-0edfcc1632a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "7akUB2gjdw_5bVtc1Vd6h",
              "ctx": null,
              "_testId": "urn:uuid:75958028-9543-4f88-af5a-a514eb920713",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "SPEMnIahZZETqaAx4gcY2",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (issuers) VC Version 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
              "body": "function() {\n          proofs.some(\n            proof => proof.cryptosuite === 'bbs-2023'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" property \"bbs-2023\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:1acc49f5-3739-41ae-805b-4002b737bbd3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"bbs-2023\"."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:e8d78307-2881-41bd-ae1e-49d17cd626a1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:916ee7a8-00c7-48e6-9745-f9c58f019293",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:ad054ec7-e626-431c-947b-5c419a9c1a4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:37bce98d-c175-4f85-ae6a-83a05d01aceb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:c1231dfe-0e1f-4edd-b685-c4eff9fc3a58",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "NUL4XjXhDtuzD9laT5a5c",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:b3516165-2165-4e98-9610-4d1c6b640748"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ai4CLdEHMaaHCS17Dksw4",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:78347763-4108-48e8-a7a9-8af0e0295451",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
              "body": "function() {\n          proofs.some(\n            proof => proof.cryptosuite === 'bbs-2023'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" property \"bbs-2023\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:1acc49f5-3739-41ae-805b-4002b737bbd3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"bbs-2023\"."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:e8d78307-2881-41bd-ae1e-49d17cd626a1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:916ee7a8-00c7-48e6-9745-f9c58f019293",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The derived \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:ad054ec7-e626-431c-947b-5c419a9c1a4a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:37bce98d-c175-4f85-ae6a-83a05d01aceb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "GYa01IWtB-cQU5pXu04hE",
              "ctx": null,
              "_testId": "urn:uuid:c1231dfe-0e1f-4edd-b685-c4eff9fc3a58",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"If the \"proof\" field is missing, an error MUST be raised.\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IhofdxBvyjHHGs4q6s7ti",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "_error": null,
              "state": "failed",
              "err": {
                "name": "jsonld.ValidationError",
                "details": {
                  "event": {
                    "type": [
                      "JsonLdEvent"
                    ],
                    "code": "invalid property",
                    "level": "warning",
                    "message": "Dropping property that did not expand into an absolute IRI or keyword.",
                    "details": {
                      "property": "created",
                      "expandedProperty": "created"
                    }
                  }
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SM5u3yHgShSgkr85m5gWv",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:b42cfe1d-1700-4d2c-b949-c6e8b26edc11"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ai4CLdEHMaaHCS17Dksw4",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:51e6232e-c19f-40d2-be80-b37591d4a571",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (verifiers) VC 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "6Af8VUiH7dWRH3TtOx6n-",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:33aedf72-5a5d-4259-b922-f98592961b2c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 461,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:d0071419-a619-44fb-982a-d9a3d258b51d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:4964c4e1-f004-4efb-913f-35f60403f4ef",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 428,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:cd946f5b-62e1-4df4-a9d0-584f56898066",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMIrhg-d79AYVRyYjTdvZtrXcS8BWqRYkj2dbvoI63a71GIl9DPGQu9cPW9vH70K_uLDgFHnkHqRxzBDdygFIbZpU_K0Qdk_GBAkqVTIKwXF60PX_M_sVe0uDCj6u4Y8TFaaRKrNEXN5l--vpgbkFLobgyN9DLX_ZPLK6dguaUjWL_WMgbi-qu6WAi5tkUjd2BhnVrqUtFxH6FK0khIWOm0iTBTpUjVIXCcZHVMphQBB9S47oDwbfMCVfd0c91ngWgkUa8lhJMKMvKideqM3wVZdfPKzIc78zIKCw_efULkBPw4MmtKvLa0lirYvsawZ96xuf6GXsdhH7sARUNKvX2iSIXf85IQ5gNIa7OpKiJtsMCn5AXtlGrrXsb3RLHzQi1nP5z6FKShQ-IzPfuLB0oySwAAABDgIEAwYEAgULBgcHAwgFCQEKCgsPDAwNCQ4NDwiDCwwOmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHxggGCEYIhgjGCQYJRgmGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMIrhg-d79AYVRyYjTdvZtrXcS8BWqRYkj2dbvoI63a71GIl9DPGQu9cPW9vH70K_uLDgFHnkHqRxzBDdygFIbZpU_K0Qdk_GBAkqVTIKwXF60PX_M_sVe0uDCj6u4Y8TFaaRKrNEXN5l--vpgbkFLobgyN9DLX_ZPLK6dguaUjWL_WMgbi-qu6WAi5tkUjd2BhnVrqUtFxH6FK0khIWOm0iTBTpUjVIXCcZHVMphQBB9S47oDwbfMCVfd0c91ngWgkUa8lhJMKMvKideqM3wVZdfPKzIc78zIKCw_efULkBPw4MmtKvLa0lirYvsawZ96xuf6GXsdhH7sARUNKvX2iSIXf85IQ5gNIa7OpKiJtsMCn5AXtlGrrXsb3RLHzQi1nP5z6FKShQ-IzPfuLB0oySwAAABDgIEAwYEAgULBgcHAwgFCQEKCgsPDAwNCQ4NDwiDCwwOmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHxggGCEYIhgjGCQYJRgmGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1174
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:58:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:214d8356-cba8-454a-a0cf-11e0f0bdbd06",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KXZztW3TcfLkoH08xkunbX5JNIc49GEisfeuW5Y0StC9n2xyQ3yuAoyfemG8WPI6IGFAytmR4r6j3XcqYXcWzM4BXY8TSi3V7lL__7SqzMw_KVWi9atetY7vnPq7EjUz4rL7FO0HIscHeS4U-GAoaR4r14rhrDSj7DkQIvTty5WPoFCZMtRI24-S-vrFVeAj1SlwePqSl6nzKjb3jIXCLsJkeMjGWXFXjcEvfSrKS05TrOmFBXnQUX3C_J3-2B-_sHD_qYrxKNhEqMQD-xuBRpMCouG4YPSFsSyoK6UxRLXoIj3efdq7MPPdXn31edH7jF7ivSiLmJBS2hCblDBzO3zUOkZEGHrINVtiQHR-WmPaDMdRdisjNEJSYhOxz3f0G846PU5-4S7phdBfQmH-LQ688xl05TYpV3HSOLjkjLOz4NG-FMA0rI6CJzLTnLWNheYX4hrzfacDpudstwhpwHRHAOaY2fBOsyv7rRKVx9pBcob1QVQGNeMyljBZsCkttbyQEGGx4dYRN9e3puRyfkbNdXWhOLdlG19j7QXh4ZZ5f4KAqud0UGlFU3STDOVoDWgjqUynm91mJHoNPGYQfR5ixYUQaxS1QsQXbCZvC-RTiC1CLDX361BZz0-RecXC8JSZgzpcxQkjG0AbijZoP40lEbE6jc9f0zz0Si5qbJFOANqVEZIEQBv3f9P0qB_Bz1xuuWF0aWxLGQ7ASbJGQTWO9jb9vpaeaJrmtoXKk_ZNapbNIH0cwMyNN0c8084O27uZHNMsckygwrCUEmW_yBprEb3PMyD7compuXEFjW-w7K5V0FgTWD-pnujV2kv3j3QirehnsRYEw4ToHen2L6e_SvPWOd3AMkQJvcsWlg9VSDI2pbpTlBxrTc5IqH2EDrE7Pb_Oti6nISOFzX6ELJaTpE3R4x2eb3FfV9WwRDslWIflvDZ_oaCwmnDhbwkRkZLoJ0_IFogLAmkAIFkuLaQjkqnk8GymnfZ_4spVsWYZgod5fr0A-VKldU6He_qxrjneZklzcfPoulkkFaApVYmRWNpqEBlpjujwS_0Sy7AiCkNokLhpl1VqsCnUCMYbxTQw1qeGZk8hXPHGoUZ-22ehEXz-uXQlQazOjCJW2TESe5sApdRyLbvG-aDzdrMtzUi7BOjzMCiMkBbF5KhpqsZh0iRiFgPFcrMso7DOmxSBVYsbtODgn-mTWIPtbFuFDI5rXU0HVuuGT3IhHzr2Bi_ebH7xzExPc6gZ97iD-xlPheLFtLYVGhq-sYqqa8TdoYzh6XHVE3ce0iKuDhpRy6rAAkBBQIBAwcEAAUDBgwHAggECQYKCIMICQuYIgECAwQFDA0OGBgYGRgaGBsYHBgdGB4YHxgiGCUYJhgnGCgYKRgqGCsYLBguGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KXZztW3TcfLkoH08xkunbX5JNIc49GEisfeuW5Y0StC9n2xyQ3yuAoyfemG8WPI6IGFAytmR4r6j3XcqYXcWzM4BXY8TSi3V7lL__7SqzMw_KVWi9atetY7vnPq7EjUz4rL7FO0HIscHeS4U-GAoaR4r14rhrDSj7DkQIvTty5WPoFCZMtRI24-S-vrFVeAj1SlwePqSl6nzKjb3jIXCLsJkeMjGWXFXjcEvfSrKS05TrOmFBXnQUX3C_J3-2B-_sHD_qYrxKNhEqMQD-xuBRpMCouG4YPSFsSyoK6UxRLXoIj3efdq7MPPdXn31edH7jF7ivSiLmJBS2hCblDBzO3zUOkZEGHrINVtiQHR-WmPaDMdRdisjNEJSYhOxz3f0G846PU5-4S7phdBfQmH-LQ688xl05TYpV3HSOLjkjLOz4NG-FMA0rI6CJzLTnLWNheYX4hrzfacDpudstwhpwHRHAOaY2fBOsyv7rRKVx9pBcob1QVQGNeMyljBZsCkttbyQEGGx4dYRN9e3puRyfkbNdXWhOLdlG19j7QXh4ZZ5f4KAqud0UGlFU3STDOVoDWgjqUynm91mJHoNPGYQfR5ixYUQaxS1QsQXbCZvC-RTiC1CLDX361BZz0-RecXC8JSZgzpcxQkjG0AbijZoP40lEbE6jc9f0zz0Si5qbJFOANqVEZIEQBv3f9P0qB_Bz1xuuWF0aWxLGQ7ASbJGQTWO9jb9vpaeaJrmtoXKk_ZNapbNIH0cwMyNN0c8084O27uZHNMsckygwrCUEmW_yBprEb3PMyD7compuXEFjW-w7K5V0FgTWD-pnujV2kv3j3QirehnsRYEw4ToHen2L6e_SvPWOd3AMkQJvcsWlg9VSDI2pbpTlBxrTc5IqH2EDrE7Pb_Oti6nISOFzX6ELJaTpE3R4x2eb3FfV9WwRDslWIflvDZ_oaCwmnDhbwkRkZLoJ0_IFogLAmkAIFkuLaQjkqnk8GymnfZ_4spVsWYZgod5fr0A-VKldU6He_qxrjneZklzcfPoulkkFaApVYmRWNpqEBlpjujwS_0Sy7AiCkNokLhpl1VqsCnUCMYbxTQw1qeGZk8hXPHGoUZ-22ehEXz-uXQlQazOjCJW2TESe5sApdRyLbvG-aDzdrMtzUi7BOjzMCiMkBbF5KhpqsZh0iRiFgPFcrMso7DOmxSBVYsbtODgn-mTWIPtbFuFDI5rXU0HVuuGT3IhHzr2Bi_ebH7xzExPc6gZ97iD-xlPheLFtLYVGhq-sYqqa8TdoYzh6XHVE3ce0iKuDhpRy6rAAkBBQIBAwcEAAUDBgwHAggECQYKCIMICQuYIgECAwQFDA0OGBgYGRgaGBsYHBgdGB4YHxgiGCUYJhgnGCgYKRgqGCsYLBguGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1175
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:63:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:d0b63f48-159c-4640-8c6f-1f23ebf9dab2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11647,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkJKv3uINRWROG_HQ-Tpjk7Fd1EvJPP1Bduky1y0MC7aPBVpvJnVh9inyD2skGF-pmLUtWQTp4lyqjfeYenEsosViJJ55VnZRX2S6r6IT0iJxnPJHRGAVzLzr-S_ol-okb6e-giQY4xbEUTtZuNMB9bTKWLoYc0LrqRcs03ddxaSoHPUcu_kBoQtKi5H510bTUi2xMbVLYApi29hhjHd3GfrkZRiT9uLwVYdwRZf3mH5yYSHvGIJaNtIQFSgvRfaJTaeR51cIRcLu5HX2vbw5ndogVecyk69VxpO95yBpM4BkjCACGv3FDa6VyUN6OlzDWhSIhsQTv88crChhbxrk_gyF1Z9AQa0cweYTo_ezIeXYNHjAMA2UwOL0b8yeFCVsWJvw5J1lgcTU_O5OQWUTJxc0TPtCFLR5WvBPpsUA7TDovhdZGRKjsnFoBVHtcBOrKivEdYIJo23Lcboqq1UJOqRv-t--vElT2plk6zxuFLC7USE69YG75-IklHTeWJGYd153SOCfml7fkzykXMKAUUks8B9IN669G9vq36KJdI0riKb9bHSiyE3GhpVwVkJCuxm1qE7MuUKGBpSd6z2lMpwS_RawkVRjba0RubVW_REjcapXt6HJKmogEvTpuZJrBiPDDHElFTuU8KV6h08d2rdrdHW66RahgkZaLpbX1faegl2xuHCbTBVvYOlk74_Ik0ZqIiXKztaZroXR-Lwvaj1fKhsdzAhU45DPFJnyGqSQJtS7tZy1yJkFFrV8iXyGi3FwIkt56xGQ2dTnbhZAoVwe1teYfe5FsVp1tF4NlZRaeWeP6sUa53tRjdB_-boBjhJVbm2m-5od_hKzvu_wOpV3jDV-WTOg8-wTg57evK92B8rXp49D-2IdVWMnPokKSQwieiW9CLL1yq9kxVP56o9T7GrUlEOlutMGQUPxBRJr6627ssvzSK2bQ5MCQHqofTNZFlTXeWkz16GXzk2R_7gG3IbuDwOKyjsE4shBPSxqW7tbEvB44w3OErkbwwhKgok5h-b48_cgh_4EE2iEn7JSMwA04gnbM1bcw9_A4jMcRSzhrcJS0imCCWf3YlNUK24jMLCIcwrSY6Ev1hjULz_55OgGUXSjYmQVJU_NFZGxEemXZbwa5rizlL-dyup32DmSfJh3Meug38dP1HxT8AgUi1iGjaqRc041xkTeVUZofJDuNG-dFO9r659ZqMTwfSIZLasr_NxxBlp0dsJAp3NP7vGwwVksVOu-JnT21VwcEsYCdZ0wKY385O--W4oqu2Qx_dBrLQ_4E4YMzvfH51BtztNq-5BMMgoKijeXG_lXGKTex52EN3I6j2xvauBEXk9_7amJAF8ZUQJN49rbZDR6RCjB77a5dSQOKhxNloXNEyvYOaXzTEBsWJ-4B1-IfWaVLrLmJX30e4Oi9CGDakIxhnLJRAl5zGel07rrpP_7NJCKdKL93bxwNlMVD_UHFk_rDVN07AM4jnc3Tgh5c5nWgH-plgN1fCYOEj9s5yFULT36CP0ecOdcGrMzaJoRSKtqt47rvHBxDrfGv4B6QEipAAsBAgIAAwoEDgUDBg0HCAgPgxgYGBkYG5gcAAECBgcICQoLFBUWGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYMhgzGDRA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkJKv3uINRWROG_HQ-Tpjk7Fd1EvJPP1Bduky1y0MC7aPBVpvJnVh9inyD2skGF-pmLUtWQTp4lyqjfeYenEsosViJJ55VnZRX2S6r6IT0iJxnPJHRGAVzLzr-S_ol-okb6e-giQY4xbEUTtZuNMB9bTKWLoYc0LrqRcs03ddxaSoHPUcu_kBoQtKi5H510bTUi2xMbVLYApi29hhjHd3GfrkZRiT9uLwVYdwRZf3mH5yYSHvGIJaNtIQFSgvRfaJTaeR51cIRcLu5HX2vbw5ndogVecyk69VxpO95yBpM4BkjCACGv3FDa6VyUN6OlzDWhSIhsQTv88crChhbxrk_gyF1Z9AQa0cweYTo_ezIeXYNHjAMA2UwOL0b8yeFCVsWJvw5J1lgcTU_O5OQWUTJxc0TPtCFLR5WvBPpsUA7TDovhdZGRKjsnFoBVHtcBOrKivEdYIJo23Lcboqq1UJOqRv-t--vElT2plk6zxuFLC7USE69YG75-IklHTeWJGYd153SOCfml7fkzykXMKAUUks8B9IN669G9vq36KJdI0riKb9bHSiyE3GhpVwVkJCuxm1qE7MuUKGBpSd6z2lMpwS_RawkVRjba0RubVW_REjcapXt6HJKmogEvTpuZJrBiPDDHElFTuU8KV6h08d2rdrdHW66RahgkZaLpbX1faegl2xuHCbTBVvYOlk74_Ik0ZqIiXKztaZroXR-Lwvaj1fKhsdzAhU45DPFJnyGqSQJtS7tZy1yJkFFrV8iXyGi3FwIkt56xGQ2dTnbhZAoVwe1teYfe5FsVp1tF4NlZRaeWeP6sUa53tRjdB_-boBjhJVbm2m-5od_hKzvu_wOpV3jDV-WTOg8-wTg57evK92B8rXp49D-2IdVWMnPokKSQwieiW9CLL1yq9kxVP56o9T7GrUlEOlutMGQUPxBRJr6627ssvzSK2bQ5MCQHqofTNZFlTXeWkz16GXzk2R_7gG3IbuDwOKyjsE4shBPSxqW7tbEvB44w3OErkbwwhKgok5h-b48_cgh_4EE2iEn7JSMwA04gnbM1bcw9_A4jMcRSzhrcJS0imCCWf3YlNUK24jMLCIcwrSY6Ev1hjULz_55OgGUXSjYmQVJU_NFZGxEemXZbwa5rizlL-dyup32DmSfJh3Meug38dP1HxT8AgUi1iGjaqRc041xkTeVUZofJDuNG-dFO9r659ZqMTwfSIZLasr_NxxBlp0dsJAp3NP7vGwwVksVOu-JnT21VwcEsYCdZ0wKY385O--W4oqu2Qx_dBrLQ_4E4YMzvfH51BtztNq-5BMMgoKijeXG_lXGKTex52EN3I6j2xvauBEXk9_7amJAF8ZUQJN49rbZDR6RCjB77a5dSQOKhxNloXNEyvYOaXzTEBsWJ-4B1-IfWaVLrLmJX30e4Oi9CGDakIxhnLJRAl5zGel07rrpP_7NJCKdKL93bxwNlMVD_UHFk_rDVN07AM4jnc3Tgh5c5nWgH-plgN1fCYOEj9s5yFULT36CP0ecOdcGrMzaJoRSKtqt47rvHBxDrfGv4B6QEipAAsBAgIAAwoEDgUDBg0HCAgPgxgYGBkYG5gcAAECBgcICQoLFBUWGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYMhgzGDRA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1176
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify proofValue to not start with 'u'\n          signedCredentialCopy.proof.proofValue = 'a';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:f2f8c014-d6e9-4dd8-b7ca-43f6e636e3ac",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:32:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:b1a0f81d-c10a-4a84-ab16-3bd95c569dcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = getTestVector(signed);\n          const signedCredentialCopy = klona(credential);\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:ee3febcc-082f-41d4-a36a-0e94d972acb9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            const signedCredentialCopy = klona(credential);\n            // intentionally modify `credentialSubject` ID\n            signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n            await verificationFail({\n              credential: signedCredentialCopy, verifier\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:32e053f2-84ac-4be6-9ac8-4f8896a7d0ef",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 513,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          const baseReason = 'Should not verify a VC with no ';\n          const vectors = new Map([\n            ['type identifier', ['type']],\n            ['cryptosuite identifier', ['cryptosuite']],\n            ['verificationMethod', ['verificationMethod']],\n            ['type & no cryptosuite identifier', ['type', 'cryptosuite']],\n            [\n              'type identifier & no verificationMethod',\n              ['type', 'verificationMethod']\n            ],\n            [\n              'cryptosuite identifier & no verificationMethod',\n              ['cryptosuite', 'verificationMethod']\n            ],\n            [\n              'type & no cryptosuite identifier & no verificationMethod',\n              ['type', 'cryptosuite', 'verificationMethod']\n            ]\n          ]);\n          for(const [testReason, terms] of vectors) {\n            const credential = klona(getTestVector(disclosed?.base));\n            for(const prop of terms) {\n              credential.proof[prop] = '';\n            }\n            await verificationFail({\n              credential,\n              verifier,\n              reason: `${baseReason}${testReason}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:f16bd47d-6c56-4733-9d75-d509b5f9e13a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 687,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyMfl6nXiKAp_U3jN0S7_",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:3304627f-6b86-4490-a8db-d09194f9c182"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ai4CLdEHMaaHCS17Dksw4",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:9c743d15-7d36-4414-bee1-b5f8a8ddac5c",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with a bbs-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:33aedf72-5a5d-4259-b922-f98592961b2c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 461,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:d0071419-a619-44fb-982a-d9a3d258b51d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:4964c4e1-f004-4efb-913f-35f60403f4ef",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 428,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:cd946f5b-62e1-4df4-a9d0-584f56898066",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMIrhg-d79AYVRyYjTdvZtrXcS8BWqRYkj2dbvoI63a71GIl9DPGQu9cPW9vH70K_uLDgFHnkHqRxzBDdygFIbZpU_K0Qdk_GBAkqVTIKwXF60PX_M_sVe0uDCj6u4Y8TFaaRKrNEXN5l--vpgbkFLobgyN9DLX_ZPLK6dguaUjWL_WMgbi-qu6WAi5tkUjd2BhnVrqUtFxH6FK0khIWOm0iTBTpUjVIXCcZHVMphQBB9S47oDwbfMCVfd0c91ngWgkUa8lhJMKMvKideqM3wVZdfPKzIc78zIKCw_efULkBPw4MmtKvLa0lirYvsawZ96xuf6GXsdhH7sARUNKvX2iSIXf85IQ5gNIa7OpKiJtsMCn5AXtlGrrXsb3RLHzQi1nP5z6FKShQ-IzPfuLB0oySwAAABDgIEAwYEAgULBgcHAwgFCQEKCgsPDAwNCQ4NDwiDCwwOmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHxggGCEYIhgjGCQYJRgmGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMIrhg-d79AYVRyYjTdvZtrXcS8BWqRYkj2dbvoI63a71GIl9DPGQu9cPW9vH70K_uLDgFHnkHqRxzBDdygFIbZpU_K0Qdk_GBAkqVTIKwXF60PX_M_sVe0uDCj6u4Y8TFaaRKrNEXN5l--vpgbkFLobgyN9DLX_ZPLK6dguaUjWL_WMgbi-qu6WAi5tkUjd2BhnVrqUtFxH6FK0khIWOm0iTBTpUjVIXCcZHVMphQBB9S47oDwbfMCVfd0c91ngWgkUa8lhJMKMvKideqM3wVZdfPKzIc78zIKCw_efULkBPw4MmtKvLa0lirYvsawZ96xuf6GXsdhH7sARUNKvX2iSIXf85IQ5gNIa7OpKiJtsMCn5AXtlGrrXsb3RLHzQi1nP5z6FKShQ-IzPfuLB0oySwAAABDgIEAwYEAgULBgcHAwgFCQEKCgsPDAwNCQ4NDwiDCwwOmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHxggGCEYIhgjGCQYJRgmGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1174
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:58:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:214d8356-cba8-454a-a0cf-11e0f0bdbd06",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KXZztW3TcfLkoH08xkunbX5JNIc49GEisfeuW5Y0StC9n2xyQ3yuAoyfemG8WPI6IGFAytmR4r6j3XcqYXcWzM4BXY8TSi3V7lL__7SqzMw_KVWi9atetY7vnPq7EjUz4rL7FO0HIscHeS4U-GAoaR4r14rhrDSj7DkQIvTty5WPoFCZMtRI24-S-vrFVeAj1SlwePqSl6nzKjb3jIXCLsJkeMjGWXFXjcEvfSrKS05TrOmFBXnQUX3C_J3-2B-_sHD_qYrxKNhEqMQD-xuBRpMCouG4YPSFsSyoK6UxRLXoIj3efdq7MPPdXn31edH7jF7ivSiLmJBS2hCblDBzO3zUOkZEGHrINVtiQHR-WmPaDMdRdisjNEJSYhOxz3f0G846PU5-4S7phdBfQmH-LQ688xl05TYpV3HSOLjkjLOz4NG-FMA0rI6CJzLTnLWNheYX4hrzfacDpudstwhpwHRHAOaY2fBOsyv7rRKVx9pBcob1QVQGNeMyljBZsCkttbyQEGGx4dYRN9e3puRyfkbNdXWhOLdlG19j7QXh4ZZ5f4KAqud0UGlFU3STDOVoDWgjqUynm91mJHoNPGYQfR5ixYUQaxS1QsQXbCZvC-RTiC1CLDX361BZz0-RecXC8JSZgzpcxQkjG0AbijZoP40lEbE6jc9f0zz0Si5qbJFOANqVEZIEQBv3f9P0qB_Bz1xuuWF0aWxLGQ7ASbJGQTWO9jb9vpaeaJrmtoXKk_ZNapbNIH0cwMyNN0c8084O27uZHNMsckygwrCUEmW_yBprEb3PMyD7compuXEFjW-w7K5V0FgTWD-pnujV2kv3j3QirehnsRYEw4ToHen2L6e_SvPWOd3AMkQJvcsWlg9VSDI2pbpTlBxrTc5IqH2EDrE7Pb_Oti6nISOFzX6ELJaTpE3R4x2eb3FfV9WwRDslWIflvDZ_oaCwmnDhbwkRkZLoJ0_IFogLAmkAIFkuLaQjkqnk8GymnfZ_4spVsWYZgod5fr0A-VKldU6He_qxrjneZklzcfPoulkkFaApVYmRWNpqEBlpjujwS_0Sy7AiCkNokLhpl1VqsCnUCMYbxTQw1qeGZk8hXPHGoUZ-22ehEXz-uXQlQazOjCJW2TESe5sApdRyLbvG-aDzdrMtzUi7BOjzMCiMkBbF5KhpqsZh0iRiFgPFcrMso7DOmxSBVYsbtODgn-mTWIPtbFuFDI5rXU0HVuuGT3IhHzr2Bi_ebH7xzExPc6gZ97iD-xlPheLFtLYVGhq-sYqqa8TdoYzh6XHVE3ce0iKuDhpRy6rAAkBBQIBAwcEAAUDBgwHAggECQYKCIMICQuYIgECAwQFDA0OGBgYGRgaGBsYHBgdGB4YHxgiGCUYJhgnGCgYKRgqGCsYLBguGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KXZztW3TcfLkoH08xkunbX5JNIc49GEisfeuW5Y0StC9n2xyQ3yuAoyfemG8WPI6IGFAytmR4r6j3XcqYXcWzM4BXY8TSi3V7lL__7SqzMw_KVWi9atetY7vnPq7EjUz4rL7FO0HIscHeS4U-GAoaR4r14rhrDSj7DkQIvTty5WPoFCZMtRI24-S-vrFVeAj1SlwePqSl6nzKjb3jIXCLsJkeMjGWXFXjcEvfSrKS05TrOmFBXnQUX3C_J3-2B-_sHD_qYrxKNhEqMQD-xuBRpMCouG4YPSFsSyoK6UxRLXoIj3efdq7MPPdXn31edH7jF7ivSiLmJBS2hCblDBzO3zUOkZEGHrINVtiQHR-WmPaDMdRdisjNEJSYhOxz3f0G846PU5-4S7phdBfQmH-LQ688xl05TYpV3HSOLjkjLOz4NG-FMA0rI6CJzLTnLWNheYX4hrzfacDpudstwhpwHRHAOaY2fBOsyv7rRKVx9pBcob1QVQGNeMyljBZsCkttbyQEGGx4dYRN9e3puRyfkbNdXWhOLdlG19j7QXh4ZZ5f4KAqud0UGlFU3STDOVoDWgjqUynm91mJHoNPGYQfR5ixYUQaxS1QsQXbCZvC-RTiC1CLDX361BZz0-RecXC8JSZgzpcxQkjG0AbijZoP40lEbE6jc9f0zz0Si5qbJFOANqVEZIEQBv3f9P0qB_Bz1xuuWF0aWxLGQ7ASbJGQTWO9jb9vpaeaJrmtoXKk_ZNapbNIH0cwMyNN0c8084O27uZHNMsckygwrCUEmW_yBprEb3PMyD7compuXEFjW-w7K5V0FgTWD-pnujV2kv3j3QirehnsRYEw4ToHen2L6e_SvPWOd3AMkQJvcsWlg9VSDI2pbpTlBxrTc5IqH2EDrE7Pb_Oti6nISOFzX6ELJaTpE3R4x2eb3FfV9WwRDslWIflvDZ_oaCwmnDhbwkRkZLoJ0_IFogLAmkAIFkuLaQjkqnk8GymnfZ_4spVsWYZgod5fr0A-VKldU6He_qxrjneZklzcfPoulkkFaApVYmRWNpqEBlpjujwS_0Sy7AiCkNokLhpl1VqsCnUCMYbxTQw1qeGZk8hXPHGoUZ-22ehEXz-uXQlQazOjCJW2TESe5sApdRyLbvG-aDzdrMtzUi7BOjzMCiMkBbF5KhpqsZh0iRiFgPFcrMso7DOmxSBVYsbtODgn-mTWIPtbFuFDI5rXU0HVuuGT3IhHzr2Bi_ebH7xzExPc6gZ97iD-xlPheLFtLYVGhq-sYqqa8TdoYzh6XHVE3ce0iKuDhpRy6rAAkBBQIBAwcEAAUDBgwHAggECQYKCIMICQuYIgECAwQFDA0OGBgYGRgaGBsYHBgdGB4YHxgiGCUYJhgnGCgYKRgqGCsYLBguGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1175
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:63:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:d0b63f48-159c-4640-8c6f-1f23ebf9dab2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11647,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkJKv3uINRWROG_HQ-Tpjk7Fd1EvJPP1Bduky1y0MC7aPBVpvJnVh9inyD2skGF-pmLUtWQTp4lyqjfeYenEsosViJJ55VnZRX2S6r6IT0iJxnPJHRGAVzLzr-S_ol-okb6e-giQY4xbEUTtZuNMB9bTKWLoYc0LrqRcs03ddxaSoHPUcu_kBoQtKi5H510bTUi2xMbVLYApi29hhjHd3GfrkZRiT9uLwVYdwRZf3mH5yYSHvGIJaNtIQFSgvRfaJTaeR51cIRcLu5HX2vbw5ndogVecyk69VxpO95yBpM4BkjCACGv3FDa6VyUN6OlzDWhSIhsQTv88crChhbxrk_gyF1Z9AQa0cweYTo_ezIeXYNHjAMA2UwOL0b8yeFCVsWJvw5J1lgcTU_O5OQWUTJxc0TPtCFLR5WvBPpsUA7TDovhdZGRKjsnFoBVHtcBOrKivEdYIJo23Lcboqq1UJOqRv-t--vElT2plk6zxuFLC7USE69YG75-IklHTeWJGYd153SOCfml7fkzykXMKAUUks8B9IN669G9vq36KJdI0riKb9bHSiyE3GhpVwVkJCuxm1qE7MuUKGBpSd6z2lMpwS_RawkVRjba0RubVW_REjcapXt6HJKmogEvTpuZJrBiPDDHElFTuU8KV6h08d2rdrdHW66RahgkZaLpbX1faegl2xuHCbTBVvYOlk74_Ik0ZqIiXKztaZroXR-Lwvaj1fKhsdzAhU45DPFJnyGqSQJtS7tZy1yJkFFrV8iXyGi3FwIkt56xGQ2dTnbhZAoVwe1teYfe5FsVp1tF4NlZRaeWeP6sUa53tRjdB_-boBjhJVbm2m-5od_hKzvu_wOpV3jDV-WTOg8-wTg57evK92B8rXp49D-2IdVWMnPokKSQwieiW9CLL1yq9kxVP56o9T7GrUlEOlutMGQUPxBRJr6627ssvzSK2bQ5MCQHqofTNZFlTXeWkz16GXzk2R_7gG3IbuDwOKyjsE4shBPSxqW7tbEvB44w3OErkbwwhKgok5h-b48_cgh_4EE2iEn7JSMwA04gnbM1bcw9_A4jMcRSzhrcJS0imCCWf3YlNUK24jMLCIcwrSY6Ev1hjULz_55OgGUXSjYmQVJU_NFZGxEemXZbwa5rizlL-dyup32DmSfJh3Meug38dP1HxT8AgUi1iGjaqRc041xkTeVUZofJDuNG-dFO9r659ZqMTwfSIZLasr_NxxBlp0dsJAp3NP7vGwwVksVOu-JnT21VwcEsYCdZ0wKY385O--W4oqu2Qx_dBrLQ_4E4YMzvfH51BtztNq-5BMMgoKijeXG_lXGKTex52EN3I6j2xvauBEXk9_7amJAF8ZUQJN49rbZDR6RCjB77a5dSQOKhxNloXNEyvYOaXzTEBsWJ-4B1-IfWaVLrLmJX30e4Oi9CGDakIxhnLJRAl5zGel07rrpP_7NJCKdKL93bxwNlMVD_UHFk_rDVN07AM4jnc3Tgh5c5nWgH-plgN1fCYOEj9s5yFULT36CP0ecOdcGrMzaJoRSKtqt47rvHBxDrfGv4B6QEipAAsBAgIAAwoEDgUDBg0HCAgPgxgYGBkYG5gcAAECBgcICQoLFBUWGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYMhgzGDRA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkJKv3uINRWROG_HQ-Tpjk7Fd1EvJPP1Bduky1y0MC7aPBVpvJnVh9inyD2skGF-pmLUtWQTp4lyqjfeYenEsosViJJ55VnZRX2S6r6IT0iJxnPJHRGAVzLzr-S_ol-okb6e-giQY4xbEUTtZuNMB9bTKWLoYc0LrqRcs03ddxaSoHPUcu_kBoQtKi5H510bTUi2xMbVLYApi29hhjHd3GfrkZRiT9uLwVYdwRZf3mH5yYSHvGIJaNtIQFSgvRfaJTaeR51cIRcLu5HX2vbw5ndogVecyk69VxpO95yBpM4BkjCACGv3FDa6VyUN6OlzDWhSIhsQTv88crChhbxrk_gyF1Z9AQa0cweYTo_ezIeXYNHjAMA2UwOL0b8yeFCVsWJvw5J1lgcTU_O5OQWUTJxc0TPtCFLR5WvBPpsUA7TDovhdZGRKjsnFoBVHtcBOrKivEdYIJo23Lcboqq1UJOqRv-t--vElT2plk6zxuFLC7USE69YG75-IklHTeWJGYd153SOCfml7fkzykXMKAUUks8B9IN669G9vq36KJdI0riKb9bHSiyE3GhpVwVkJCuxm1qE7MuUKGBpSd6z2lMpwS_RawkVRjba0RubVW_REjcapXt6HJKmogEvTpuZJrBiPDDHElFTuU8KV6h08d2rdrdHW66RahgkZaLpbX1faegl2xuHCbTBVvYOlk74_Ik0ZqIiXKztaZroXR-Lwvaj1fKhsdzAhU45DPFJnyGqSQJtS7tZy1yJkFFrV8iXyGi3FwIkt56xGQ2dTnbhZAoVwe1teYfe5FsVp1tF4NlZRaeWeP6sUa53tRjdB_-boBjhJVbm2m-5od_hKzvu_wOpV3jDV-WTOg8-wTg57evK92B8rXp49D-2IdVWMnPokKSQwieiW9CLL1yq9kxVP56o9T7GrUlEOlutMGQUPxBRJr6627ssvzSK2bQ5MCQHqofTNZFlTXeWkz16GXzk2R_7gG3IbuDwOKyjsE4shBPSxqW7tbEvB44w3OErkbwwhKgok5h-b48_cgh_4EE2iEn7JSMwA04gnbM1bcw9_A4jMcRSzhrcJS0imCCWf3YlNUK24jMLCIcwrSY6Ev1hjULz_55OgGUXSjYmQVJU_NFZGxEemXZbwa5rizlL-dyup32DmSfJh3Meug38dP1HxT8AgUi1iGjaqRc041xkTeVUZofJDuNG-dFO9r659ZqMTwfSIZLasr_NxxBlp0dsJAp3NP7vGwwVksVOu-JnT21VwcEsYCdZ0wKY385O--W4oqu2Qx_dBrLQ_4E4YMzvfH51BtztNq-5BMMgoKijeXG_lXGKTex52EN3I6j2xvauBEXk9_7amJAF8ZUQJN49rbZDR6RCjB77a5dSQOKhxNloXNEyvYOaXzTEBsWJ-4B1-IfWaVLrLmJX30e4Oi9CGDakIxhnLJRAl5zGel07rrpP_7NJCKdKL93bxwNlMVD_UHFk_rDVN07AM4jnc3Tgh5c5nWgH-plgN1fCYOEj9s5yFULT36CP0ecOdcGrMzaJoRSKtqt47rvHBxDrfGv4B6QEipAAsBAgIAAwoEDgUDBg0HCAgPgxgYGBkYG5gcAAECBgcICQoLFBUWGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYMhgzGDRA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1176
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:68:13)"
              }
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify proofValue to not start with 'u'\n          signedCredentialCopy.proof.proofValue = 'a';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:f2f8c014-d6e9-4dd8-b7ca-43f6e636e3ac",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:32:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:11)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:b1a0f81d-c10a-4a84-ab16-3bd95c569dcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = getTestVector(signed);\n          const signedCredentialCopy = klona(credential);\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:ee3febcc-082f-41d4-a36a-0e94d972acb9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            const signedCredentialCopy = klona(credential);\n            // intentionally modify `credentialSubject` ID\n            signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n            await verificationFail({\n              credential: signedCredentialCopy, verifier\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:32e053f2-84ac-4be6-9ac8-4f8896a7d0ef",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 513,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          const baseReason = 'Should not verify a VC with no ';\n          const vectors = new Map([\n            ['type identifier', ['type']],\n            ['cryptosuite identifier', ['cryptosuite']],\n            ['verificationMethod', ['verificationMethod']],\n            ['type & no cryptosuite identifier', ['type', 'cryptosuite']],\n            [\n              'type identifier & no verificationMethod',\n              ['type', 'verificationMethod']\n            ],\n            [\n              'cryptosuite identifier & no verificationMethod',\n              ['cryptosuite', 'verificationMethod']\n            ],\n            [\n              'type & no cryptosuite identifier & no verificationMethod',\n              ['type', 'cryptosuite', 'verificationMethod']\n            ]\n          ]);\n          for(const [testReason, terms] of vectors) {\n            const credential = klona(getTestVector(disclosed?.base));\n            for(const prop of terms) {\n              credential.proof[prop] = '';\n            }\n            await verificationFail({\n              credential,\n              verifier,\n              reason: `${baseReason}${testReason}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "fGrTckS8BHi3jibaz0xdh",
              "ctx": null,
              "_testId": "urn:uuid:f16bd47d-6c56-4733-9d75-d509b5f9e13a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 687,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: ['/credentialSubject/id'],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "006yijxdOgvB11a_KeiFm",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13140,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 752,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ai4CLdEHMaaHCS17Dksw4",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:f5742dec-f40a-444c-88f3-08dc240aadb2",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "006yijxdOgvB11a_KeiFm",
              "ctx": null,
              "_testId": "urn:uuid:916c4ff3-7f3e-46dc-af17-d2f9aab40579",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 447,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-di-bbs-test-suite",
    "subtitle": "Interoperability test suite for BBS Data Integrity cryptosuite.",
    "github": "https://github.com/w3c/vc-di-bbs-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-bbs-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity BBS Interoperability Report 1.0",
  "stats": [
    "Tests passed 29/33 87%",
    "Tests failed 5/33 16%",
    "Failures 5",
    "Tests skipped 1",
    "Total tests 34"
  ]
}