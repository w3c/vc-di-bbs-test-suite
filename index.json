{
  "matrices": [
    {
      "title": "Data Integrity (bbs-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8b076262-9417-4de4-9509-db83c6bd232d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:72bfda31-6d1e-4774-a13e-d5b1d9c2a965",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:44f98c7e-a8e1-46d2-90fb-7ada1ee911ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:30cf6182-98c2-4873-bec5-78da08ae253f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8d6bceba-d044-4d9c-b6cf-de714c1c0ac4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:15a64745-278c-418f-87df-bf2b36450317",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:13df0ccb-d8a2-4f43-9ac1-a84001d37a84",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:081453f8-f86e-4909-8ec6-93d6ed25966b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:5b5e61a6-1d88-4cec-a01d-86c49a7a09b8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:0806c6cd-f416-4e27-9ed1-160560a2d126",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:59be89a5-1157-4880-b1a9-ff328f38e0d9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:ae8f8c64-e023-419f-8191-3899840e1299",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:dbd5dcc0-b8a1-4ac7-9969-9cb98a683633",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8f81f2dc-769a-4d59-ad77-ae4c61a904f0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:e7570bbc-4129-4f4b-9ab2-84e4f8bc3d9d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:5131888c-f74a-4478-9f7a-b797ccf39f4d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:993b765b-2c97-41aa-acdb-d3bc2c76dc0e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 587,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 861,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mMsL_fw-93CpbLZIlTy0i",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:59ea41ab-f748-42ef-8382-99eba5ee676e"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:dab95fc3-4ca2-4850-8659-a9986b1f8bf5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:14eb396e-43db-41df-93aa-160edf403e73",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:5213d773-0cc7-43ad-bad2-a932b81af11c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:ba47d757-8cb8-4f08-83e2-ddea10807431",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:50abb609-896a-439f-aa88-a98578b53065",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:e53979a2-c0cb-48dc-a5fc-98d53208d247",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:858f04ef-8b7f-4bd9-85e7-7c86d321afcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:001ca9ed-93a3-42a7-8ffb-8b1f9051f254",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:02e2ff8a-1c0b-44df-b58c-c31d69fc9717",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:b01abd7c-ce14-4f0d-a228-de6bda7e4d7a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:18a8576e-11a1-4d93-b5c5-a354b2cd6b21",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:c0ff4e9f-e71f-4281-9209-708b5c13b59e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:045d9085-a623-4057-a57c-508349cc0bc8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:50653990-312d-44e0-a6d4-d7fc9df81618",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:23e49d84-c05a-47c5-b574-588b540b4123",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:5d0ea4ff-516d-435c-8d5d-a060bee0a320",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:ef77fdaa-ee9f-4a86-8be6-9d7e0fcf8577",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 482,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mMsL_fw-93CpbLZIlTy0i",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:ddffa3fd-9b1d-415c-ad44-50d56f5b345a"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P8Iub5-bmwx7taRSxgC9R",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:a2139f68-c9c4-4721-8d9e-9640a7a90c1d",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8b076262-9417-4de4-9509-db83c6bd232d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:dab95fc3-4ca2-4850-8659-a9986b1f8bf5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:72bfda31-6d1e-4774-a13e-d5b1d9c2a965",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:14eb396e-43db-41df-93aa-160edf403e73",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:44f98c7e-a8e1-46d2-90fb-7ada1ee911ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:5213d773-0cc7-43ad-bad2-a932b81af11c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:30cf6182-98c2-4873-bec5-78da08ae253f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:ba47d757-8cb8-4f08-83e2-ddea10807431",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8d6bceba-d044-4d9c-b6cf-de714c1c0ac4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:50abb609-896a-439f-aa88-a98578b53065",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:15a64745-278c-418f-87df-bf2b36450317",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:e53979a2-c0cb-48dc-a5fc-98d53208d247",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:13df0ccb-d8a2-4f43-9ac1-a84001d37a84",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:858f04ef-8b7f-4bd9-85e7-7c86d321afcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:081453f8-f86e-4909-8ec6-93d6ed25966b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:001ca9ed-93a3-42a7-8ffb-8b1f9051f254",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:5b5e61a6-1d88-4cec-a01d-86c49a7a09b8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:02e2ff8a-1c0b-44df-b58c-c31d69fc9717",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:0806c6cd-f416-4e27-9ed1-160560a2d126",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:b01abd7c-ce14-4f0d-a228-de6bda7e4d7a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:59be89a5-1157-4880-b1a9-ff328f38e0d9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:18a8576e-11a1-4d93-b5c5-a354b2cd6b21",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:ae8f8c64-e023-419f-8191-3899840e1299",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:c0ff4e9f-e71f-4281-9209-708b5c13b59e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:dbd5dcc0-b8a1-4ac7-9969-9cb98a683633",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:045d9085-a623-4057-a57c-508349cc0bc8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:8f81f2dc-769a-4d59-ad77-ae4c61a904f0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:50653990-312d-44e0-a6d4-d7fc9df81618",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:e7570bbc-4129-4f4b-9ab2-84e4f8bc3d9d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:23e49d84-c05a-47c5-b574-588b540b4123",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:5131888c-f74a-4478-9f7a-b797ccf39f4d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:5d0ea4ff-516d-435c-8d5d-a060bee0a320",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "KNMpnQXxz7Ee2ZzCR2CH7",
              "ctx": null,
              "_testId": "urn:uuid:993b765b-2c97-41aa-acdb-d3bc2c76dc0e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 587,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const [flattened] = await jsonld.flatten(data);\n        const [graph] = flattened['@graph'];\n        should.exist(graph, 'Expected flattened VC to have a graph.');\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptosuite = graph[cryptoProp];\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        should.exist(\n          cryptosuite,\n          `Expected graph to have property ${cryptoProp}`);\n        const cryptoString = cryptosuite.some(c =>\n          c?.['@type'] === cryptoType && c?.['@value'] === cryptosuiteName);\n        cryptoString.should.equal(\n          true,\n          `Expected at least one cryptosuite with @type ${cryptoType} and ` +\n          `@value ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "YeZqX44KVTWeIX0ZosSZw",
              "ctx": null,
              "_testId": "urn:uuid:ef77fdaa-ee9f-4a86-8be6-9d7e0fcf8577",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:71841475-73b9-48cd-a0b4-8bde8056e2c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:6b422e02-051f-4df2-9296-1e14040e20f9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:fa887774-725a-4e9a-a56f-d2ac5ce85d36",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:f8f4856d-0b6e-4eda-93de-26a8417f01cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:899f42e5-8bd1-438b-aa4b-b233a71fa79f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:e41c2bec-d8e0-4628-a361-f4d22fb8259a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:ea638bae-da10-4249-9cf3-ed4db6d2a96d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:e6193963-0345-47e3-b152-cc663f2cd61c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:8c9efcb7-04b8-4903-a104-dfa8a0437ce5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:51ac8df6-8b62-4db4-81ce-475fcae69909",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:2520a037-3a7e-4f10-b125-8c208694abf8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:cda27eb1-5c6d-4ffd-a223-5b67a2ed5e86",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 554,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ObC1Ukbnc6tPdZI1TP291",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:4a491263-e7b5-4ae9-b39c-6cb982c33249"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "31XT9Yhf71MDJ4yUCka7x",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:9f03dcfa-e227-4c14-a72f-6abcc27a0659",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "The cryptosuite property of the proof MUST be bbs-2023.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:71841475-73b9-48cd-a0b4-8bde8056e2c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:6b422e02-051f-4df2-9296-1e14040e20f9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The type property of the proof MUST be DataIntegrityProof.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:fa887774-725a-4e9a-a56f-d2ac5ce85d36",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:f8f4856d-0b6e-4eda-93de-26a8417f01cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The verificationMethod property of the proof MUST be a URL.",
          "cells": [
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:899f42e5-8bd1-438b-aa4b-b233a71fa79f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The verificationMethod property of the proof MUST be a URL.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:e41c2bec-d8e0-4628-a361-f4d22fb8259a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:ea638bae-da10-4249-9cf3-ed4db6d2a96d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:e6193963-0345-47e3-b152-cc663f2cd61c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "the HMAC key MUST be the same length as the digest size",
          "cells": [
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:8c9efcb7-04b8-4903-a104-dfa8a0437ce5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "the HMAC key MUST be the same length as the digest size",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:51ac8df6-8b62-4db4-81ce-475fcae69909",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:2520a037-3a7e-4f10-b125-8c208694abf8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "D5sq8QqX5Wyu_ieSidfkd",
              "ctx": null,
              "_testId": "urn:uuid:cda27eb1-5c6d-4ffd-a223-5b67a2ed5e86",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:c3dd77c1-d221-4408-b275-51f4c6b101b2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:bdd7f066-396b-4404-bce3-05149b535137",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:eeaa3ff9-b56f-43f9-adec-799139c90722",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:bfcb6dad-f57c-4287-8aa8-93e5e4d4849c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 280,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:62194b25-94d5-45df-977a-38e0dd748474",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:2837282b-482a-47d0-937f-6154c681c8d8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:f2c22c55-613a-4dcc-9b11-6c163da65458",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:3c111d9f-0ee0-4659-8b02-4159196d8531",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:605a6efc-bf19-4f40-88e1-21873f6b3322",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:58b04851-3df4-4a45-87fd-6cc163736c2e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:fcc425d1-b569-4885-a381-fd4127c29367",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:fcdd3341-0ef0-44e1-a56b-92a7ce25e386",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ohaoBj7N_lDJKErIniMB9",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:cb146e29-412f-4ff7-a035-bc3dcd9aaaa1"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:0af21145-b1b3-4838-b8b3-fd12ab71b2dc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:fd9c84f8-d421-41e1-bbba-e463e8f37caf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:facd5690-dabb-44f1-9c39-04809b630a26",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:a467c6ac-30fc-4446-bda2-767c1d17c812",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:e52c092e-6631-4fcc-a5af-2c39f7f7e905",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:48497d49-7e72-4f4d-aa09-52ac5d33ff81",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:fe2bc389-286e-41b4-b7a6-44d2f8d62c49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:4ff86287-d8b6-4839-b994-975fde0fc579",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:0921e824-ff24-4bc1-8d62-7658f46005a3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:faf11695-49d2-40d9-9085-1451b77c8878",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:711f6070-db83-4821-859d-bb02944db1cb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:97a93283-4739-43c6-a09d-5057ca4d70d0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": " If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If featureOption is set to \"anonymous_holder_binding\" or \"pseudonym_hidden_pid\", the commitment_with_proof input MUST be supplied; if not supplied, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ohaoBj7N_lDJKErIniMB9",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:8b214fc4-7f2e-4728-a97a-9d1320eca65d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "31XT9Yhf71MDJ4yUCka7x",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:1f40affe-ce82-43a5-98f9-0b2e39516274",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "The cryptosuite property of the proof MUST be bbs-2023.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:c3dd77c1-d221-4408-b275-51f4c6b101b2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be bbs-2023.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.';\n            proofs.some(\n              proof => proof.cryptosuite === 'bbs-2023'\n            ).should.equal(true, 'Expected at least one proof to have ' +\n              '\"cryptosuite\" property \"bbs-2023\".'\n            );\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:0af21145-b1b3-4838-b8b3-fd12ab71b2dc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be bbs-2023."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20bbs%2D2023.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:bdd7f066-396b-4404-bce3-05149b535137",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.';\n            bbsProofs.length.should.be.gte(\n              1, 'Expected at least one \"bbs-2023\" proof');\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:fd9c84f8-d421-41e1-bbba-e463e8f37caf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20type%20property%20of%20the%20proof%20MUST%20be%20DataIntegrityProof.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:eeaa3ff9-b56f-43f9-adec-799139c90722",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:facd5690-dabb-44f1-9c39-04809b630a26",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20value%20of%20the%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20BBS%20signature",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:bfcb6dad-f57c-4287-8aa8-93e5e4d4849c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16098,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 280,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.';\n          await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:a467c6ac-30fc-4446-bda2-767c1d17c812",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A conforming proof is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 2. Data Model and 3. Algorithms of this document MUST be enforced."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=all%20relevant%20normative%20statements%20in%20Sections%202.%20Data%20Model%20and%203.%20Algorithms%20of%20this%20document%20MUST%20be%20enforced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The verificationMethod property of the proof MUST be a URL.",
          "cells": [
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:62194b25-94d5-45df-977a-38e0dd748474",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verificationMethod property of the proof MUST be a URL.",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL';\n            for(const proof of bbsProofs) {\n              shouldBeUrl({\n                url: proof.verificationMethod,\n                prop: 'proof.verificationMethod'\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:e52c092e-6631-4fcc-a5af-2c39f7f7e905",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The verificationMethod property of the proof MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20verificationMethod%20property%20of%20the%20proof%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:2837282b-482a-47d0-937f-6154c681c8d8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:48497d49-7e72-4f4d-aa09-52ac5d33ff81",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Dereferencing%20the%20verificationMethod%20MUST%20result%20in%20an%20object%20containing%20a%20type%20property%20with%20the%20value%20set%20to%20Multikey",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:f2c22c55-613a-4dcc-9b11-6c163da65458",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.';\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:fe2bc389-286e-41b4-b7a6-44d2f8d62c49",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Any%20other%20encodings%20MUST%20NOT%20be%20allowed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:3c111d9f-0ee0-4659-8b02-4159196d8531",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)';\n          bbsProofs.length.should.be.gte(\n            1, 'Expected at least one \"bbs-2023\" proof');\n          for(const proof of bbsProofs) {\n            should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n            proof.type.should.equal(\n              'DataIntegrityProof',\n              'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n            );\n            should.exist(\n              proof.cryptosuite,\n              'Expected \"proof.cryptosuite\" to exist.'\n            );\n            proof.cryptosuite.should.equal(\n              'bbs-2023',\n              'Expected \"proof.cryptosuite\" to equal \"bbs-2023\"'\n            );\n            should.exist(\n              proof.verificationMethod,\n              'Expected \"proof.verificationMethod\" to exist.'\n            );\n            proof.verificationMethod.should.be.a(\n              'string',\n              'Expected \"proof.verificationMethod\" to be a string.'\n            );\n            const [publicKey] = proof.verificationMethod.split('#');\n            checkEncoding({\n              value: publicKey.substr(8),\n              propertyName: 'proof.verificationMethod'\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:4ff86287-d8b6-4839-b994-975fde0fc579",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=transformation%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%2C%20a%20cryptosuite%20identifier%20(cryptosuite)%2C%20and%20a%20verification%20method%20(verificationMethod)",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the HMAC key MUST be the same length as the digest size",
          "cells": [
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:605a6efc-bf19-4f40-88e1-21873f6b3322",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the HMAC key MUST be the same length as the digest size",
              "body": "function() {\n            this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size';\n            for(const proof of bbsProofs) {\n              checkHmacKeyLength({proof, keyLength: 32});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:0921e824-ff24-4bc1-8d62-7658f46005a3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "the HMAC key MUST be the same length as the digest size"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=the%20HMAC%20key%20MUST%20be%20the%20same%20length%20as%20the%20digest%20size",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:58b04851-3df4-4a45-87fd-6cc163736c2e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to';\n          for(const proof of bbsProofs) {\n            shouldNotUseCborTags({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:faf11695-49d2-40d9-9085-1451b77c8878",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20signerBlind.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Initialize%20baseProof%20to",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:fcc425d1-b569-4885-a381-fd4127c29367",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)';\n          for(const proof of bbsProofs) {\n            shouldHaveMandatoryPointers({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:711f6070-db83-4821-859d-bb02944db1cb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain an array of mandatory JSON pointers (mandatoryPointers)"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=The%20transformation%20options%20MUST%20contain%20an%20array%20of%20mandatory%20JSON%20pointers%20(mandatoryPointers)",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "XmhzkKZfjomPkz6y660Qy",
              "ctx": null,
              "_testId": "urn:uuid:fcdd3341-0ef0-44e1-a56b-92a7ce25e386",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second';\n          for(const proof of bbsProofs) {\n            baseProofShouldHaveElementCount({proof});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "lHknoAL3UkDeGT0cc0BBG",
              "ctx": null,
              "_testId": "urn:uuid:97a93283-4739-43c6-a09d-5057ca4d70d0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Initialize components to an array that is the result of CBOR-decoding the bytes that follow the three-byte BBS disclosure proof header. If the result is not an array of five or six elements — a byte array, a map of integers to integers, two arrays of integers, and one or two byte arrays; an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=%22pseudonym_hidden_pid%22.-,Initialize%20components%20to%20an%20array%20that%20is%20the%20result%20of%20CBOR,be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.,-Replace%20the%20second",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:4f7eae3d-dbb0-4d91-a411-8083faabb361",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:919a1a62-e2c0-4653-8b04-3b61c1a4fb6b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:f7fa4ab5-4355-4e27-8295-468a3d7d7efe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:95b6433f-5abd-4b6a-a537-0149ad1aa1ea",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:3ab34003-03f4-4fbd-9ece-384078868fd2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:c462338b-c18e-4179-992c-a30154e701ee",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:667c3426-73c1-4ffd-a33f-af0e47dbe2a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:22649833-18e9-491b-80ef-642cd3f20424",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:1494d7dc-0d21-457a-b400-1716a0391b5f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19173,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 644,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:32 GMT', etag: 'W/\"866-KNQevkwh/GByeCLQgk0T0SYukZc\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:32 GMT', etag: 'W/\"866-KNQevkwh/GByeCLQgk0T0SYukZc\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:d1ca6c2c-cbdf-439b-991b-f559b7906543",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19818,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:29f2a87e-5612-499f-a5dc-897df1c18dac",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:d145fcce-36f1-42ad-be24-fc18c8d21266",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:5cfc4017-6798-47da-a5b7-310199dfc478",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:e189d32a-7580-4283-a7df-21f444fb0285",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:a855c6a0-6630-48c0-81ea-d1b481ddfe3a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      credentials = await generateTestData({...testDataOptions, optionalTests});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1800,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "w4Ta_eaGErEY41zNrY-u3",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:7729812d-563b-4051-a0ac-605b4302e597"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P8Iub5-bmwx7taRSxgC9R",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:760e3fb4-12cc-4989-b340-14193b85fae7",
      "columns": [
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:4f7eae3d-dbb0-4d91-a411-8083faabb361",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:919a1a62-e2c0-4653-8b04-3b61c1a4fb6b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:f7fa4ab5-4355-4e27-8295-468a3d7d7efe",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:95b6433f-5abd-4b6a-a537-0149ad1aa1ea",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:3ab34003-03f4-4fbd-9ece-384078868fd2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:c462338b-c18e-4179-992c-a30154e701ee",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:667c3426-73c1-4ffd-a33f-af0e47dbe2a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:22649833-18e9-491b-80ef-642cd3f20424",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:1494d7dc-0d21-457a-b400-1716a0391b5f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19173,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 644,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:32 GMT', etag: 'W/\"866-KNQevkwh/GByeCLQgk0T0SYukZc\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:32 GMT', etag: 'W/\"866-KNQevkwh/GByeCLQgk0T0SYukZc\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:d1ca6c2c-cbdf-439b-991b-f559b7906543",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19818,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:29f2a87e-5612-499f-a5dc-897df1c18dac",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:d145fcce-36f1-42ad-be24-fc18c8d21266",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:5cfc4017-6798-47da-a5b7-310199dfc478",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:e189d32a-7580-4283-a7df-21f444fb0285",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "xKYwV5CaIvBULNW9NJoIE",
              "ctx": null,
              "_testId": "urn:uuid:a855c6a0-6630-48c0-81ea-d1b481ddfe3a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:64af7dc9-f426-4d87-83a3-ac75d331bb1d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:d5532a59-a9b7-4aa7-a26e-6dd63c16acac",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:1bfafd1a-ee3e-44bc-ad2c-6cc881b795a8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:e2f9fe09-e3ff-4068-8184-ad19ffc19115",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21942,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:f60c47c9-46d0-4132-a27c-4ab755c2655c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:79e3022f-5184-4a23-b5ca-bc9aa0c1d53f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:84268ae0-60c2-44bd-ab71-e62b2f032951",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:cfeae66a-e71e-4a2f-87f6-69ac4fcec38b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:0b0a7173-fae6-4531-a396-58570be9430a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:35 GMT', etag: 'W/\"835-ETxihrLz4sr6DcGmMEzx1dbr8fY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:35 GMT', etag: 'W/\"835-ETxihrLz4sr6DcGmMEzx1dbr8fY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:69b5bba1-af98-4ea3-91b5-2c68a15d0a5d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:ccce98fe-86ac-43db-bbf4-06bc5aff56f1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:602af31b-0127-43e4-affd-88ff1df45538",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22614,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:36f3758b-ac93-4b4c-83d3-5ce330c2a472",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:ed0b7f78-f57a-4ca7-94d7-f0f9d91ff030",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:afdac71f-ad6f-402d-9b0e-18107fe130d4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      credentials = await generateTestData({...testDataOptions, optionalTests});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1755,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "op7wMkgMosYQEVbkKWYvP",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:71a73c2d-4565-42d6-a1d8-e8c5411225c5"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:890f867c-efd2-4a27-bbf4-ee875b65aa90",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:770bd88b-45a0-4478-b062-086a0f647c95",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:1c2e5342-1090-4fda-8b9c-535b7cdbb15e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:d877eb08-6210-4d9b-9645-d34da00cc2e0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:e5454053-38bc-4efb-a053-268d41e287b7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:822474c1-dd31-4ad5-9c7e-0bbe0bccad93",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:62:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:8695d3d9-11c0-4fb4-9ed7-afda9599b6be",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25170,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:29a905ed-382b-4264-b1b8-2925649b4880",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:23955c7c-d331-40a8-89c4-adf193b0ca67",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:38 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:38 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:ec412efd-953c-4df4-b265-0f6b3e0db6aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:41598b46-f30f-4150-b087-77b1463e732d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25774,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:dc04fe91-d0a1-4a75-a9d2-9e7eefe430b5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:0dfbf19e-99b1-4e52-b3ba-a85197547484",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25930,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:f536788d-2134-450f-8e06-12e08aa9bde8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:129:9)"
              }
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:a0b26aa4-65f3-444c-80e1-3d58718cf0c4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 372,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:138:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      credentials = await generateTestData({...testDataOptions, optionalTests});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1746,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "op7wMkgMosYQEVbkKWYvP",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:e87f1d9e-a21e-4569-817d-d8cf3acb79b7"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P8Iub5-bmwx7taRSxgC9R",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:7ba87871-9101-4d0d-9a36-cee324d38e0a",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:64af7dc9-f426-4d87-83a3-ac75d331bb1d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:890f867c-efd2-4a27-bbf4-ee875b65aa90",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:d5532a59-a9b7-4aa7-a26e-6dd63c16acac",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:770bd88b-45a0-4478-b062-086a0f647c95",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:1bfafd1a-ee3e-44bc-ad2c-6cc881b795a8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:1c2e5342-1090-4fda-8b9c-535b7cdbb15e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:e2f9fe09-e3ff-4068-8184-ad19ffc19115",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21942,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:d877eb08-6210-4d9b-9645-d34da00cc2e0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:f60c47c9-46d0-4132-a27c-4ab755c2655c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:e5454053-38bc-4efb-a053-268d41e287b7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:79e3022f-5184-4a23-b5ca-bc9aa0c1d53f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:822474c1-dd31-4ad5-9c7e-0bbe0bccad93",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:62:7)"
              }
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:84268ae0-60c2-44bd-ab71-e62b2f032951",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:8695d3d9-11c0-4fb4-9ed7-afda9599b6be",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25170,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:cfeae66a-e71e-4a2f-87f6-69ac4fcec38b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:29a905ed-382b-4264-b1b8-2925649b4880",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:0b0a7173-fae6-4531-a396-58570be9430a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:35 GMT', etag: 'W/\"835-ETxihrLz4sr6DcGmMEzx1dbr8fY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:35 GMT', etag: 'W/\"835-ETxihrLz4sr6DcGmMEzx1dbr8fY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:23955c7c-d331-40a8-89c4-adf193b0ca67",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:38 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:38 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:78:7)"
              }
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:69b5bba1-af98-4ea3-91b5-2c68a15d0a5d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:ec412efd-953c-4df4-b265-0f6b3e0db6aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:ccce98fe-86ac-43db-bbf4-06bc5aff56f1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:41598b46-f30f-4150-b087-77b1463e732d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25774,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:602af31b-0127-43e4-affd-88ff1df45538",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22614,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('issuedVc');\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:dc04fe91-d0a1-4a75-a9d2-9e7eefe430b5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:38:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:36f3758b-ac93-4b4c-83d3-5ce330c2a472",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:0dfbf19e-99b1-4e52-b3ba-a85197547484",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25930,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:ed0b7f78-f57a-4ca7-94d7-f0f9d91ff030",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:f536788d-2134-450f-8e06-12e08aa9bde8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:129:9)"
              }
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "HAmDIxH5VmjdI1FLHrf43",
              "ctx": null,
              "_testId": "urn:uuid:afdac71f-ad6f-402d-9b0e-18107fe130d4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "mUfspfu7U-RY1NuOHDzbY",
              "ctx": null,
              "_testId": "urn:uuid:a0b26aa4-65f3-444c-80e1-3d58718cf0c4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 372,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', connection: 'keep-alive', 'content-length': '27', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:39 GMT', etag: 'W/\"1b-rRfMrqLEzOSc4mDcQ32caLaauZM\"', server: 'nginx/1.18.0 (Ubuntu)', 'x-powered-by': 'Express' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:138:9)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (verifiers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:d84abe48-4463-4e74-a88f-f2410d5abb9b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:98da8232-c1c9-47e8-a71c-0f64efeb7c10",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:b1c759a3-5432-4ced-ac10-88d8ca9ba9c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27496,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 415,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:eb0c98fb-51d1-4c04-9458-9dfc0491a129",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1597,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:d0d2200f-7389-4fd7-bff5-a82a8fb02e93",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1763,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:225a1ab7-3c48-40b6-9c4f-5023c17be27c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1475,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:b3b3dbf3-e569-4aea-8219-fe3589be85f8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:47cf3026-a6f1-4eed-893c-0e288afcd8b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:bb843697-0b76-4104-a3fb-97a23689acb5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:32a2ddc8-e8e8-4425-9225-9456267f8a18",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 844,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:521718bd-6b00-458a-9c15-ecdf94310752",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:3c8c2c7d-4ef0-49f4-a7ae-ccc5531ab0a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:300bdd85-eb0f-46f7-94c8-56f8f25fecbb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 538,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:47 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:47 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:163:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:dd04b261-ad49-4501-9e18-5628ce4a38c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:69e6258e-f37f-4f43-b1aa-d37a7047c998",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 692,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:119a444a-0156-4e26-88d1-1ce63c50c6b9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1519,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"created\" version 1.1 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:49 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"created\" version 1.1 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:49 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:f770ddd4-809d-4bf5-93a5-9c67a9004938",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nY_nfkU49wiBMlH-NSBq6",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:667f50fc-bdea-4721-a8fe-91169e829fc4"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "iTwxtWER0ugedmVJ-AqiN",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:901a9a6c-3d26-4c57-a889-1bf463f825b9",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with a bbs-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:d84abe48-4463-4e74-a88f-f2410d5abb9b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify a valid VC with a bbs-2023 proof.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:98da8232-c1c9-47e8-a71c-0f64efeb7c10",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 367,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify a valid VC with nested disclosed properties.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:b1c759a3-5432-4ced-ac10-88d8ca9ba9c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27496,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 415,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:eb0c98fb-51d1-4c04-9458-9dfc0491a129",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1597,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify with full array revealed properties",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:d0d2200f-7389-4fd7-bff5-a82a8fb02e93",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1763,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify with fewer array revealed properties",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:225a1ab7-3c48-40b6-9c4f-5023c17be27c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1475,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST verify w/o first element revealed properties",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:b3b3dbf3-e569-4aea-8219-fe3589be85f8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:47cf3026-a6f1-4eed-893c-0e288afcd8b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:bb843697-0b76-4104-a3fb-97a23689acb5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:32a2ddc8-e8e8-4425-9225-9456267f8a18",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 844,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:521718bd-6b00-458a-9c15-ecdf94310752",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:3c8c2c7d-4ef0-49f4-a7ae-ccc5531ab0a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:300bdd85-eb0f-46f7-94c8-56f8f25fecbb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 538,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:47 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:47 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:163:11)"
              }
            },
            {
              "cell": {
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:dd04b261-ad49-4501-9e18-5628ce4a38c6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "MUST fail to verify a base proof.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:69e6258e-f37f-4f43-b1aa-d37a7047c998",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 692,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "MUST fail to verify a modified disclosed credential.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:119a444a-0156-4e26-88d1-1ce63c50c6b9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1519,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"created\" version 1.1 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:49 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"created\" version 1.1 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:49 GMT', etag: 'W/\"87e-Afrky+zlnL3RFn1MHZTpfrzKuA0\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            },
            {
              "cell": {
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "1Vmh72u-o-1cLBG_bmtWb",
              "ctx": null,
              "_testId": "urn:uuid:f770ddd4-809d-4bf5-93a5-9c67a9004938",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
                "colId": "Grotto Networking"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:8cee10a4-1268-452d-a5fb-4249ab28129e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 446,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:373d1a10-a3e6-4043-a823-ca788f24b416",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:b8a71317-cdcd-4cf0-8622-3d9788c22608",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:d225cdab-c8d5-4d88-96bc-46437e63cd59",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1871,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:b9225644-9a11-4a6e-a90d-2a70b9f627cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1984,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:6c7dfa3d-8384-4cb7-a7ba-cf9062895498",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1458,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:3acbf0dc-c8c1-4b18-a7d0-6764e0934938",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:0661790b-81dd-4dee-a38f-e211e09c2b30",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:da150789-a003-4063-89ab-7006b5162a05",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:782cc690-36c0-43a7-bcde-53534a02b048",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 444,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:acbf3757-cf05-4165-ae24-4c8fb51a2def",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:5388191d-a2df-4006-aebc-c44a1fe3e019",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:8f5069f4-45b7-45fa-9d12-300c4ae18b92",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 377,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:57 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:57 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:163:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:a1a22a07-86fc-403c-893c-6870dde7c60c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:419eaaa1-5e2d-4a0d-8330-4c58cfb8efcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:9286ea7f-81a2-42d6-bd32-caeb9df7efca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1126,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"created\" version 2.0 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:58 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"created\" version 2.0 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:58 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:9237bb20-744a-4baf-b60c-b4ff61f1f947",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_lKfUTsP1NsRlJm-mSLNj",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:c55399db-a47a-426f-814e-175f1fbde68d"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:85813a5a-4b8c-44c4-a0c8-e4dcd7ac1f13",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 613,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:ffd305a9-440c-4b69-be16-fe08b6138f94",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 398,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:92cd1a87-6917-4a81-b512-26887cad4329",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 401,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:494fe5ea-d3fd-4c24-b743-bbfbdfbedf97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMJG4aLVZR18dUihaLwbmmPD5EC1-eaUiDnAd9IbiCR1LyCO68VTnRjzxSDBFYkAappbzhv_KNyLhRy7YRjTG1uf8dwdBy6fmlVHpv6wLESzlXzncO5nMpodA4AoVXoncLoptaiq8EZ8fZGxTPsguzvhBjauIU-7-18x5IHuf_KEY7H_3aLG7ivekdOrRFAIrgVdts_2MEKQI0fUK6oF_6a3026JKeACAWjdaJUNAjkODa-wUiDibIOoeUYziW2Py07F8fr9zVxp6YjB3W0ae0uM-egi9JIipxXcox470QeFTbptMngbbYMHS7IXWP2wlegizj6ccPQhHevhGCn7f41x0y1MY15Bqy_rCZwGIDzyAayfbq-UvmpK5_PJs6OCALSLc1Ht5VucS3iejgzmeI7WwAAoBBwIAAwgECwUFBgYHBAgMCQMKDQsPDAINCQ4BDw6DGBkYGhgcmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMJG4aLVZR18dUihaLwbmmPD5EC1-eaUiDnAd9IbiCR1LyCO68VTnRjzxSDBFYkAappbzhv_KNyLhRy7YRjTG1uf8dwdBy6fmlVHpv6wLESzlXzncO5nMpodA4AoVXoncLoptaiq8EZ8fZGxTPsguzvhBjauIU-7-18x5IHuf_KEY7H_3aLG7ivekdOrRFAIrgVdts_2MEKQI0fUK6oF_6a3026JKeACAWjdaJUNAjkODa-wUiDibIOoeUYziW2Py07F8fr9zVxp6YjB3W0ae0uM-egi9JIipxXcox470QeFTbptMngbbYMHS7IXWP2wlegizj6ccPQhHevhGCn7f41x0y1MY15Bqy_rCZwGIDzyAayfbq-UvmpK5_PJs6OCALSLc1Ht5VucS3iejgzmeI7WwAAoBBwIAAwgECwUFBgYHBAgMCQMKDQsPDAINCQ4BDw6DGBkYGhgcmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3680
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:71:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:dd18579b-ee78-492b-a739-643d219f517d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KaB8cVu_7jmP0DWoHsYBfzrh31Ye7RuSVukeCF0mH7L6z7Mpc2dXlbB-lhdNqvzpKTd2nevfEeTUS7_MnF9bzP8pNKL4nfc6a8Dw7P00HzhcFzBHOh1UtDQOMnb-YFLvIh2iTvPnKGQPpnbFLL7RMopRpUtPp_NeYgZfAI2KrQZ0V55alnx6EVZ2mvBy3Anh1axFF61X0_QWi0dhDg3Qha5maXq2-yEbtz7nbQxlXf0Vr2WNAaRX-YdgIWQH9xQ1xvfpXU5WR3GhvmbJEDVhXsFiFWKmdSrDdZMlvt1TOj3VBe527hizCkbuD-m2uqxdCW3kim2Cs9MZEJAmbDY8IeRHxi-7BTKuVb-BHLYFt1sBKuqGTFHk6SKKNfIbVk6EidIunrdhl51GFxvk9gH2uw-BVuy55c4U0tHC7lgptppCfM3IwuALIckr8n6fao-mSLXq_UalrIwSZiPZhkl32v-FDASZWfrMYf_Cbdl3QWBCb3Tj9c6MSeF6qQpohEbtjxhHzDckFFqnnMGkniUvcEFtxysC7w_HC83gXGoBYEMzGPiEkam9_6NL-ShMGFEeEmW_Hi1Ib1rnAoO_zNmXeX1tGME7tpvllAtSYStp9LLLV1i0-FiBuduM8IglkT74-0Xx1NSbfLUrWLa8keIZTtKZuVtXeJ4GXy3RhOVizFzvIn76v0j3ioGx-msGrQaEBifD1IpRjDwh0NJDg4RtytLbNTYJa7aGT2l47TZutU4YU8MI-mptp8I0wkISO21JVhGdm8gapaP7dGjiDfs_CdakEf6hAxhjunATmKY4ged1JxjZnsLpldjXmG39K6Fs3H3ImFIuWmveZc5vCVbaVfw4Mm9FKTA2Cfqtv9Fy4ATL-7DPW_qXXCPaVwrbq-ZzJ_i5lykc6PlY6ikOcsOs0FtrfQL7xi9X70e11Th2v-Wu1B5rjke4IkOoHDddk_UsCZ3EEXVh1x7X0AGU6cCAGw9_Nxd7ML3kuH_mYztUcXOEzTadnumlXdPaZZnMazDx3SrIEHxv3EfekBp1HFidgxUC03DNyiRJ8f0rXily1-LonA63HUKwtKI5KlzfwoBawf0buNG7GkJV8WPXJ2_pTqNZSCF1o3WZj7uJs-kZMuuEyS38aZTz49h6A4vcZJZ1pktzyd4rnK5NTNHuaBhFMocHDTJ0gS-_JLQoNTfcnEOfoqqdB8d-iWQYVuMbM8_YBBW8AxAU1olllL3kszGb8UPA6oE21NnDxI2RN7A6xfgX1ATWsmI0IF4g2_Y2tMkLUe9JU1ZtNPAr7e9nNd-ED2rAAwBDwICAwsEBAUKBg0HAwgOCQcKAYMYHBgdGB-YIgMEBQYHCAkKCw0ODxESExQVFhcYGBgZGBoYHRgfGCEYIhgjGCQYJRgnGCgYLxgwGDFA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KaB8cVu_7jmP0DWoHsYBfzrh31Ye7RuSVukeCF0mH7L6z7Mpc2dXlbB-lhdNqvzpKTd2nevfEeTUS7_MnF9bzP8pNKL4nfc6a8Dw7P00HzhcFzBHOh1UtDQOMnb-YFLvIh2iTvPnKGQPpnbFLL7RMopRpUtPp_NeYgZfAI2KrQZ0V55alnx6EVZ2mvBy3Anh1axFF61X0_QWi0dhDg3Qha5maXq2-yEbtz7nbQxlXf0Vr2WNAaRX-YdgIWQH9xQ1xvfpXU5WR3GhvmbJEDVhXsFiFWKmdSrDdZMlvt1TOj3VBe527hizCkbuD-m2uqxdCW3kim2Cs9MZEJAmbDY8IeRHxi-7BTKuVb-BHLYFt1sBKuqGTFHk6SKKNfIbVk6EidIunrdhl51GFxvk9gH2uw-BVuy55c4U0tHC7lgptppCfM3IwuALIckr8n6fao-mSLXq_UalrIwSZiPZhkl32v-FDASZWfrMYf_Cbdl3QWBCb3Tj9c6MSeF6qQpohEbtjxhHzDckFFqnnMGkniUvcEFtxysC7w_HC83gXGoBYEMzGPiEkam9_6NL-ShMGFEeEmW_Hi1Ib1rnAoO_zNmXeX1tGME7tpvllAtSYStp9LLLV1i0-FiBuduM8IglkT74-0Xx1NSbfLUrWLa8keIZTtKZuVtXeJ4GXy3RhOVizFzvIn76v0j3ioGx-msGrQaEBifD1IpRjDwh0NJDg4RtytLbNTYJa7aGT2l47TZutU4YU8MI-mptp8I0wkISO21JVhGdm8gapaP7dGjiDfs_CdakEf6hAxhjunATmKY4ged1JxjZnsLpldjXmG39K6Fs3H3ImFIuWmveZc5vCVbaVfw4Mm9FKTA2Cfqtv9Fy4ATL-7DPW_qXXCPaVwrbq-ZzJ_i5lykc6PlY6ikOcsOs0FtrfQL7xi9X70e11Th2v-Wu1B5rjke4IkOoHDddk_UsCZ3EEXVh1x7X0AGU6cCAGw9_Nxd7ML3kuH_mYztUcXOEzTadnumlXdPaZZnMazDx3SrIEHxv3EfekBp1HFidgxUC03DNyiRJ8f0rXily1-LonA63HUKwtKI5KlzfwoBawf0buNG7GkJV8WPXJ2_pTqNZSCF1o3WZj7uJs-kZMuuEyS38aZTz49h6A4vcZJZ1pktzyd4rnK5NTNHuaBhFMocHDTJ0gS-_JLQoNTfcnEOfoqqdB8d-iWQYVuMbM8_YBBW8AxAU1olllL3kszGb8UPA6oE21NnDxI2RN7A6xfgX1ATWsmI0IF4g2_Y2tMkLUe9JU1ZtNPAr7e9nNd-ED2rAAwBDwICAwsEBAUKBg0HAwgOCQcKAYMYHBgdGB-YIgMEBQYHCAkKCw0ODxESExQVFhcYGBgZGBoYHRgfGCEYIhgjGCQYJRgnGCgYLxgwGDFA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3681
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:aa6c03d0-38ce-4d49-91ea-58c71b97a892",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkI-AlLkC6PgWAJDC80_ye8Sry29YYqlxXvx7dWIvgaRfs91eIN-P_14eD2MZOO4CQqcIOQ1318P8SJx5rNXTOP6CDoUcrrMT54l55CvxfuqRTmAbTk8N9BJAA20F-3WhG6cXlghetmCYbHLK5ktMKTmqccmjafA9oqN2kK1ldgkT0msvFg9AwrTanWjKaRZ50k1RhYeEW6lo0U_B1FWWymvYNKSyaD35dYaYeIQA6VzDHPgzp6dacf_iaXUQc2MerxtgTXENZwRc09RQtmfJs8tDOsvd636ntl4MZGiE-grCqSqauQ_m9hsZJfCFzgHBjRP_gjVnzgvWoU2QtQL3Lk6XPgJze0mpYpT7F3vJdVtPQjkteaHULgt7JA_cURz42qSPqX2hdxLLsxz-QZkzxZIrqRGyXtZFTdQhMlPvpKoKvd5H6hbT4gbirztS9McHIFbxuumrlZXPj7coWjXdzRymQJXxBGlYGkbOBoyRfg-TEj1xGx4DfHWAVqrPyHIIxtV5XyfJZnxPsGh0QiD6lW4uRmRpxcQxh37dNQajZ1NZ9bDW09o6tuzB74hXAcXJ1k5TjkULTcJ31rxnUQLjmzo4obXcNSVr7lMyyOax3f3QODRGT_wgmOYX2aWVBzN6mykvd7jE6qN12vs75Omu-D8S0XC1OQaBilXe6RIp_z1t1m3I6QJhhwoghRLjx6KXelAeEoPMS6tC5187309NW4S9vSIjyOFex0UDFOjBOUtjB3vgoZLtKQCPMgNI35VfoJvOCwWzc_th59SyhlFTYqtAwHSGQbnjuzfA-YEW96zgXfJVJXE57GgDd54qJpVE0zwqbwb6uSBFJ2vEPU-Uzq558bbh3ETXfbPh9GisW7-CO2st_NbZgxA95TfPejDcOf0rCTgdTAGIJMPIQBHdz81N9WrP-BqiIuPIn8_64_tipYhKE9fJPa6ZaWAim6Ka8FqqmyPKDpCddlFCsWutB5oaLBfip50SCJgAsWQVOGNZU-CdnqmiPgwFxd4K36YmhDvtB_FdADf9_gTDpwrHaLMuinqB2biMQYpn-D8Cdi10dTHK6Arw6s_znbhfz84oZUSJ46BgmZPePiXWHg6tSJOaNl5IOVwXKabAt5udf4InV-ZXldvKPUdsTAra_D68lFBsV0-8TuyPJC26VFp5j6tMr6sGJEZ2KQy3PeBKaefwj1ChMX2TGaucMO7xg7As9wSdsa6B2tmf9Pw4og2B16iYjAOO9_g6-AOgXrmNRNDER9oI03tCIAmZkRYrx2Dwf-gzA4wtg3-B_1lrWBcVehoiOC9WnFErkAdC7aDKXEr5qG_GP2QZCIhy0SzggKw5AmyyoNgArGe-c6LS8cCgrjYICQkfkh4XcM3pjM7xlRECIdmRfHD906yWDHIzUOCIM_tIJtgKopHuMtibm-vVFOxH3YyNgnCP7EYMQfxjXchD3BX_Twi4U4_kmS_K0tEGIS1yu4o3BK98p5Jf0o9iGHi2HlBU7sNgLjxj5AHzqjA7Dur-74DG73QQBBmklgG_m7XdUoE25ImC7nR9P3Om2UGpAAgBDAIFAwcEDQUKBg4HCQgCgwABA5gcCw8QERITFBUWGBkYGhgbGBwYIBghGCIYKRgqGCsYLxgwGDEYMhgzGDQYNRg2GDdA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkI-AlLkC6PgWAJDC80_ye8Sry29YYqlxXvx7dWIvgaRfs91eIN-P_14eD2MZOO4CQqcIOQ1318P8SJx5rNXTOP6CDoUcrrMT54l55CvxfuqRTmAbTk8N9BJAA20F-3WhG6cXlghetmCYbHLK5ktMKTmqccmjafA9oqN2kK1ldgkT0msvFg9AwrTanWjKaRZ50k1RhYeEW6lo0U_B1FWWymvYNKSyaD35dYaYeIQA6VzDHPgzp6dacf_iaXUQc2MerxtgTXENZwRc09RQtmfJs8tDOsvd636ntl4MZGiE-grCqSqauQ_m9hsZJfCFzgHBjRP_gjVnzgvWoU2QtQL3Lk6XPgJze0mpYpT7F3vJdVtPQjkteaHULgt7JA_cURz42qSPqX2hdxLLsxz-QZkzxZIrqRGyXtZFTdQhMlPvpKoKvd5H6hbT4gbirztS9McHIFbxuumrlZXPj7coWjXdzRymQJXxBGlYGkbOBoyRfg-TEj1xGx4DfHWAVqrPyHIIxtV5XyfJZnxPsGh0QiD6lW4uRmRpxcQxh37dNQajZ1NZ9bDW09o6tuzB74hXAcXJ1k5TjkULTcJ31rxnUQLjmzo4obXcNSVr7lMyyOax3f3QODRGT_wgmOYX2aWVBzN6mykvd7jE6qN12vs75Omu-D8S0XC1OQaBilXe6RIp_z1t1m3I6QJhhwoghRLjx6KXelAeEoPMS6tC5187309NW4S9vSIjyOFex0UDFOjBOUtjB3vgoZLtKQCPMgNI35VfoJvOCwWzc_th59SyhlFTYqtAwHSGQbnjuzfA-YEW96zgXfJVJXE57GgDd54qJpVE0zwqbwb6uSBFJ2vEPU-Uzq558bbh3ETXfbPh9GisW7-CO2st_NbZgxA95TfPejDcOf0rCTgdTAGIJMPIQBHdz81N9WrP-BqiIuPIn8_64_tipYhKE9fJPa6ZaWAim6Ka8FqqmyPKDpCddlFCsWutB5oaLBfip50SCJgAsWQVOGNZU-CdnqmiPgwFxd4K36YmhDvtB_FdADf9_gTDpwrHaLMuinqB2biMQYpn-D8Cdi10dTHK6Arw6s_znbhfz84oZUSJ46BgmZPePiXWHg6tSJOaNl5IOVwXKabAt5udf4InV-ZXldvKPUdsTAra_D68lFBsV0-8TuyPJC26VFp5j6tMr6sGJEZ2KQy3PeBKaefwj1ChMX2TGaucMO7xg7As9wSdsa6B2tmf9Pw4og2B16iYjAOO9_g6-AOgXrmNRNDER9oI03tCIAmZkRYrx2Dwf-gzA4wtg3-B_1lrWBcVehoiOC9WnFErkAdC7aDKXEr5qG_GP2QZCIhy0SzggKw5AmyyoNgArGe-c6LS8cCgrjYICQkfkh4XcM3pjM7xlRECIdmRfHD906yWDHIzUOCIM_tIJtgKopHuMtibm-vVFOxH3YyNgnCP7EYMQfxjXchD3BX_Twi4U4_kmS_K0tEGIS1yu4o3BK98p5Jf0o9iGHi2HlBU7sNgLjxj5AHzqjA7Dur-74DG73QQBBmklgG_m7XdUoE25ImC7nR9P3Om2UGpAAgBDAIFAwcEDQUKBg4HCQgCgwABA5gcCw8QERITFBUWGBkYGhgbGBwYIBghGCIYKRgqGCsYLxgwGDEYMhgzGDQYNRg2GDdA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3682
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:82:13)"
              }
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:3b65bc7b-1731-47db-8990-5a2b8477c2ca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:95:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:d0a87ead-ab6b-427a-bf06-ccbc4cc5db20",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:45d99c25-3efb-4c54-a8c0-5bda8d1e7843",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:317bd50b-efc8-464e-b00e-1458f7ac3dba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 593,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:3745f328-3ac9-40d4-a634-718e90d84dd9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:7f622aab-4237-4cc6-a02e-f8cb5bdf321b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:46cb36df-28d9-4e1a-87dc-55f0b24e9455",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:016f44f9-4fd3-4725-a0a9-4aae194b385c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:b24a17d3-7a46-41ec-8bef-f7aa638066d4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:0d893649-d9ce-49ef-be25-d06bdc83f10e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1264,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"valuePrefix\" version 2.0 keyType P-381: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"valuePrefix\" version 2.0 keyType P-381: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:dd350973-5f32-47d9-bb88-f9b7e2d5ece1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:191:11)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_lKfUTsP1NsRlJm-mSLNj",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:64ab7d7e-69b4-4d49-9818-e22cdb251687"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "iTwxtWER0ugedmVJ-AqiN",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:a5656f96-abde-42aa-9450-b3805ddbe0d5",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with a bbs-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:8cee10a4-1268-452d-a5fb-4249ab28129e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 446,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.basic);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:85813a5a-4b8c-44c4-a0c8-e4dcd7ac1f13",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 613,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:373d1a10-a3e6-4043-a823-ca788f24b416",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:ffd305a9-440c-4b69-be16-fe08b6138f94",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 398,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:b8a71317-cdcd-4cf0-8622-3d9788c22608",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:92cd1a87-6917-4a81-b512-26887cad4329",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 401,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:d225cdab-c8d5-4d88-96bc-46437e63cd59",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1871,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:494fe5ea-d3fd-4c24-b743-bbfbdfbedf97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMJG4aLVZR18dUihaLwbmmPD5EC1-eaUiDnAd9IbiCR1LyCO68VTnRjzxSDBFYkAappbzhv_KNyLhRy7YRjTG1uf8dwdBy6fmlVHpv6wLESzlXzncO5nMpodA4AoVXoncLoptaiq8EZ8fZGxTPsguzvhBjauIU-7-18x5IHuf_KEY7H_3aLG7ivekdOrRFAIrgVdts_2MEKQI0fUK6oF_6a3026JKeACAWjdaJUNAjkODa-wUiDibIOoeUYziW2Py07F8fr9zVxp6YjB3W0ae0uM-egi9JIipxXcox470QeFTbptMngbbYMHS7IXWP2wlegizj6ccPQhHevhGCn7f41x0y1MY15Bqy_rCZwGIDzyAayfbq-UvmpK5_PJs6OCALSLc1Ht5VucS3iejgzmeI7WwAAoBBwIAAwgECwUFBgYHBAgMCQMKDQsPDAINCQ4BDw6DGBkYGhgcmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMJG4aLVZR18dUihaLwbmmPD5EC1-eaUiDnAd9IbiCR1LyCO68VTnRjzxSDBFYkAappbzhv_KNyLhRy7YRjTG1uf8dwdBy6fmlVHpv6wLESzlXzncO5nMpodA4AoVXoncLoptaiq8EZ8fZGxTPsguzvhBjauIU-7-18x5IHuf_KEY7H_3aLG7ivekdOrRFAIrgVdts_2MEKQI0fUK6oF_6a3026JKeACAWjdaJUNAjkODa-wUiDibIOoeUYziW2Py07F8fr9zVxp6YjB3W0ae0uM-egi9JIipxXcox470QeFTbptMngbbYMHS7IXWP2wlegizj6ccPQhHevhGCn7f41x0y1MY15Bqy_rCZwGIDzyAayfbq-UvmpK5_PJs6OCALSLc1Ht5VucS3iejgzmeI7WwAAoBBwIAAwgECwUFBgYHBAgMCQMKDQsPDAINCQ4BDw6DGBkYGhgcmDcAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGBgZGBoYGxgcGB0YHhgfGCAYIRgiGCMYJBglGCcYKBgpGCoYKxgsGC0YLhgvGDAYMRgyGDMYNBg1GDYYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3680
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:71:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:b9225644-9a11-4a6e-a90d-2a70b9f627cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1984,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:dd18579b-ee78-492b-a739-643d219f517d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0KaB8cVu_7jmP0DWoHsYBfzrh31Ye7RuSVukeCF0mH7L6z7Mpc2dXlbB-lhdNqvzpKTd2nevfEeTUS7_MnF9bzP8pNKL4nfc6a8Dw7P00HzhcFzBHOh1UtDQOMnb-YFLvIh2iTvPnKGQPpnbFLL7RMopRpUtPp_NeYgZfAI2KrQZ0V55alnx6EVZ2mvBy3Anh1axFF61X0_QWi0dhDg3Qha5maXq2-yEbtz7nbQxlXf0Vr2WNAaRX-YdgIWQH9xQ1xvfpXU5WR3GhvmbJEDVhXsFiFWKmdSrDdZMlvt1TOj3VBe527hizCkbuD-m2uqxdCW3kim2Cs9MZEJAmbDY8IeRHxi-7BTKuVb-BHLYFt1sBKuqGTFHk6SKKNfIbVk6EidIunrdhl51GFxvk9gH2uw-BVuy55c4U0tHC7lgptppCfM3IwuALIckr8n6fao-mSLXq_UalrIwSZiPZhkl32v-FDASZWfrMYf_Cbdl3QWBCb3Tj9c6MSeF6qQpohEbtjxhHzDckFFqnnMGkniUvcEFtxysC7w_HC83gXGoBYEMzGPiEkam9_6NL-ShMGFEeEmW_Hi1Ib1rnAoO_zNmXeX1tGME7tpvllAtSYStp9LLLV1i0-FiBuduM8IglkT74-0Xx1NSbfLUrWLa8keIZTtKZuVtXeJ4GXy3RhOVizFzvIn76v0j3ioGx-msGrQaEBifD1IpRjDwh0NJDg4RtytLbNTYJa7aGT2l47TZutU4YU8MI-mptp8I0wkISO21JVhGdm8gapaP7dGjiDfs_CdakEf6hAxhjunATmKY4ged1JxjZnsLpldjXmG39K6Fs3H3ImFIuWmveZc5vCVbaVfw4Mm9FKTA2Cfqtv9Fy4ATL-7DPW_qXXCPaVwrbq-ZzJ_i5lykc6PlY6ikOcsOs0FtrfQL7xi9X70e11Th2v-Wu1B5rjke4IkOoHDddk_UsCZ3EEXVh1x7X0AGU6cCAGw9_Nxd7ML3kuH_mYztUcXOEzTadnumlXdPaZZnMazDx3SrIEHxv3EfekBp1HFidgxUC03DNyiRJ8f0rXily1-LonA63HUKwtKI5KlzfwoBawf0buNG7GkJV8WPXJ2_pTqNZSCF1o3WZj7uJs-kZMuuEyS38aZTz49h6A4vcZJZ1pktzyd4rnK5NTNHuaBhFMocHDTJ0gS-_JLQoNTfcnEOfoqqdB8d-iWQYVuMbM8_YBBW8AxAU1olllL3kszGb8UPA6oE21NnDxI2RN7A6xfgX1ATWsmI0IF4g2_Y2tMkLUe9JU1ZtNPAr7e9nNd-ED2rAAwBDwICAwsEBAUKBg0HAwgOCQcKAYMYHBgdGB-YIgMEBQYHCAkKCw0ODxESExQVFhcYGBgZGBoYHRgfGCEYIhgjGCQYJRgnGCgYLxgwGDFA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0KaB8cVu_7jmP0DWoHsYBfzrh31Ye7RuSVukeCF0mH7L6z7Mpc2dXlbB-lhdNqvzpKTd2nevfEeTUS7_MnF9bzP8pNKL4nfc6a8Dw7P00HzhcFzBHOh1UtDQOMnb-YFLvIh2iTvPnKGQPpnbFLL7RMopRpUtPp_NeYgZfAI2KrQZ0V55alnx6EVZ2mvBy3Anh1axFF61X0_QWi0dhDg3Qha5maXq2-yEbtz7nbQxlXf0Vr2WNAaRX-YdgIWQH9xQ1xvfpXU5WR3GhvmbJEDVhXsFiFWKmdSrDdZMlvt1TOj3VBe527hizCkbuD-m2uqxdCW3kim2Cs9MZEJAmbDY8IeRHxi-7BTKuVb-BHLYFt1sBKuqGTFHk6SKKNfIbVk6EidIunrdhl51GFxvk9gH2uw-BVuy55c4U0tHC7lgptppCfM3IwuALIckr8n6fao-mSLXq_UalrIwSZiPZhkl32v-FDASZWfrMYf_Cbdl3QWBCb3Tj9c6MSeF6qQpohEbtjxhHzDckFFqnnMGkniUvcEFtxysC7w_HC83gXGoBYEMzGPiEkam9_6NL-ShMGFEeEmW_Hi1Ib1rnAoO_zNmXeX1tGME7tpvllAtSYStp9LLLV1i0-FiBuduM8IglkT74-0Xx1NSbfLUrWLa8keIZTtKZuVtXeJ4GXy3RhOVizFzvIn76v0j3ioGx-msGrQaEBifD1IpRjDwh0NJDg4RtytLbNTYJa7aGT2l47TZutU4YU8MI-mptp8I0wkISO21JVhGdm8gapaP7dGjiDfs_CdakEf6hAxhjunATmKY4ged1JxjZnsLpldjXmG39K6Fs3H3ImFIuWmveZc5vCVbaVfw4Mm9FKTA2Cfqtv9Fy4ATL-7DPW_qXXCPaVwrbq-ZzJ_i5lykc6PlY6ikOcsOs0FtrfQL7xi9X70e11Th2v-Wu1B5rjke4IkOoHDddk_UsCZ3EEXVh1x7X0AGU6cCAGw9_Nxd7ML3kuH_mYztUcXOEzTadnumlXdPaZZnMazDx3SrIEHxv3EfekBp1HFidgxUC03DNyiRJ8f0rXily1-LonA63HUKwtKI5KlzfwoBawf0buNG7GkJV8WPXJ2_pTqNZSCF1o3WZj7uJs-kZMuuEyS38aZTz49h6A4vcZJZ1pktzyd4rnK5NTNHuaBhFMocHDTJ0gS-_JLQoNTfcnEOfoqqdB8d-iWQYVuMbM8_YBBW8AxAU1olllL3kszGb8UPA6oE21NnDxI2RN7A6xfgX1ATWsmI0IF4g2_Y2tMkLUe9JU1ZtNPAr7e9nNd-ED2rAAwBDwICAwsEBAUKBg0HAwgOCQcKAYMYHBgdGB-YIgMEBQYHCAkKCw0ODxESExQVFhcYGBgZGBoYHRgfGCEYIhgjGCQYJRgnGCgYLxgwGDFA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3681
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:6c7dfa3d-8384-4cb7-a7ba-cf9062895498",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1458,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = cloneTestVector(\n              disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:aa6c03d0-38ce-4d49-91ea-58c71b97a892",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkI-AlLkC6PgWAJDC80_ye8Sry29YYqlxXvx7dWIvgaRfs91eIN-P_14eD2MZOO4CQqcIOQ1318P8SJx5rNXTOP6CDoUcrrMT54l55CvxfuqRTmAbTk8N9BJAA20F-3WhG6cXlghetmCYbHLK5ktMKTmqccmjafA9oqN2kK1ldgkT0msvFg9AwrTanWjKaRZ50k1RhYeEW6lo0U_B1FWWymvYNKSyaD35dYaYeIQA6VzDHPgzp6dacf_iaXUQc2MerxtgTXENZwRc09RQtmfJs8tDOsvd636ntl4MZGiE-grCqSqauQ_m9hsZJfCFzgHBjRP_gjVnzgvWoU2QtQL3Lk6XPgJze0mpYpT7F3vJdVtPQjkteaHULgt7JA_cURz42qSPqX2hdxLLsxz-QZkzxZIrqRGyXtZFTdQhMlPvpKoKvd5H6hbT4gbirztS9McHIFbxuumrlZXPj7coWjXdzRymQJXxBGlYGkbOBoyRfg-TEj1xGx4DfHWAVqrPyHIIxtV5XyfJZnxPsGh0QiD6lW4uRmRpxcQxh37dNQajZ1NZ9bDW09o6tuzB74hXAcXJ1k5TjkULTcJ31rxnUQLjmzo4obXcNSVr7lMyyOax3f3QODRGT_wgmOYX2aWVBzN6mykvd7jE6qN12vs75Omu-D8S0XC1OQaBilXe6RIp_z1t1m3I6QJhhwoghRLjx6KXelAeEoPMS6tC5187309NW4S9vSIjyOFex0UDFOjBOUtjB3vgoZLtKQCPMgNI35VfoJvOCwWzc_th59SyhlFTYqtAwHSGQbnjuzfA-YEW96zgXfJVJXE57GgDd54qJpVE0zwqbwb6uSBFJ2vEPU-Uzq558bbh3ETXfbPh9GisW7-CO2st_NbZgxA95TfPejDcOf0rCTgdTAGIJMPIQBHdz81N9WrP-BqiIuPIn8_64_tipYhKE9fJPa6ZaWAim6Ka8FqqmyPKDpCddlFCsWutB5oaLBfip50SCJgAsWQVOGNZU-CdnqmiPgwFxd4K36YmhDvtB_FdADf9_gTDpwrHaLMuinqB2biMQYpn-D8Cdi10dTHK6Arw6s_znbhfz84oZUSJ46BgmZPePiXWHg6tSJOaNl5IOVwXKabAt5udf4InV-ZXldvKPUdsTAra_D68lFBsV0-8TuyPJC26VFp5j6tMr6sGJEZ2KQy3PeBKaefwj1ChMX2TGaucMO7xg7As9wSdsa6B2tmf9Pw4og2B16iYjAOO9_g6-AOgXrmNRNDER9oI03tCIAmZkRYrx2Dwf-gzA4wtg3-B_1lrWBcVehoiOC9WnFErkAdC7aDKXEr5qG_GP2QZCIhy0SzggKw5AmyyoNgArGe-c6LS8cCgrjYICQkfkh4XcM3pjM7xlRECIdmRfHD906yWDHIzUOCIM_tIJtgKopHuMtibm-vVFOxH3YyNgnCP7EYMQfxjXchD3BX_Twi4U4_kmS_K0tEGIS1yu4o3BK98p5Jf0o9iGHi2HlBU7sNgLjxj5AHzqjA7Dur-74DG73QQBBmklgG_m7XdUoE25ImC7nR9P3Om2UGpAAgBDAIFAwcEDQUKBg4HCQgCgwABA5gcCw8QERITFBUWGBkYGhgbGBwYIBghGCIYKRgqGCsYLxgwGDEYMhgzGDQYNRg2GDdA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkI-AlLkC6PgWAJDC80_ye8Sry29YYqlxXvx7dWIvgaRfs91eIN-P_14eD2MZOO4CQqcIOQ1318P8SJx5rNXTOP6CDoUcrrMT54l55CvxfuqRTmAbTk8N9BJAA20F-3WhG6cXlghetmCYbHLK5ktMKTmqccmjafA9oqN2kK1ldgkT0msvFg9AwrTanWjKaRZ50k1RhYeEW6lo0U_B1FWWymvYNKSyaD35dYaYeIQA6VzDHPgzp6dacf_iaXUQc2MerxtgTXENZwRc09RQtmfJs8tDOsvd636ntl4MZGiE-grCqSqauQ_m9hsZJfCFzgHBjRP_gjVnzgvWoU2QtQL3Lk6XPgJze0mpYpT7F3vJdVtPQjkteaHULgt7JA_cURz42qSPqX2hdxLLsxz-QZkzxZIrqRGyXtZFTdQhMlPvpKoKvd5H6hbT4gbirztS9McHIFbxuumrlZXPj7coWjXdzRymQJXxBGlYGkbOBoyRfg-TEj1xGx4DfHWAVqrPyHIIxtV5XyfJZnxPsGh0QiD6lW4uRmRpxcQxh37dNQajZ1NZ9bDW09o6tuzB74hXAcXJ1k5TjkULTcJ31rxnUQLjmzo4obXcNSVr7lMyyOax3f3QODRGT_wgmOYX2aWVBzN6mykvd7jE6qN12vs75Omu-D8S0XC1OQaBilXe6RIp_z1t1m3I6QJhhwoghRLjx6KXelAeEoPMS6tC5187309NW4S9vSIjyOFex0UDFOjBOUtjB3vgoZLtKQCPMgNI35VfoJvOCwWzc_th59SyhlFTYqtAwHSGQbnjuzfA-YEW96zgXfJVJXE57GgDd54qJpVE0zwqbwb6uSBFJ2vEPU-Uzq558bbh3ETXfbPh9GisW7-CO2st_NbZgxA95TfPejDcOf0rCTgdTAGIJMPIQBHdz81N9WrP-BqiIuPIn8_64_tipYhKE9fJPa6ZaWAim6Ka8FqqmyPKDpCddlFCsWutB5oaLBfip50SCJgAsWQVOGNZU-CdnqmiPgwFxd4K36YmhDvtB_FdADf9_gTDpwrHaLMuinqB2biMQYpn-D8Cdi10dTHK6Arw6s_znbhfz84oZUSJ46BgmZPePiXWHg6tSJOaNl5IOVwXKabAt5udf4InV-ZXldvKPUdsTAra_D68lFBsV0-8TuyPJC26VFp5j6tMr6sGJEZ2KQy3PeBKaefwj1ChMX2TGaucMO7xg7As9wSdsa6B2tmf9Pw4og2B16iYjAOO9_g6-AOgXrmNRNDER9oI03tCIAmZkRYrx2Dwf-gzA4wtg3-B_1lrWBcVehoiOC9WnFErkAdC7aDKXEr5qG_GP2QZCIhy0SzggKw5AmyyoNgArGe-c6LS8cCgrjYICQkfkh4XcM3pjM7xlRECIdmRfHD906yWDHIzUOCIM_tIJtgKopHuMtibm-vVFOxH3YyNgnCP7EYMQfxjXchD3BX_Twi4U4_kmS_K0tEGIS1yu4o3BK98p5Jf0o9iGHi2HlBU7sNgLjxj5AHzqjA7Dur-74DG73QQBBmklgG_m7XdUoE25ImC7nR9P3Om2UGpAAgBDAIFAwcEDQUKBg4HCQgCgwABA5gcCw8QERITFBUWGBkYGhgbGBwYIBghGCIYKRgqGCsYLxgwGDEYMhgzGDQYNRg2GDdA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 3682
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:82:13)"
              }
            }
          ]
        },
        {
          "id": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:3acbf0dc-c8c1-4b18-a7d0-6764e0934938",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.basic);\n          // intentionally modify proofValue to not start with 'u'\n          credential.proof.proofValue = 'a' +\n            credential.proof.proofValue.substr(1);\n          //FIXME assert on error type in the future\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:3b65bc7b-1731-47db-8990-5a2b8477c2ca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proofValue string does not start with u (U+0075 LATIN SMALL LETTER U), indicating that it is a multibase-base64url-no-pad-encoded value, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20proofValue%20string%20does%20not%20start%20with%20u%20(U%2B0075%20LATIN%20SMALL%20LETTER%20U)%2C%20indicating%20that%20it%20is%20a%20multibase%2Dbase64url%2Dno%2Dpad%2Dencoded%20value%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:95:11)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:0661790b-81dd-4dee-a38f-e211e09c2b30",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = cloneTestVector(disclosed?.invalid?.cryptosuite);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:d0a87ead-ab6b-427a-bf06-ccbc4cc5db20",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:da150789-a003-4063-89ab-7006b5162a05",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofTypeAndCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.cryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.proofType),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:45d99c25-3efb-4c54-a8c0-5bda8d1e7843",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to bbs-2023, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20bbs%2D2023%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:782cc690-36c0-43a7-bcde-53534a02b048",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 444,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.';\n          const credential = cloneTestVector(disclosed?.invalid?.nonUTF8);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:317bd50b-efc8-464e-b00e-1458f7ac3dba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm (base proof) encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#serializebaseproofvalue:~:text=Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 593,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:acbf3757-cf05-4165-ae24-4c8fb51a2def",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.';\n          await verificationFail({\n            credential: cloneTestVector(\n              disclosed?.invalid?.noProofTypeOrCryptosuite),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noProofType),\n            verifier\n          });\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.noCryptosuite),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:3745f328-3ac9-40d4-a634-718e90d84dd9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite). A proof configuration object is produced as output."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#linkage-via-proof-options-and-mandatory-reveal:~:text=The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).%20A%20proof%20configuration%20object%20is%20produced%20as%20output.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
          "cells": [
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:5388191d-a2df-4006-aebc-c44a1fe3e019",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived';\n          await verificationFail({\n            credential: cloneTestVector(disclosed?.invalid?.cborg),\n            verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:7f622aab-4237-4cc6-a02e-f8cb5bdf321b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "CBOR-encode components per [RFC8949] where CBOR tagging MUST NOT be used on any of the components. Append the produced encoded value to proofValue."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#base-proof-transformation-bbs-2023:~:text=and%20pseudonym.-,CBOR%2Dencode%20components%20per%20%5BRFC8949%5D%20where%20CBOR%20tagging%20MUST%20NOT%20be%20used%20on%20any%20of%20the%20components.%20Append%20the%20produced%20encoded%20value%20to%20proofValue.,-Return%20the%20derived",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:8f5069f4-45b7-45fa-9d12-300c4ae18b92",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 377,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:57 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:57 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:163:11)"
              }
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.created);\n          //FIXME assert on error code or message when available\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:46cb36df-28d9-4e1a-87dc-55f0b24e9455",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set and if the value is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20proofConfig.created%20is%20set%20and%20if%20the%20value%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:a1a22a07-86fc-403c-893c-6870dde7c60c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = cloneTestVector(base);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:016f44f9-4fd3-4725-a0a9-4aae194b385c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:419eaaa1-5e2d-4a0d-8330-4c58cfb8efcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = cloneTestVector(disclosed?.invalid?.modified);\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:b24a17d3-7a46-41ec-8bef-f7aa638066d4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:9286ea7f-81a2-42d6-bd32-caeb9df7efca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1126,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"created\" version 2.0 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:58 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"created\" version 2.0 keyType P-381: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-encoding': 'gzip', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 14 Jul 2024 05:06:58 GMT', etag: 'W/\"84d-0PDI0qMibunJekEX5gg3+t+mNJY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', 'transfer-encoding': 'chunked', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:35:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n          for(const [prop, vector] of Object.entries(disclosed?.invalid)) {\n            await verificationFail({\n              credential: cloneTestVector(vector),\n              verifier,\n              reason: `Verified invalid VC \"${prop}\" version ` +\n                 `${vcVersion} keyType ${keyType}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:0d893649-d9ce-49ef-be25-d06bdc83f10e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1264,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verified invalid VC \"valuePrefix\" version 2.0 keyType P-381: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Verified invalid VC \"valuePrefix\" version 2.0 keyType P-381: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:178:13)"
              }
            }
          ]
        },
        {
          "id": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "iMNFaGhykMJdRFQDq88SX",
              "ctx": null,
              "_testId": "urn:uuid:9237bb20-744a-4baf-b60c-b4ff61f1f947",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          const credential = cloneTestVector(disclosed?.invalid?.valuePrefix);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "JQ9xq-_SdqeAujtofTHZK",
              "ctx": null,
              "_testId": "urn:uuid:dd350973-5f32-47d9-bb88-f9b7e2d5ece1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the decodedProofValue starts with any other three byte sequence, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-bbs/#:~:text=If%20the%20decodedProofValue%20starts%20with%20any%20other%20three%20byte%20sequence%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422 for invalid input!: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:41:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:191:11)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: ['/credentialSubject/id'],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "LUMZSvvheo-sJ1ZLDEYja",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 51177,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 871,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: ['/credentialSubject/id'],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "LUMZSvvheo-sJ1ZLDEYja",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 52048,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 695,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "P8Iub5-bmwx7taRSxgC9R",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:b635a448-a911-440c-a4cd-109eda4ff68d",
      "columns": [
        "Digital Bazaar",
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "LUMZSvvheo-sJ1ZLDEYja",
              "ctx": null,
              "_testId": "urn:uuid:8614763b-bcab-4515-aaaf-4cb710b5b239",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 683,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "LUMZSvvheo-sJ1ZLDEYja",
              "ctx": null,
              "_testId": "urn:uuid:4514a65c-82b2-43f4-9690-7233f9b67e96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 368,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "LUMZSvvheo-sJ1ZLDEYja",
              "ctx": null,
              "_testId": "urn:uuid:bccef7fe-2f43-40ff-bc9d-6fd429545d03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 369,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "LUMZSvvheo-sJ1ZLDEYja",
              "ctx": null,
              "_testId": "urn:uuid:d7d568a3-32f9-4f22-a246-37663f1cdc99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-di-bbs-test-suite",
    "subtitle": "Interoperability test suite for BBS Data Integrity cryptosuite.",
    "github": "https://github.com/w3c/vc-di-bbs-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-bbs-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity BBS Interoperability Report 1.0",
  "stats": [
    "Tests passed 153/170 90%",
    "Tests failed 17/170 10%",
    "Failures 17",
    "Tests skipped 9",
    "Total tests 179"
  ]
}