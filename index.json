{
  "matrices": [
    {
      "title": "Data Integrity (bbs-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:e20d8a2c-d9ec-44a3-98bd-6e6944dd1836",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:fac59b9d-d114-485b-81d5-48159e7d7628",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:27d15beb-df62-4758-87b3-9fa33f6157af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:5ac7fbe1-3e5a-4c16-941e-4e38e1e2ee1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:7385c8ba-3f3a-4b5b-b6fb-34dec5d352a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:c1a28f96-7c8a-4ba8-98c1-c73baa5e985e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:667edce6-cfd4-4b62-a5f2-215a91af4dcb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:06fc841a-5f70-4b28-87a9-9482ed16c176",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:1df455f9-c07d-4fe5-8868-a818e9a0c520",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:a8aa84bb-89fe-449f-8458-9eca1eaa7f1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:978779e4-de31-40d4-8749-44aac12d201b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:60d36ddd-2e8c-40c4-bcf3-45616b46a9af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:0e7fcc50-d9ac-43b1-97be-d6c14050d14b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:7b6121c5-026e-48a4-9b1a-921e01507634",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:0148d21d-bc29-42b4-9de5-cc129faab89a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Z_96o4RjTnl7_lBdEYx0s",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
          "_testId": "urn:uuid:ad2def96-7386-4267-a81c-e5664ff8e0e0"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "tA5hcUzPTO3HE-8Q-HgcP",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:c94d2149-8984-428c-aa63-cdc8f4105299",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:e20d8a2c-d9ec-44a3-98bd-6e6944dd1836",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:fac59b9d-d114-485b-81d5-48159e7d7628",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:27d15beb-df62-4758-87b3-9fa33f6157af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:5ac7fbe1-3e5a-4c16-941e-4e38e1e2ee1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:7385c8ba-3f3a-4b5b-b6fb-34dec5d352a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:c1a28f96-7c8a-4ba8-98c1-c73baa5e985e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:667edce6-cfd4-4b62-a5f2-215a91af4dcb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:06fc841a-5f70-4b28-87a9-9482ed16c176",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:1df455f9-c07d-4fe5-8868-a818e9a0c520",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:a8aa84bb-89fe-449f-8458-9eca1eaa7f1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:978779e4-de31-40d4-8749-44aac12d201b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:60d36ddd-2e8c-40c4-bcf3-45616b46a9af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:0e7fcc50-d9ac-43b1-97be-d6c14050d14b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:7b6121c5-026e-48a4-9b1a-921e01507634",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/05-di-bbs-create.js",
              "parent": "wYA4rtk2FoIofMz__hdS6",
              "ctx": null,
              "_testId": "urn:uuid:0148d21d-bc29-42b4-9de5-cc129faab89a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (issuers) VC Version 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "mZDbWjik0b3vwqDoL_-R-",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (issuers) VC Version 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
              "body": "function() {\n          proofs.some(\n            proof => proof.cryptosuite === 'bbs-2023'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" property \"bbs-2023\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:d5d05ce8-5af6-4b9e-af1c-c768df411547",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"bbs-2023\"."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:ea02d20c-a780-459b-92d6-ebe8f8c76080",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:1575e6db-d731-442b-bebc-c0997886909b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:ffe6609f-3b11-4807-a5bb-6fcac04a827c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "",
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:06ac35d6-dfc7-4ea0-8e3d-11fd7dd51beb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:12fa4e03-57e4-4e15-bb4b-589eadef2f07",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer,\n            vc: credentials[vcVersion].credential,\n            mandatoryPointers: credentials[vcVersion].mandatoryPointers,\n            addIssuanceDate: (vcVersion === '1.1')\n          });\n          proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n            [issuedVc?.proof];\n          bbsProofs = proofs.filter(\n            proof => proof.cryptosuite === 'bbs-2023');\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 389,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "VLhez2OcaYr_JM_nA8u88",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
          "_testId": "urn:uuid:431f2b14-a807-4ec6-95db-7fddcd0002a0"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "tA5hcUzPTO3HE-8Q-HgcP",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:e5d15dfc-360f-47c6-9d2e-2293951948bc",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"bbs-2023\".",
              "body": "function() {\n          proofs.some(\n            proof => proof.cryptosuite === 'bbs-2023'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" property \"bbs-2023\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:d5d05ce8-5af6-4b9e-af1c-c768df411547",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"bbs-2023\"."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property of the proof MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property of the proof MUST be DataIntegrityProof.",
              "body": "function() {\n            bbsProofs.length.should.be.gte(\n              1,\n              'Expected at least one \"bbs-2023\" proof'\n            );\n            for(const proof of bbsProofs) {\n              should.exist(proof.type, 'Expected \"proof.type\" to exist.');\n              proof.type.should.equal(\n                'DataIntegrityProof',\n                'Expected \"proof.type\" to equal \"DataIntegrityProof.'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:ea02d20c-a780-459b-92d6-ebe8f8c76080",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property of the proof MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms.",
              "body": "async function() {\n          bbsProofs.length.should.be.gte(\n            1,\n            'Expected at least one \"bbs-2023\" proof'\n          );\n          for(const proof of bbsProofs) {\n            await shouldBeProofValue(proof.proofValue);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:1575e6db-d731-442b-bebc-c0997886909b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the proofValue property of the proof MUST be a BBS signature or BBS proof produced according to [CFRG-BBS-SIGNATURE] that is serialized and encoded according to procedures in section 3. Algorithms."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The derived \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The derived \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            await shouldVerifyDerivedProof({verifiableCredential: issuedVc});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:ffe6609f-3b11-4807-a5bb-6fcac04a827c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The derived \"proof\" MUST verify when using a conformant verifier."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"type\" property value \"Multikey\".'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:06ac35d6-dfc7-4ea0-8e3d-11fd7dd51beb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed.",
              "body": "async function() {\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          const proof = proofs.find(p => p.cryptosuite === 'bbs-2023');\n          should.exist(\n            proof,\n            'Expected at least one proof with cryptosuite \"bbs-2023\"'\n          );\n          const vm = verificationMethodDocuments.find(\n            vm => vm.id === proof.verificationMethod);\n          should.exist(\n            vm,\n            `Expected at least one verificationMethod with id ` +\n            `\"${proof.verificationMethod}\"`\n          );\n          should.exist(\n            vm.publicKeyMultibase,\n            'Expected verificationMethod to have property \"publicKeyMultibase\"'\n          );\n          await shouldBeMultibaseEncoded({\n            value: vm.publicKeyMultibase,\n            prefixes: {\n              multibase: 'z',\n              multicodec: new Uint8Array([0xeb, 0x01])\n            },\n            decoder: getBs58Bytes,\n            propertyName: 'publicKeyMultibase',\n            expectedLength: 98\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/10-bbs-create.js",
              "parent": "sFYVyW5pRS1ar5ELMzFFE",
              "ctx": null,
              "_testId": "urn:uuid:12fa4e03-57e4-4e15-bb4b-589eadef2f07",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase property represents a Multibase-encoded Multikey expression of a BLS12-381 public key in the G2 group. The encoding of this field is the two-byte prefix 0xeb01 followed by the 96-byte compressed public key data. The 98-byte value is then encoded using base58-btc (z) as the prefix. Any other encodings MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (bbs-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"If the \"proof\" field is missing, an error MUST be raised.\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "eOQd_UWp4goHZWTL7V8bC",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "_error": null,
              "state": "failed",
              "err": {
                "name": "jsonld.ValidationError",
                "details": {
                  "event": {
                    "type": [
                      "JsonLdEvent"
                    ],
                    "code": "invalid property",
                    "level": "warning",
                    "message": "Dropping property that did not expand into an absolute IRI or keyword.",
                    "details": {
                      "property": "created",
                      "expandedProperty": "created"
                    }
                  }
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bN4yNv-nhTO7rZpDWE5fk",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
          "_testId": "urn:uuid:5980933b-c502-43bd-a3b4-7e3daacfc174"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "tA5hcUzPTO3HE-8Q-HgcP",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/15-di-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:c52b7ee7-d4dd-44d4-99fe-a479dbad194c",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (verifiers) VC 1.1",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "r_frlKCZ7qzsPlxiIYiAf",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "columns": [
        "Grotto Networking"
      ],
      "rows": []
    },
    {
      "title": "bbs-2023 (verifiers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:d1687d27-edcb-4360-81c0-0b5d61c61b82",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 903,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:6ad13f66-8b2e-4781-a3cd-256469fb50a6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 579,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:bc2d6274-0bf9-460d-9cb8-d4251fc83347",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 504,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:0944a0de-4ea2-4227-a101-26833327ff80",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMKoQL2-H3VYUj3XRhzk_oM1OT0DMeoPbPid55DyV38b3TfBO08kL2IKA5Gmupw5MHalKjj_3DV3QFyzM7b8DkdoUotqxnU69y3UXyqsRhqaLs_4WOdZ9xe54PbLFi6Mdg40LB7CN0WOE2A6sLB9ZgJjNQnv0juoJwNN6ktRdqNh8bAfHmn0QdXkjFYKmxeo8D1pSKE7EuaJZwoWEWbW05AkUNS5N8NGRh3gNWD1zq3cXTD9HW_1QU9-94YkF9WPkkHowWw1glOZJpsLWTpExKTYsNgcRdp2yOZA855tiSmeITnumpz5KfzXknfdO6Tt1xjfXRewY-ayNdaqhKYPr3MZVqS26yGf_stP1jRbkaokzHCYqDVTp-1oKiWu2XcwbhQcOD8pX7OlbvQLc3imPgv6wAAIBBwIKAwEEDgUMBgAHDQgGCQMKBQsLDAQNDw4JDwiDGCoYKxgtmDcAAQIDBAUGBwgJCgsMDQ4PEBESExUWFxgYGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYJhgnGCgYKRgqGCsYLBgtGC4YLxgwGDEYMhgzGDQYNRg2GDdA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMKoQL2-H3VYUj3XRhzk_oM1OT0DMeoPbPid55DyV38b3TfBO08kL2IKA5Gmupw5MHalKjj_3DV3QFyzM7b8DkdoUotqxnU69y3UXyqsRhqaLs_4WOdZ9xe54PbLFi6Mdg40LB7CN0WOE2A6sLB9ZgJjNQnv0juoJwNN6ktRdqNh8bAfHmn0QdXkjFYKmxeo8D1pSKE7EuaJZwoWEWbW05AkUNS5N8NGRh3gNWD1zq3cXTD9HW_1QU9-94YkF9WPkkHowWw1glOZJpsLWTpExKTYsNgcRdp2yOZA855tiSmeITnumpz5KfzXknfdO6Tt1xjfXRewY-ayNdaqhKYPr3MZVqS26yGf_stP1jRbkaokzHCYqDVTp-1oKiWu2XcwbhQcOD8pX7OlbvQLc3imPgv6wAAIBBwIKAwEEDgUMBgAHDQgGCQMKBQsLDAQNDw4JDwiDGCoYKxgtmDcAAQIDBAUGBwgJCgsMDQ4PEBESExUWFxgYGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYJhgnGCgYKRgqGCsYLBgtGC4YLxgwGDEYMhgzGDQYNRg2GDdA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1156
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:58:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:b8f7cb6c-ebd2-48f7-9800-bb772b1049fd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0K9nP15mqGCQFN4a8AcrjOHNp42Qn34GuVrCDzdq3hovci2qzi1e-U37vBPmqXMsj7XXz7stEtqjvBe7QQjEK9SCMNjHI6nnfF1f79a0ZkTu5MUjzRh_GwLIo7mnznEdGKQssueRz9yTSWgO1_tVgipsT1Pgmo4W5LnlTZja3dtyvqhMgWt58wGB6ippJR6ZRlbuzh6Dix7HcFx4uTN6i8pXhTupWsf0ZuYSzocjzdnvKpZZ5MY2v2eyB3TtdE6CwpEd_zkHofGRaRVrL4baPJRs1Ugvj7LQ-757L2uhCSx-VknuBkMI1Za6PfN3UDghch-WyEwj178oKgrnkh7TqvcTqZwPjpbsZ4l8oxqaHKHbQsIwuY1KfFgEiAoN384zKTNjN9qXHE-t3pIHHJX3P0Mll-TTb81kSrQqbSB0AQlkfnMHAl4woYOzg0elfSJ-pQ97jjDEiDtlHFukIFi5MMauACyOziGVlNBb7mD9HHBzNt8HMlANF1NB8xhassejB88uZrm1eYg3dJXz7N2pgPwaTQiTCSey65fX9J_TKZRB_OjvkBJH9FPuImRHUmtnfEz71BLM9DDmpjWlVp9eVVTtkG0KTJ8YqFuf9qLK4VTkR0yNJZMe_Vrlwmk8NoPPpGsJ9u-1Z9z3j8TOzyfUKCNDaZJhiYwpYJlKfJgKNrn13v87PWnsUbL2wbjEgFcXfD--SPdHm6-ft2Z2Thx5BE2dJ8nooL8iNsR6lhVsA6s4BX8R_BWPUPOd3LZy-_qEJ70HRng5hBGtPmi6FuC0Ja8NuSVy6ByJZzfvB9mx3pWtZLJ19H86x0rDe5Dv475_cgAuQA7qk5SPs1w_RouT2U4K1Z_6Cs7XpPS3AdXCLWOcceCQeSa429TUE9QCs-z9Eos94aa2GleK8oUC4xYhYeE8fPNwRpxqIZDhMUMw7rkR5ryosMemnFESO4ODsWuha1uL0-I1fZ49AkU9xvr5R6buQqbOqUDMU_Tm79eRHyx5AAEH_rRJFkGGZ0_DN6anBIpUZAYKTURmBwpqQhjyPVgNkrsw5X5nyN_wCBnDHhqQeYQTogvXru_yNmNRMB9usUOXfCcVnGhXLM5p_1fOfXilbJqkRte14BcTYp2SJL5uGlV6iJVggMVfQXRogditSuBsgHYmsSsWSCi5YdMKmlkcLky3PyVK7KAd-Br5lziA_X3udEYctfG42CTxKYGXcC3UGAS_nGVnQ-OwMNj3bxtHfNEG3donTV-4G1dg9Qc8ZjvTjVfU1hdNbS0tb1tGbWb3806lSudPrXAqATxEQq6rAAUBAAIPAwoEAQUEBgsHBggHCQ0KDoMYHhgfGCGYIgADBAYJCgsMDQ8QEhMUFRgZGBoYGxgcGB0YHhgfGCAYIRgoGCkYKhgrGCwYLRguGC8YMBgxQA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0K9nP15mqGCQFN4a8AcrjOHNp42Qn34GuVrCDzdq3hovci2qzi1e-U37vBPmqXMsj7XXz7stEtqjvBe7QQjEK9SCMNjHI6nnfF1f79a0ZkTu5MUjzRh_GwLIo7mnznEdGKQssueRz9yTSWgO1_tVgipsT1Pgmo4W5LnlTZja3dtyvqhMgWt58wGB6ippJR6ZRlbuzh6Dix7HcFx4uTN6i8pXhTupWsf0ZuYSzocjzdnvKpZZ5MY2v2eyB3TtdE6CwpEd_zkHofGRaRVrL4baPJRs1Ugvj7LQ-757L2uhCSx-VknuBkMI1Za6PfN3UDghch-WyEwj178oKgrnkh7TqvcTqZwPjpbsZ4l8oxqaHKHbQsIwuY1KfFgEiAoN384zKTNjN9qXHE-t3pIHHJX3P0Mll-TTb81kSrQqbSB0AQlkfnMHAl4woYOzg0elfSJ-pQ97jjDEiDtlHFukIFi5MMauACyOziGVlNBb7mD9HHBzNt8HMlANF1NB8xhassejB88uZrm1eYg3dJXz7N2pgPwaTQiTCSey65fX9J_TKZRB_OjvkBJH9FPuImRHUmtnfEz71BLM9DDmpjWlVp9eVVTtkG0KTJ8YqFuf9qLK4VTkR0yNJZMe_Vrlwmk8NoPPpGsJ9u-1Z9z3j8TOzyfUKCNDaZJhiYwpYJlKfJgKNrn13v87PWnsUbL2wbjEgFcXfD--SPdHm6-ft2Z2Thx5BE2dJ8nooL8iNsR6lhVsA6s4BX8R_BWPUPOd3LZy-_qEJ70HRng5hBGtPmi6FuC0Ja8NuSVy6ByJZzfvB9mx3pWtZLJ19H86x0rDe5Dv475_cgAuQA7qk5SPs1w_RouT2U4K1Z_6Cs7XpPS3AdXCLWOcceCQeSa429TUE9QCs-z9Eos94aa2GleK8oUC4xYhYeE8fPNwRpxqIZDhMUMw7rkR5ryosMemnFESO4ODsWuha1uL0-I1fZ49AkU9xvr5R6buQqbOqUDMU_Tm79eRHyx5AAEH_rRJFkGGZ0_DN6anBIpUZAYKTURmBwpqQhjyPVgNkrsw5X5nyN_wCBnDHhqQeYQTogvXru_yNmNRMB9usUOXfCcVnGhXLM5p_1fOfXilbJqkRte14BcTYp2SJL5uGlV6iJVggMVfQXRogditSuBsgHYmsSsWSCi5YdMKmlkcLky3PyVK7KAd-Br5lziA_X3udEYctfG42CTxKYGXcC3UGAS_nGVnQ-OwMNj3bxtHfNEG3donTV-4G1dg9Qc8ZjvTjVfU1hdNbS0tb1tGbWb3806lSudPrXAqATxEQq6rAAUBAAIPAwoEAQUEBgsHBggHCQ0KDoMYHhgfGCGYIgADBAYJCgsMDQ8QEhMUFRgZGBoYGxgcGB0YHhgfGCAYIRgoGCkYKhgrGCwYLRguGC8YMBgxQA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1157
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:63:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:8bf97efa-363b-478e-9ddd-12f5f5af0891",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkI7sjVf-AEj0VARJoi1R5pv0OQPRx4Tgqz7UD1oiPo2J8daPLNGB0T7BuKTn5EmZ9YAX_UYxh-6CkkTXmkEorqgXU3KAVbSk3w7dsRNI65j1MtSX-6M7m2f4lbhNXwaw56lR5xAyOMUCZEIX1_L6KTTW2cL3iroWzm48cU8LvreEFAJp50noP6hFKf04lV2yZ0DrbGhLeXCVFYLVR26IqG2WJ9WBiPvUw2AFT7dfaoQMVO7900FbY8FQ0wp0iVsadZsVlCDK3xDtcwCU9gfjgQASDPnnShrtVvbVMKQRcaqsNbOZZ_PgSn4EyZgb26iw4ybp3W5F3_DfNVwA4YUxzMzRx3MJ79AouU5_48ZEubQRKSI760_XQ9CkffnTJAhvy76Akk-XKC2JeZQ017cy2DVIjzcJhYE5IEI8R1VBmvK9IxycPM6mNZqN8yL6tOwFOD8aeIDbBnq0hiX9X0q6HInUhMniMZ8geqAIbBGRwi5wM427ovm6xNej82Bj6qfdr6CSA_oGFuAH5lIWhsg7P4kO_UBsuGs1zgrxC9oDbHTXE8DpnLqQKv2JdiFZNgctqgoFSVTV5457p7kVHXBSE-40lPC-6rSUoTP--CyGnwtJTWi5I2vEL5w4bEKbzbg16Xy8IJ9v9hFbOOaEYgotpiYvJeHA0vo8OMdV6jM3UjQB4xxdEdo4cVYdJD0SIABCb2i4KxlHe3Zy23it91bhEqF5Rc8h_omvkbMd9gHBdIQ-HA30Xk0IqiA7pev0VsIDl8T4_0D-MuLYuOOdUHjjo842Uh0-fRUK56foIx7Tex3zunvjcJ7Une3MrnyYmnPaagRbeQWi04VEt71wxF7LtiRwruh0Xo3Z2s290oJyfPl1Rpukg4-lUcp_sMcbgWHh1SeEoGYisE25hoktcOn7hJJk1QJhIwN6_Pcs1gtksyO4hWyI6o1GqzEatmAXTl1OBxWLg-bDU5YIcBdXbm5SQIHx8AAyoE4LLpMI6d1pOd93AxCjtpGsTile-fB97eeHTQTHww_VBvskzcweYwf0WXYuOHQJW2broseFSZKyTp_mx80cFUzuq9YsCzYpy-VHdkU8LUmpMqyA5gJquzOBbO6Uq9BpOKn7AxEZ9otq8kamG0wxV7gFfqbCKXx7MSeMYoky3lsAUVsrUKJ7DKw60XBc6Dl-f2ZX14EG1EpFFenALDqynreVkhWT9-zQrBK9G1c3BEoM13wQGbUfnTENLJLuKuVnH-LFrgUNy_yOWGUuJTpR-PwK7ASipuvSBzEvzfTLZO7wYu4_j6qiNLd105FUoLbNKy10aqU856c7gud4wovggwNynUtCsXidmeMy2Tob9RU20fkDA0lRDZY4Ds2oJ7u23M78ekJwNF-52jHJZJn4tGOWheZVsaV0yTWcctQSCPT-ZB6ZtUCjC3PISjQj7kxwW64j35s9psWmqXZjho1o-E_oGrmWAiKH9sRM2ydf6wCcgmFRsalyF6CusE22t7W9UAaU2hfuyt1iWsp_QMFqtoCj7sRJcLQPSgdqdLqutzb9b58BjwU2SveDnSapAAcBBAIBAwYECQUABg4HCwgPgwABA5gcAAECAwcICRAREhMUFRghGCIYIxgkGCUYJhgnGCgYLBgtGC4YLxgwGDEYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkI7sjVf-AEj0VARJoi1R5pv0OQPRx4Tgqz7UD1oiPo2J8daPLNGB0T7BuKTn5EmZ9YAX_UYxh-6CkkTXmkEorqgXU3KAVbSk3w7dsRNI65j1MtSX-6M7m2f4lbhNXwaw56lR5xAyOMUCZEIX1_L6KTTW2cL3iroWzm48cU8LvreEFAJp50noP6hFKf04lV2yZ0DrbGhLeXCVFYLVR26IqG2WJ9WBiPvUw2AFT7dfaoQMVO7900FbY8FQ0wp0iVsadZsVlCDK3xDtcwCU9gfjgQASDPnnShrtVvbVMKQRcaqsNbOZZ_PgSn4EyZgb26iw4ybp3W5F3_DfNVwA4YUxzMzRx3MJ79AouU5_48ZEubQRKSI760_XQ9CkffnTJAhvy76Akk-XKC2JeZQ017cy2DVIjzcJhYE5IEI8R1VBmvK9IxycPM6mNZqN8yL6tOwFOD8aeIDbBnq0hiX9X0q6HInUhMniMZ8geqAIbBGRwi5wM427ovm6xNej82Bj6qfdr6CSA_oGFuAH5lIWhsg7P4kO_UBsuGs1zgrxC9oDbHTXE8DpnLqQKv2JdiFZNgctqgoFSVTV5457p7kVHXBSE-40lPC-6rSUoTP--CyGnwtJTWi5I2vEL5w4bEKbzbg16Xy8IJ9v9hFbOOaEYgotpiYvJeHA0vo8OMdV6jM3UjQB4xxdEdo4cVYdJD0SIABCb2i4KxlHe3Zy23it91bhEqF5Rc8h_omvkbMd9gHBdIQ-HA30Xk0IqiA7pev0VsIDl8T4_0D-MuLYuOOdUHjjo842Uh0-fRUK56foIx7Tex3zunvjcJ7Une3MrnyYmnPaagRbeQWi04VEt71wxF7LtiRwruh0Xo3Z2s290oJyfPl1Rpukg4-lUcp_sMcbgWHh1SeEoGYisE25hoktcOn7hJJk1QJhIwN6_Pcs1gtksyO4hWyI6o1GqzEatmAXTl1OBxWLg-bDU5YIcBdXbm5SQIHx8AAyoE4LLpMI6d1pOd93AxCjtpGsTile-fB97eeHTQTHww_VBvskzcweYwf0WXYuOHQJW2broseFSZKyTp_mx80cFUzuq9YsCzYpy-VHdkU8LUmpMqyA5gJquzOBbO6Uq9BpOKn7AxEZ9otq8kamG0wxV7gFfqbCKXx7MSeMYoky3lsAUVsrUKJ7DKw60XBc6Dl-f2ZX14EG1EpFFenALDqynreVkhWT9-zQrBK9G1c3BEoM13wQGbUfnTENLJLuKuVnH-LFrgUNy_yOWGUuJTpR-PwK7ASipuvSBzEvzfTLZO7wYu4_j6qiNLd105FUoLbNKy10aqU856c7gud4wovggwNynUtCsXidmeMy2Tob9RU20fkDA0lRDZY4Ds2oJ7u23M78ekJwNF-52jHJZJn4tGOWheZVsaV0yTWcctQSCPT-ZB6ZtUCjC3PISjQj7kxwW64j35s9psWmqXZjho1o-E_oGrmWAiKH9sRM2ydf6wCcgmFRsalyF6CusE22t7W9UAaU2hfuyt1iWsp_QMFqtoCj7sRJcLQPSgdqdLqutzb9b58BjwU2SveDnSapAAcBBAIBAwYECQUABg4HCwgPgwABA5gcAAECAwcICRAREhMUFRghGCIYIxgkGCUYJhgnGCgYLBgtGC4YLxgwGDEYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1158
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify proofValue to not start with 'u'\n          signedCredentialCopy.proof.proofValue = 'a';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:59b6b971-d489-4d3b-926b-d7048f4854e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:32:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:07931b30-a08d-4519-bf69-17e863c9b32e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = getTestVector(signed);\n          const signedCredentialCopy = klona(credential);\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:85b41fdb-8a54-4b8b-9194-e209bdf33ce9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            const signedCredentialCopy = klona(credential);\n            // intentionally modify `credentialSubject` ID\n            signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n            await verificationFail({\n              credential: signedCredentialCopy, verifier\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:0926540a-b804-49f9-aff9-a86b5aecb2c8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 349,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          const baseReason = 'Should not verify a VC with no ';\n          const vectors = new Map([\n            ['type identifier', ['type']],\n            ['cryptosuite identifier', ['cryptosuite']],\n            ['verificationMethod', ['verificationMethod']],\n            ['type & no cryptosuite identifier', ['type', 'cryptosuite']],\n            [\n              'type identifier & no verificationMethod',\n              ['type', 'verificationMethod']\n            ],\n            [\n              'cryptosuite identifier & no verificationMethod',\n              ['cryptosuite', 'verificationMethod']\n            ],\n            [\n              'type & no cryptosuite identifier & no verificationMethod',\n              ['type', 'cryptosuite', 'verificationMethod']\n            ]\n          ]);\n          for(const [testReason, terms] of vectors) {\n            const credential = klona(getTestVector(disclosed?.base));\n            for(const prop of terms) {\n              credential.proof[prop] = '';\n            }\n            await verificationFail({\n              credential,\n              verifier,\n              reason: `${baseReason}${testReason}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:9c873eb6-c3d5-40a7-96cb-a200a5bc3fa2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n          this.currentTest.cell = {\n            columnId: name, rowId: this.currentTest.title\n          };\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 30000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "I_i39vHnKiBGR1CczsK5G",
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
          "_testId": "urn:uuid:52b28721-2480-4c84-bdba-ab91eaaab084"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "tA5hcUzPTO3HE-8Q-HgcP",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ab0fb23a-d7dc-4ba7-9fa0-b5c73e98b730",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with a bbs-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with a bbs-2023 proof.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:d1687d27-edcb-4360-81c0-0b5d61c61b82",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with a bbs-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 903,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.nested);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:6ad13f66-8b2e-4781-a3cd-256469fb50a6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 579,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.noIds);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:bc2d6274-0bf9-460d-9cb8-d4251fc83347",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 504,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.full);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:0944a0de-4ea2-4227-a101-26833327ff80",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkBMKoQL2-H3VYUj3XRhzk_oM1OT0DMeoPbPid55DyV38b3TfBO08kL2IKA5Gmupw5MHalKjj_3DV3QFyzM7b8DkdoUotqxnU69y3UXyqsRhqaLs_4WOdZ9xe54PbLFi6Mdg40LB7CN0WOE2A6sLB9ZgJjNQnv0juoJwNN6ktRdqNh8bAfHmn0QdXkjFYKmxeo8D1pSKE7EuaJZwoWEWbW05AkUNS5N8NGRh3gNWD1zq3cXTD9HW_1QU9-94YkF9WPkkHowWw1glOZJpsLWTpExKTYsNgcRdp2yOZA855tiSmeITnumpz5KfzXknfdO6Tt1xjfXRewY-ayNdaqhKYPr3MZVqS26yGf_stP1jRbkaokzHCYqDVTp-1oKiWu2XcwbhQcOD8pX7OlbvQLc3imPgv6wAAIBBwIKAwEEDgUMBgAHDQgGCQMKBQsLDAQNDw4JDwiDGCoYKxgtmDcAAQIDBAUGBwgJCgsMDQ4PEBESExUWFxgYGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYJhgnGCgYKRgqGCsYLBgtGC4YLxgwGDEYMhgzGDQYNRg2GDdA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkBMKoQL2-H3VYUj3XRhzk_oM1OT0DMeoPbPid55DyV38b3TfBO08kL2IKA5Gmupw5MHalKjj_3DV3QFyzM7b8DkdoUotqxnU69y3UXyqsRhqaLs_4WOdZ9xe54PbLFi6Mdg40LB7CN0WOE2A6sLB9ZgJjNQnv0juoJwNN6ktRdqNh8bAfHmn0QdXkjFYKmxeo8D1pSKE7EuaJZwoWEWbW05AkUNS5N8NGRh3gNWD1zq3cXTD9HW_1QU9-94YkF9WPkkHowWw1glOZJpsLWTpExKTYsNgcRdp2yOZA855tiSmeITnumpz5KfzXknfdO6Tt1xjfXRewY-ayNdaqhKYPr3MZVqS26yGf_stP1jRbkaokzHCYqDVTp-1oKiWu2XcwbhQcOD8pX7OlbvQLc3imPgv6wAAIBBwIKAwEEDgUMBgAHDQgGCQMKBQsLDAQNDw4JDwiDGCoYKxgtmDcAAQIDBAUGBwgJCgsMDQ4PEBESExUWFxgYGBkYGhgbGBwYHRgeGB8YIBghGCIYIxgkGCUYJhgnGCgYKRgqGCsYLBgtGC4YLxgwGDEYMhgzGDQYNRg2GDdA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1156
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:58:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.lessThanFull);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:b8f7cb6c-ebd2-48f7-9800-bb772b1049fd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkD0K9nP15mqGCQFN4a8AcrjOHNp42Qn34GuVrCDzdq3hovci2qzi1e-U37vBPmqXMsj7XXz7stEtqjvBe7QQjEK9SCMNjHI6nnfF1f79a0ZkTu5MUjzRh_GwLIo7mnznEdGKQssueRz9yTSWgO1_tVgipsT1Pgmo4W5LnlTZja3dtyvqhMgWt58wGB6ippJR6ZRlbuzh6Dix7HcFx4uTN6i8pXhTupWsf0ZuYSzocjzdnvKpZZ5MY2v2eyB3TtdE6CwpEd_zkHofGRaRVrL4baPJRs1Ugvj7LQ-757L2uhCSx-VknuBkMI1Za6PfN3UDghch-WyEwj178oKgrnkh7TqvcTqZwPjpbsZ4l8oxqaHKHbQsIwuY1KfFgEiAoN384zKTNjN9qXHE-t3pIHHJX3P0Mll-TTb81kSrQqbSB0AQlkfnMHAl4woYOzg0elfSJ-pQ97jjDEiDtlHFukIFi5MMauACyOziGVlNBb7mD9HHBzNt8HMlANF1NB8xhassejB88uZrm1eYg3dJXz7N2pgPwaTQiTCSey65fX9J_TKZRB_OjvkBJH9FPuImRHUmtnfEz71BLM9DDmpjWlVp9eVVTtkG0KTJ8YqFuf9qLK4VTkR0yNJZMe_Vrlwmk8NoPPpGsJ9u-1Z9z3j8TOzyfUKCNDaZJhiYwpYJlKfJgKNrn13v87PWnsUbL2wbjEgFcXfD--SPdHm6-ft2Z2Thx5BE2dJ8nooL8iNsR6lhVsA6s4BX8R_BWPUPOd3LZy-_qEJ70HRng5hBGtPmi6FuC0Ja8NuSVy6ByJZzfvB9mx3pWtZLJ19H86x0rDe5Dv475_cgAuQA7qk5SPs1w_RouT2U4K1Z_6Cs7XpPS3AdXCLWOcceCQeSa429TUE9QCs-z9Eos94aa2GleK8oUC4xYhYeE8fPNwRpxqIZDhMUMw7rkR5ryosMemnFESO4ODsWuha1uL0-I1fZ49AkU9xvr5R6buQqbOqUDMU_Tm79eRHyx5AAEH_rRJFkGGZ0_DN6anBIpUZAYKTURmBwpqQhjyPVgNkrsw5X5nyN_wCBnDHhqQeYQTogvXru_yNmNRMB9usUOXfCcVnGhXLM5p_1fOfXilbJqkRte14BcTYp2SJL5uGlV6iJVggMVfQXRogditSuBsgHYmsSsWSCi5YdMKmlkcLky3PyVK7KAd-Br5lziA_X3udEYctfG42CTxKYGXcC3UGAS_nGVnQ-OwMNj3bxtHfNEG3donTV-4G1dg9Qc8ZjvTjVfU1hdNbS0tb1tGbWb3806lSudPrXAqATxEQq6rAAUBAAIPAwoEAQUEBgsHBggHCQ0KDoMYHhgfGCGYIgADBAYJCgsMDQ8QEhMUFRgZGBoYGxgcGB0YHhgfGCAYIRgoGCkYKhgrGCwYLRguGC8YMBgxQA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkD0K9nP15mqGCQFN4a8AcrjOHNp42Qn34GuVrCDzdq3hovci2qzi1e-U37vBPmqXMsj7XXz7stEtqjvBe7QQjEK9SCMNjHI6nnfF1f79a0ZkTu5MUjzRh_GwLIo7mnznEdGKQssueRz9yTSWgO1_tVgipsT1Pgmo4W5LnlTZja3dtyvqhMgWt58wGB6ippJR6ZRlbuzh6Dix7HcFx4uTN6i8pXhTupWsf0ZuYSzocjzdnvKpZZ5MY2v2eyB3TtdE6CwpEd_zkHofGRaRVrL4baPJRs1Ugvj7LQ-757L2uhCSx-VknuBkMI1Za6PfN3UDghch-WyEwj178oKgrnkh7TqvcTqZwPjpbsZ4l8oxqaHKHbQsIwuY1KfFgEiAoN384zKTNjN9qXHE-t3pIHHJX3P0Mll-TTb81kSrQqbSB0AQlkfnMHAl4woYOzg0elfSJ-pQ97jjDEiDtlHFukIFi5MMauACyOziGVlNBb7mD9HHBzNt8HMlANF1NB8xhassejB88uZrm1eYg3dJXz7N2pgPwaTQiTCSey65fX9J_TKZRB_OjvkBJH9FPuImRHUmtnfEz71BLM9DDmpjWlVp9eVVTtkG0KTJ8YqFuf9qLK4VTkR0yNJZMe_Vrlwmk8NoPPpGsJ9u-1Z9z3j8TOzyfUKCNDaZJhiYwpYJlKfJgKNrn13v87PWnsUbL2wbjEgFcXfD--SPdHm6-ft2Z2Thx5BE2dJ8nooL8iNsR6lhVsA6s4BX8R_BWPUPOd3LZy-_qEJ70HRng5hBGtPmi6FuC0Ja8NuSVy6ByJZzfvB9mx3pWtZLJ19H86x0rDe5Dv475_cgAuQA7qk5SPs1w_RouT2U4K1Z_6Cs7XpPS3AdXCLWOcceCQeSa429TUE9QCs-z9Eos94aa2GleK8oUC4xYhYeE8fPNwRpxqIZDhMUMw7rkR5ryosMemnFESO4ODsWuha1uL0-I1fZ49AkU9xvr5R6buQqbOqUDMU_Tm79eRHyx5AAEH_rRJFkGGZ0_DN6anBIpUZAYKTURmBwpqQhjyPVgNkrsw5X5nyN_wCBnDHhqQeYQTogvXru_yNmNRMB9usUOXfCcVnGhXLM5p_1fOfXilbJqkRte14BcTYp2SJL5uGlV6iJVggMVfQXRogditSuBsgHYmsSsWSCi5YdMKmlkcLky3PyVK7KAd-Br5lziA_X3udEYctfG42CTxKYGXcC3UGAS_nGVnQ-OwMNj3bxtHfNEG3donTV-4G1dg9Qc8ZjvTjVfU1hdNbS0tb1tGbWb3806lSudPrXAqATxEQq6rAAUBAAIPAwoEAQUEBgsHBggHCQ0KDoMYHhgfGCGYIgADBAYJCgsMDQ8QEhMUFRgZGBoYGxgcGB0YHhgfGCAYIRgoGCkYKhgrGCwYLRguGC8YMBgxQA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1157
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:63:13)"
              }
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.array?.missingElements);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:8bf97efa-363b-478e-9ddd-12f5f5af0891",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv\",\"cryptosuite\":\"bbs-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0DhVkEkI7sjVf-AEj0VARJoi1R5pv0OQPRx4Tgqz7UD1oiPo2J8daPLNGB0T7BuKTn5EmZ9YAX_UYxh-6CkkTXmkEorqgXU3KAVbSk3w7dsRNI65j1MtSX-6M7m2f4lbhNXwaw56lR5xAyOMUCZEIX1_L6KTTW2cL3iroWzm48cU8LvreEFAJp50noP6hFKf04lV2yZ0DrbGhLeXCVFYLVR26IqG2WJ9WBiPvUw2AFT7dfaoQMVO7900FbY8FQ0wp0iVsadZsVlCDK3xDtcwCU9gfjgQASDPnnShrtVvbVMKQRcaqsNbOZZ_PgSn4EyZgb26iw4ybp3W5F3_DfNVwA4YUxzMzRx3MJ79AouU5_48ZEubQRKSI760_XQ9CkffnTJAhvy76Akk-XKC2JeZQ017cy2DVIjzcJhYE5IEI8R1VBmvK9IxycPM6mNZqN8yL6tOwFOD8aeIDbBnq0hiX9X0q6HInUhMniMZ8geqAIbBGRwi5wM427ovm6xNej82Bj6qfdr6CSA_oGFuAH5lIWhsg7P4kO_UBsuGs1zgrxC9oDbHTXE8DpnLqQKv2JdiFZNgctqgoFSVTV5457p7kVHXBSE-40lPC-6rSUoTP--CyGnwtJTWi5I2vEL5w4bEKbzbg16Xy8IJ9v9hFbOOaEYgotpiYvJeHA0vo8OMdV6jM3UjQB4xxdEdo4cVYdJD0SIABCb2i4KxlHe3Zy23it91bhEqF5Rc8h_omvkbMd9gHBdIQ-HA30Xk0IqiA7pev0VsIDl8T4_0D-MuLYuOOdUHjjo842Uh0-fRUK56foIx7Tex3zunvjcJ7Une3MrnyYmnPaagRbeQWi04VEt71wxF7LtiRwruh0Xo3Z2s290oJyfPl1Rpukg4-lUcp_sMcbgWHh1SeEoGYisE25hoktcOn7hJJk1QJhIwN6_Pcs1gtksyO4hWyI6o1GqzEatmAXTl1OBxWLg-bDU5YIcBdXbm5SQIHx8AAyoE4LLpMI6d1pOd93AxCjtpGsTile-fB97eeHTQTHww_VBvskzcweYwf0WXYuOHQJW2broseFSZKyTp_mx80cFUzuq9YsCzYpy-VHdkU8LUmpMqyA5gJquzOBbO6Uq9BpOKn7AxEZ9otq8kamG0wxV7gFfqbCKXx7MSeMYoky3lsAUVsrUKJ7DKw60XBc6Dl-f2ZX14EG1EpFFenALDqynreVkhWT9-zQrBK9G1c3BEoM13wQGbUfnTENLJLuKuVnH-LFrgUNy_yOWGUuJTpR-PwK7ASipuvSBzEvzfTLZO7wYu4_j6qiNLd105FUoLbNKy10aqU856c7gud4wovggwNynUtCsXidmeMy2Tob9RU20fkDA0lRDZY4Ds2oJ7u23M78ekJwNF-52jHJZJn4tGOWheZVsaV0yTWcctQSCPT-ZB6ZtUCjC3PISjQj7kxwW64j35s9psWmqXZjho1o-E_oGrmWAiKH9sRM2ydf6wCcgmFRsalyF6CusE22t7W9UAaU2hfuyt1iWsp_QMFqtoCj7sRJcLQPSgdqdLqutzb9b58BjwU2SveDnSapAAcBBAIBAwYECQUABg4HCwgPgwABA5gcAAECAwcICRAREhMUFRghGCIYIxgkGCUYJhgnGCgYLBgtGC4YLxgwGDEYN0A\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv#zUC7GMwWWkA5UMTx7Gg6sabmpchWgq8p1xGhUXwBiDytY8BgD6eq5AmxNgjwDbAz8Rq6VFBLdNjvXR4ydEdwDEN9L4vGFfLkxs8UsU3wQj9HQGjQb7LHWdRNJv3J1kGoA3BvnBv",
                          "cryptosuite": "bbs-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0DhVkEkI7sjVf-AEj0VARJoi1R5pv0OQPRx4Tgqz7UD1oiPo2J8daPLNGB0T7BuKTn5EmZ9YAX_UYxh-6CkkTXmkEorqgXU3KAVbSk3w7dsRNI65j1MtSX-6M7m2f4lbhNXwaw56lR5xAyOMUCZEIX1_L6KTTW2cL3iroWzm48cU8LvreEFAJp50noP6hFKf04lV2yZ0DrbGhLeXCVFYLVR26IqG2WJ9WBiPvUw2AFT7dfaoQMVO7900FbY8FQ0wp0iVsadZsVlCDK3xDtcwCU9gfjgQASDPnnShrtVvbVMKQRcaqsNbOZZ_PgSn4EyZgb26iw4ybp3W5F3_DfNVwA4YUxzMzRx3MJ79AouU5_48ZEubQRKSI760_XQ9CkffnTJAhvy76Akk-XKC2JeZQ017cy2DVIjzcJhYE5IEI8R1VBmvK9IxycPM6mNZqN8yL6tOwFOD8aeIDbBnq0hiX9X0q6HInUhMniMZ8geqAIbBGRwi5wM427ovm6xNej82Bj6qfdr6CSA_oGFuAH5lIWhsg7P4kO_UBsuGs1zgrxC9oDbHTXE8DpnLqQKv2JdiFZNgctqgoFSVTV5457p7kVHXBSE-40lPC-6rSUoTP--CyGnwtJTWi5I2vEL5w4bEKbzbg16Xy8IJ9v9hFbOOaEYgotpiYvJeHA0vo8OMdV6jM3UjQB4xxdEdo4cVYdJD0SIABCb2i4KxlHe3Zy23it91bhEqF5Rc8h_omvkbMd9gHBdIQ-HA30Xk0IqiA7pev0VsIDl8T4_0D-MuLYuOOdUHjjo842Uh0-fRUK56foIx7Tex3zunvjcJ7Une3MrnyYmnPaagRbeQWi04VEt71wxF7LtiRwruh0Xo3Z2s290oJyfPl1Rpukg4-lUcp_sMcbgWHh1SeEoGYisE25hoktcOn7hJJk1QJhIwN6_Pcs1gtksyO4hWyI6o1GqzEatmAXTl1OBxWLg-bDU5YIcBdXbm5SQIHx8AAyoE4LLpMI6d1pOd93AxCjtpGsTile-fB97eeHTQTHww_VBvskzcweYwf0WXYuOHQJW2broseFSZKyTp_mx80cFUzuq9YsCzYpy-VHdkU8LUmpMqyA5gJquzOBbO6Uq9BpOKn7AxEZ9otq8kamG0wxV7gFfqbCKXx7MSeMYoky3lsAUVsrUKJ7DKw60XBc6Dl-f2ZX14EG1EpFFenALDqynreVkhWT9-zQrBK9G1c3BEoM13wQGbUfnTENLJLuKuVnH-LFrgUNy_yOWGUuJTpR-PwK7ASipuvSBzEvzfTLZO7wYu4_j6qiNLd105FUoLbNKy10aqU856c7gud4wovggwNynUtCsXidmeMy2Tob9RU20fkDA0lRDZY4Ds2oJ7u23M78ekJwNF-52jHJZJn4tGOWheZVsaV0yTWcctQSCPT-ZB6ZtUCjC3PISjQj7kxwW64j35s9psWmqXZjho1o-E_oGrmWAiKH9sRM2ydf6wCcgmFRsalyF6CusE22t7W9UAaU2hfuyt1iWsp_QMFqtoCj7sRJcLQPSgdqdLqutzb9b58BjwU2SveDnSapAAcBBAIBAwYECQUABg4HCwgPgwABA5gcAAECAwcICRAREhMUFRghGCIYIxgkGCUYJhgnGCgYLBgtGC4YLxgwGDEYN0A"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/BBS/credentials/verify",
                  "status": 500,
                  "data": {
                    "error": {
                      "name": "jsonld.SyntaxError",
                      "details": {
                        "code": "protected term redefinition",
                        "context": {
                          "@protected": true,
                          "id": "@id",
                          "type": "@type",
                          "credentialSchema": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSchema",
                            "@type": "@id"
                          },
                          "credentialStatus": {
                            "@id": "https://www.w3.org/2018/credentials#credentialStatus",
                            "@type": "@id"
                          },
                          "credentialSubject": {
                            "@id": "https://www.w3.org/2018/credentials#credentialSubject",
                            "@type": "@id"
                          },
                          "description": {
                            "@id": "https://schema.org/description",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "evidence": {
                            "@id": "https://www.w3.org/2018/credentials#evidence",
                            "@type": "@id"
                          },
                          "validFrom": {
                            "@id": "https://www.w3.org/2018/credentials#validFrom",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "validUntil": {
                            "@id": "https://www.w3.org/2018/credentials#validUntil",
                            "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
                          },
                          "issuer": {
                            "@id": "https://www.w3.org/2018/credentials#issuer",
                            "@type": "@id",
                            "@context": {
                              "@protected": true,
                              "id": "@id",
                              "type": "@type",
                              "description": {
                                "@id": "https://schema.org/description",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              },
                              "name": {
                                "@id": "https://schema.org/name",
                                "@context": {
                                  "value": "@value",
                                  "lang": "@language",
                                  "dir": "@direction"
                                }
                              }
                            }
                          },
                          "name": {
                            "@id": "https://schema.org/name",
                            "@context": {
                              "value": "@value",
                              "lang": "@language",
                              "dir": "@direction"
                            }
                          },
                          "proof": {
                            "@id": "https://w3id.org/security#proof",
                            "@type": "@id",
                            "@container": "@graph"
                          },
                          "refreshService": {
                            "@id": "https://www.w3.org/2018/credentials#refreshService",
                            "@type": "@id"
                          },
                          "termsOfUse": {
                            "@id": "https://www.w3.org/2018/credentials#termsOfUse",
                            "@type": "@id"
                          },
                          "confidenceMethod": {
                            "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
                            "@type": "@id"
                          }
                        },
                        "term": "name"
                      },
                      "api": "BBSverify",
                      "reqNum": 1158
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:46:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:68:13)"
              }
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify proofValue to not start with 'u'\n          signedCredentialCopy.proof.proofValue = 'a';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:59b6b971-d489-4d3b-926b-d7048f4854e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 invalid input!: expected 500 to equal 400\n    at verificationFail (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/assertions.js:32:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/suites/verify.js:76:11)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised.",
              "body": "async function() {\n          const credential = getTestVector(disclosed?.base);\n          const signedCredentialCopy = klona(credential);\n          signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:07931b30-a08d-4519-bf69-17e863c9b32e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"bbs-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n          const credential = getTestVector(signed);\n          const signedCredentialCopy = klona(credential);\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:85b41fdb-8a54-4b8b-9194-e209bdf33ce9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n            const credential = getTestVector(disclosed?.base);\n            const signedCredentialCopy = klona(credential);\n            // intentionally modify `credentialSubject` ID\n            signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n            await verificationFail({\n              credential: signedCredentialCopy, verifier\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:0926540a-b804-49f9-aff9-a86b5aecb2c8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 349,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod).",
              "body": "async function() {\n          const baseReason = 'Should not verify a VC with no ';\n          const vectors = new Map([\n            ['type identifier', ['type']],\n            ['cryptosuite identifier', ['cryptosuite']],\n            ['verificationMethod', ['verificationMethod']],\n            ['type & no cryptosuite identifier', ['type', 'cryptosuite']],\n            [\n              'type identifier & no verificationMethod',\n              ['type', 'verificationMethod']\n            ],\n            [\n              'cryptosuite identifier & no verificationMethod',\n              ['cryptosuite', 'verificationMethod']\n            ],\n            [\n              'type & no cryptosuite identifier & no verificationMethod',\n              ['type', 'cryptosuite', 'verificationMethod']\n            ]\n          ]);\n          for(const [testReason, terms] of vectors) {\n            const credential = klona(getTestVector(disclosed?.base));\n            for(const prop of terms) {\n              credential.proof[prop] = '';\n            }\n            await verificationFail({\n              credential,\n              verifier,\n              reason: `${baseReason}${testReason}`\n            });\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/20-bbs-verify.js",
              "parent": "3ZOnGbBpUTFX2jOm3Vd4n",
              "ctx": null,
              "_testId": "urn:uuid:9c873eb6-c3d5-40a7-96cb-a200a5bc3fa2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type), a cryptosuite identifier (cryptosuite), and a verification method (verificationMethod)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "bbs-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"bbs-2023 (interop)\"",
          "body": "async function() {\n      const [issuer] = issuerEndpoints;\n      const issuedVc = await createInitialVc({\n        issuer,\n        vc: credentials.interop['2.0'].credential,\n        mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n        addIssuanceDate: false\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderSettings.tags],\n        property: 'vcHolders'\n      });\n      // Use DB vc holder to create disclosed credentials\n      const vcHolders = matchingVcHolders.get(\n        holderSettings.holderName).endpoints;\n      const vcHolder = vcHolders.find(endpoint => endpoint.tags.has(tag));\n      ({disclosedCredential} = await createDisclosedVc({\n        selectivePointers: ['/credentialSubject/id'],\n        signedCredential: issuedVc,\n        vcHolder\n      }));\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 30000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-zJYs_9p7Ao0iZfVQ_5aF",
          "ctx": null,
          "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12635,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 769,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 30000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "tA5hcUzPTO3HE-8Q-HgcP",
      "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:d8d3d15f-e8d6-47f6-846d-7cd3dadf36b4",
      "columns": [
        "Grotto Networking"
      ],
      "rows": [
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        await verificationSuccess({\n          credential: disclosedCredential, verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 30000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-bbs-test-suite/vc-di-bbs-test-suite/tests/30-bbs-interop.js",
              "parent": "-zJYs_9p7Ao0iZfVQ_5aF",
              "ctx": null,
              "_testId": "urn:uuid:e100c1ec-bd00-4403-b6c3-bf2c61861a6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 608,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-di-bbs-test-suite",
    "subtitle": "Interoperability test suite for BBS Data Integrity cryptosuite.",
    "github": "https://github.com/w3c/vc-di-bbs-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-bbs-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity BBS Interoperability Report 1.0",
  "stats": [
    "Tests passed 29/33 87%",
    "Tests failed 5/33 16%",
    "Failures 5",
    "Tests skipped 1",
    "Total tests 34"
  ]
}